{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./lib/util.ts","webpack:///./lib/tensor.ts","webpack:///./lib/backends/webgl/webgl-operator-utils.ts","webpack:///./lib/instrument.ts","webpack:///./lib/wasm-binding.ts","webpack:///./lib/backends/webgl/glsl-definitions.ts","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///./node_modules/ndarray/ndarray.js","webpack:///./lib/operators.ts","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/onnx-proto/dist/onnx.js","webpack:///./lib/backends/webgl/ops/reshape.ts","webpack:///./lib/opset.ts","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/long/src/long.js","webpack:///./lib/ops/batch-normalization.ts","webpack:///./lib/ops/binary-op.ts","webpack:///./lib/ops/conv.ts","webpack:///./lib/ops/gemm.ts","webpack:///./lib/ops/matmul.ts","webpack:///./lib/ops/pool.ts","webpack:///./lib/ops/softmax.ts","webpack:///./lib/ops/sum.ts","webpack:///./node_modules/process/browser.js","webpack:///./lib/backends/webgl/utils.ts","webpack:///./lib/backends/webgl/base-webgl-context.ts","webpack:///./lib/api/index.ts","webpack:///./lib/backends/cpu/op-resolve-rules.ts","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./node_modules/ndarray-ops/ndarray-ops.js","webpack:///./lib/backends/cpu/ops/binary-op.ts","webpack:///./lib/ops/concat.ts","webpack:///./node_modules/ndarray-gemm/gemm.js","webpack:///./lib/ops/dropout.ts","webpack:///./lib/ops/flatten.ts","webpack:///./lib/ops/gather.ts","webpack:///./lib/backends/cpu/ops/transpose.ts","webpack:///./lib/ops/transpose.ts","webpack:///./lib/ops/image-scaler.ts","webpack:///./lib/ops/instance-normalization.ts","webpack:///./lib/ops/reduce-op.ts","webpack:///./lib/ops/reshape.ts","webpack:///./lib/ops/slice.ts","webpack:///./lib/ops/squeeze.ts","webpack:///./lib/ops/tile.ts","webpack:///./lib/ops/unary-op.ts","webpack:///./lib/ops/unsqueeze.ts","webpack:///./lib/ops/clip.ts","webpack:///./node_modules/platform/platform.js","webpack:///./lib/backends/webgl/texture-data-encoder.ts","webpack:///./lib/api/tensor-impl.ts","webpack:///./lib/api/tensor-impl-utils.ts","webpack:///./lib/api/onnx-impl.ts","webpack:///./lib/backends/backend-cpu.ts","webpack:///./lib/backends/cpu/session-handler.ts","webpack:///./lib/backends/cpu/inference-handler.ts","webpack:///./lib/backends/cpu/ops/argMax.ts","webpack:///./lib/ops/argMax.ts","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/protobufjs/minimal.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./node_modules/iota-array/iota.js","webpack:///./node_modules/is-buffer/index.js","webpack:///./node_modules/cwise-compiler/compiler.js","webpack:///./node_modules/cwise-compiler/lib/thunk.js","webpack:///./node_modules/cwise-compiler/lib/compile.js","webpack:///./node_modules/uniq/uniq.js","webpack:///./lib/backends/cpu/ops/batch-normalization.ts","webpack:///./lib/backends/cpu/ops/concat.ts","webpack:///./lib/backends/cpu/ops/conv.ts","webpack:///./node_modules/ndarray-gemm/lib/planner.js","webpack:///./lib/backends/cpu/ops/dropout.ts","webpack:///./lib/backends/cpu/ops/flatten.ts","webpack:///./lib/backends/cpu/ops/gather.ts","webpack:///./lib/backends/cpu/ops/gemm.ts","webpack:///./lib/backends/cpu/ops/image-scaler.ts","webpack:///./lib/backends/cpu/ops/instance-normalization.ts","webpack:///./lib/backends/cpu/ops/lrn.ts","webpack:///./lib/ops/lrn.ts","webpack:///./lib/backends/cpu/ops/matmul.ts","webpack:///./lib/backends/cpu/ops/pool.ts","webpack:///./lib/backends/cpu/ops/reduce.ts","webpack:///./lib/backends/cpu/ops/reshape.ts","webpack:///./lib/backends/cpu/ops/slice.ts","webpack:///./lib/backends/cpu/ops/softmax.ts","webpack:///./lib/backends/cpu/ops/squeeze.ts","webpack:///./lib/backends/cpu/ops/sum.ts","webpack:///./lib/backends/cpu/ops/tile.ts","webpack:///./lib/backends/cpu/ops/unary-op.ts","webpack:///./lib/backends/cpu/ops/unsqueeze.ts","webpack:///./lib/backends/backend-wasm.ts","webpack:///./lib/wasm-binding-core.ts","webpack:///./dist/onnx-wasm.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./lib/worker/worker-main.ts","webpack:///./lib/backends/wasm/session-handler.ts","webpack:///./lib/backends/wasm/inference-handler.ts","webpack:///./lib/backends/wasm/op-resolve-rules.ts","webpack:///./lib/backends/wasm/ops/batch-normalization.ts","webpack:///./lib/backends/wasm/ops/binary-op.ts","webpack:///./lib/backends/wasm/ops/clip.ts","webpack:///./lib/backends/wasm/ops/conv.ts","webpack:///./lib/backends/wasm/ops/gemm.ts","webpack:///./lib/backends/wasm/ops/instance-normalization.ts","webpack:///./lib/backends/wasm/ops/matmul.ts","webpack:///./lib/backends/wasm/ops/pool.ts","webpack:///./lib/backends/wasm/ops/softmax.ts","webpack:///./lib/backends/wasm/ops/sum.ts","webpack:///./lib/backends/backend-webgl.ts","webpack:///(webpack)/buildin/module.js","webpack:///./lib/backends/webgl/session-handler.ts","webpack:///./lib/backends/webgl/inference-handler.ts","webpack:///./lib/backends/webgl/ops/uint8-encode.ts","webpack:///./lib/backends/webgl/op-resolve-rules.ts","webpack:///./lib/backends/webgl/ops/batch-normalization.ts","webpack:///./lib/backends/webgl/ops/binary-op.ts","webpack:///./lib/backends/webgl/ops/clip.ts","webpack:///./lib/backends/webgl/ops/concat.ts","webpack:///./lib/backends/webgl/ops/conv.ts","webpack:///./lib/backends/webgl/ops/dropout.ts","webpack:///./lib/backends/webgl/ops/elu.ts","webpack:///./lib/ops/elu.ts","webpack:///./lib/backends/webgl/ops/flatten.ts","webpack:///./lib/backends/webgl/ops/gather.ts","webpack:///./lib/backends/webgl/ops/gemm.ts","webpack:///./lib/backends/webgl/ops/image-scaler.ts","webpack:///./lib/backends/webgl/ops/leaky-relu.ts","webpack:///./lib/ops/leaky-relu.ts","webpack:///./lib/backends/webgl/ops/matmul.ts","webpack:///./lib/backends/webgl/ops/pad.ts","webpack:///./lib/ops/pad.ts","webpack:///./lib/backends/webgl/ops/pool.ts","webpack:///./lib/backends/webgl/ops/reduce.ts","webpack:///./lib/backends/webgl/ops/slice.ts","webpack:///./lib/backends/webgl/ops/softmax.ts","webpack:///./lib/backends/webgl/ops/split.ts","webpack:///./lib/ops/split.ts","webpack:///./lib/backends/webgl/ops/squeeze.ts","webpack:///./lib/backends/webgl/ops/sum.ts","webpack:///./lib/backends/webgl/ops/tile.ts","webpack:///./lib/backends/webgl/ops/transpose.ts","webpack:///./lib/backends/webgl/ops/unary-op.ts","webpack:///./lib/backends/webgl/ops/unsqueeze.ts","webpack:///./lib/backends/webgl/program-manager.ts","webpack:///./lib/backends/webgl/glsl-preprocessor.ts","webpack:///./lib/backends/webgl/glsl-function-inliner.ts","webpack:///./lib/backends/webgl/glsl-registered-libs.ts","webpack:///./lib/backends/webgl/glsl-coordinate-lib.ts","webpack:///./lib/backends/webgl/glsl-encoding-lib..ts","webpack:///./lib/backends/webgl/glsl-fragcolor-lib.ts","webpack:///./lib/backends/webgl/glsl-shape-utils-lib.ts","webpack:///./lib/backends/webgl/glsl-vec-lib.ts","webpack:///./lib/backends/webgl/texture-helper.ts","webpack:///./lib/backends/webgl/texture-layout-strategy.ts","webpack:///./lib/backends/webgl/webgl-context-factory.ts","webpack:///./lib/backends/webgl/webgl-experimental-context.ts","webpack:///./lib/backends/webgl/webgl1-context.ts","webpack:///./lib/backends/webgl/webgl2-context.ts","webpack:///./lib/api/env-impl.ts","webpack:///./lib/env.ts","webpack:///./lib/api/tensor.ts","webpack:///./lib/api/inference-session.ts","webpack:///./lib/api/inference-session-impl.ts","webpack:///./lib/session.ts","webpack:///./node_modules/util/util.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./lib/backend.ts","webpack:///./lib/execution-plan.ts","webpack:///./lib/model.ts","webpack:///./lib/graph.ts","webpack:///./lib/attribute.ts","webpack:///./lib/graph-utils.ts","webpack:///./lib/backends/webnn/nnSubgraph.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","long_1","__importDefault","ndarray_1","ndarray_ops_1","onnx_proto_1","tensor_1","checkInputsShape","inputs","expectedDimensions","_i","arguments","length","dims","MatMulUtil","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","outputShape","aRank","bRank","splice","pop","calcMatMulShape","b","undefined","BroadcastUtil","calcShape","adims","bdims","isMatMul","arank","brank","crank","Math","max","cdims","Array","cShapeMatMul","_a","__read","aLen","bLen","index","broadcastedIndices","originalShape","originalIndices","fillIndex","dimOffset","calc","op","shape","size","ShapeUtil","default","data","constructor","set","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","j","floor","apply","__spread","isValidBroadcast","finalShape","inputRank","finalRank","arrayCopyHelper","target","source","targetIndex","sourceIndex","blockSize","Error","offset","GemmUtil","getShapeOfGemmResult","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","NdarrayUtil","ctor","x","copy","stride","deepCopy","buf","y","assign","protoType","ProtoUtil","tensorDataTypeFromProto","typeProto","onnx","TensorProto","DataType","INT8","UINT8","BOOL","INT16","UINT16","INT32","UINT32","FLOAT","DOUBLE","STRING","INT64","UINT64","tensorDimsFromProto","map","isLong","toNumber","tensorValueTypeFromProto","valueType","tensorType","elemType","dim","dimValue","LongUtil","longToNumber","getSizeFromDimensionRange","sizeFromDimension","axis","sizeToDimension","start","end","computeStrides","rank","strides","transpose","slice","reverse","indicesToOffset","indices","offsetToIndices","parseAxis","tensorRank","incrementIndex","axisToIncrementOn","k","calculateReshapedDims","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","sortBasedOnPerm","perm","v","padShape","pad","areEqual","shape1","shape2","every","validateDimsAndCalcSize","TypeError","dims_1","__values","dims_1_1","next","done","Number","isInteger","flattenShape","total","reduce","right","squeezeShape","axes","outputDims","some","inSqueezeList","indexOf","push","unsqueezeShape","fill","inputDimsIterator","MathUtil","sqr","pow","axpy","alpha","powx","mul","SplitUtil","splitShape","split","numOutputs","determineSplit","shapes","offsets","numElementsAlongAxis","ReduceUtil","calcReduce","keepdims","op1","op2","forEach","ind","calcReduceShape","ndY","inputStrides","indicesY","calcReduceByAxis","numberData","Tensor","fromNdarray","type","res","input","curAxisInd","pos","step","keepDims","filter","PoolConvUtil","adjustPoolAttributes","isGlobalOperator","inputDims","kernelShape","pads","adjustPadsBasedOnAutoPad","autoPad","adjustPadAndReturnShape","computePoolOutputShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","kernel","padHeadIndex","padTailIndex","padNeeded1","padNeeded","util_1","dataProvider","asyncDataProvider","cache","dataId","format","nhwcCache","this","from","empty","RangeError","isArray","dataviewConstructor","createBuffer","getData","dataBuffer","ArrayBuffer","sizeof","toNHWC","pseudo","C","H","W","nchwData","nhwcData","h","w","toNCHW","fromProto","tensorProto","dataType","stringData","str","Buffer","buffer","byteOffset","byteLength","toString","rawData","dataDest","dataSource","DataView","elementSize","sizeofProto","length_1","readProto","array","floatData","int32Data","int64Data","doubleData","uint64Data","element","arr","tensor","fromData","Uint8Array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","greaterThanOrEqual","lessThan","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","utils_1","WebGLOperatorHelper","run","inferenceHandler","artifact","programManager","getArtifact","programInfo","createProgramInfo","build","setArtifact","runData","createRunData","getTensor","outputTextureData","getFinalLayout","positionalSubFunctions","channels","prefs","createBasicTextureLayout","getPackedShape","getPositionalFunctions","subOperators","result_1","sub","getPositionalFunction","NoOpLoggerProvider","log","severity","content","category","ConsoleLoggerProvider","console","color","SEVERITY_VALUE","verbose","info","warning","error","LOGGER_PROVIDER_MAP","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","_b","arg0","arg1","arg2","arg3","logInternal","stack","config","Date","toISOString","reset","previousConfig","Logger","Event","startTime","endCallback","EventRecord","endTime","Profiler","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","nodeTimings","event_1","elapsedTime","unshift","time","setInputTime","computeTime","reducedNodeTimings","mapping","Map","nodeTiming","has","count","parseInt","sum","sumSetInputTime","sumComputeTime","sumOverheadTime","reducedNodeTimings_1","reducedNodeTimings_1_1","node","overheadTime","padNum","repeat","toFixed","event","func","begin","isPromise","res_1","then","Promise","resolve","reject","reason","_this","flush","e","logOneEvent","currentTime","previousPointer","performance","workers","WORKER_NUMBER","completeCallbacks","instrument_1","bindingCore","__importStar","initialized","initializing","init","numWorkers","waitForBindingInitTimeoutId","clearWaitForBindingInit","clearTimeout","onFulfilled","bindingInitTask","rejectAfterTimeOutPromise","setTimeout","Worker","workerInitTasks","workerId","workerInitTask","resolveWorkerInit","rejectWorkerInit","worker","onerror","onmessage","perfData","shift","race","all","err","WasmBinding","_super","__extends","getInstance","instance","ccallRemote","functionName","params","calculateOffsets","ccallSerialize","postMessage","perf","startTimeWorker","endTimeWorker","ccallDeserialize","FunctionType","GlslContext","glContext","attribInfo","uniformInfo","GlslLib","context","GlslLibRoutine","routineBody","dependencies","GlslLibRoutineNode","addDependency","TopologicalSortGlslRoutines","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","result","createOrderedNodes","graphNodes","dfsTraverse","add","delete","global","util","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","captureStackTrace","asPromise","base64","EventEmitter","float","inquire","utf8","pool","LongBits","self","emptyArray","freeze","emptyObject","isNode","Boolean","process","versions","isFinite","isString","String","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Long","dcodeIO","key2Re","key32Re","key64Re","longToHash","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","lo","hi","lcFirst","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","iota","isBuffer","hasTypedArrays","compare1st","order","terms","abs","sort","compileConstructor","dtype","dimension","className","join","useGetters","code","Function","procedure","CACHED_CONSTRUCTORS","args","index_str","shapeArg","strideArg","a_vars","c_vars","tShape","tStride","idx","float32","float64","int8","int16","int32","uint8","uint16","uint32","uint8_clamped","generic","sz","arrayDType","ctor_list","NUMBER_TYPES","INT_TYPES","FLOAT_TYPES","g","valuesById","values","$protobuf","$Reader","Reader","$Writer","Writer","$util","$root","roots","Version","AttributeProto","floats","ints","strings","tensors","graphs","refAttrName","docString","f","encode","writer","string","int64","fork","ldelim","GraphProto","encodeDelimited","decode","reader","len","tag","end2","skipType","decodeDelimited","verify","low","high","fromObject","fromValue","toObject","options","arrays","defaults","long","AttributeType","toJSON","ValueInfoProto","TypeProto","NodeProto","output","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","initializer","valueInfo","segment","Segment","double","uint64","TensorShapeProto","Dimension","$oneOfFields","dimParam","denotation","oneofs","DenotationConstProto","DATA_BATCH","DATA_CHANNEL","DATA_TIME","DATA_FEATURE","FILTER_IN_CHANNEL","FILTER_OUT_CHANNEL","FILTER_SPATIAL","version","reshape_1","WebGLReshape","integerData","reshape","Reshape","inputTD","getOrCreate","isInitializer","session","packedShape","newTD","texture","height","width","unpackedShape","newTensor","id","readTexture","setTextureData","matchSelector","selector","endsWith","rangeStart","isNaN","pair","rangeEnd","resolveOperator","opsets","rules","rules_1","rules_1_1","rule","versionSelector","opConstructor","opsets_1","opsets_1_1","opset","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","that","__proto__","arg","encodingOrOffset","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","checked","val","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","compare","concat","list","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","wasm","WebAssembly","Instance","Module","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","other","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","gte","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","BatchNormalization","initialize","attributes","epsilon","getFloat","momentum","spatial","getInt","checkInputs","checkInputTypes","X","scale","B","mean","var_","BinaryOp","typeConstraint","resultType","Conv","getString","dilations","getInts","group","spatialRank","Gemm","transA","transB","beta","MatMul","PoolBase","AveragePool","countIncludePad","ceilMode","GlobalAveragePool","MaxPool","storageOrder","GlobalMaxPool","Softmax","Sum","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","using","resource","dispose","expandArray","newLength","newShape","texture_data_encoder_1","BaseWebGLContext","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","disposed","gl","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","geometry","bufferData","STATIC_DRAW","checkError","fb","allocateTexture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","encoder","getEncoder","texImage2D","internalFormat","channelType","updateTexture","texSubImage2D","attachFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","dataSize","allocate","readPixels","RGBA","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","setVertexAttributes","positionHandle","textureCoordHandle","vertexAttribPointer","enableVertexAttribArray","createProgram","vertexShader","fragShader","program","attachShader","linkProgram","compileShader","shaderSource","shaderType","shader","createShader","deleteShader","bindTextureToUniform","position","uniformHandle","activeTexture","uniform1i","draw","drawArrays","TRIANGLE_STRIP","deleteTexture","deleteProgram","RGBAFloat32DataEncoder","Uint8DataEncoder","clearActiveTextures","unit","maxTextureImageUnits","maxCombinedTextureImageUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","maxCubeMapTextureSize","MAX_CUBE_MAP_TEXTURE_SIZE","shadingLanguageVersion","SHADING_LANGUAGE_VERSION","webglVendor","VENDOR","webglVersion","VERSION","textureFloatExtension","getExtension","textureHalfFloatExtension","onnxImpl","operators_1","argMax_1","batch_normalization_1","binary_op_1","concat_1","conv_1","dropout_1","flatten_1","gather_1","gemm_1","image_scaler_1","instance_normalization_1","lrn_1","matmul_1","pool_1","cpuReduce","slice_1","softmax_1","squeeze_1","sum_1","tile_1","transpose_1","unaryOps","unsqueeze_1","CPU_OP_RESOLVE_RULES","CpuUnaryOp","acos","CpuBinaryOp","e1","e2","CpuArgMax","asin","atan","CpuAveragePool","CpuBatchNormalization","clip","CpuConcat","CpuConv","cos","CpuDropout","elu","exp","CpuFlatten","CpuGather","CpuGemm","CpuGlobalAveragePool","CpuGlobalMaxPool","CpuImageScaler","CpuInstanceNormalization","leakyRelu","CpuLrn","CpuMatMul","CpuMaxPool","CpuReduceLogSum","CpuReduceMax","CpuReduceMean","CpuReduceMin","CpuReduceProd","CpuReduceSum","CpuReduceSumSquare","relu","CpuReshape","sigmoid","sin","CpuSlice","CpuSoftmax","sqrt","CpuSqueeze","CpuSum","tan","tanh","CpuTile","CpuTranspose","CpuUnsqueeze","BufferWriter","Op","fn","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","sint32","sint64","zzEncode","bool","fixed32","sfixed32","fixed64","sfixed64","writeBytes","BufferWriter_","BufferReader","indexOutOfRange","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","_slice","skip","wireType","BufferReader_","zzDecode","compile","EmptyProc","body","thisVars","localVars","fixup","lvalue","rvalue","makeOp","user_args","funcName","wrapper","pre","post","proc","pcompile","assign_ops","band","bor","bxor","lshift","rshift","rrshift","unary_ops","bnot","recip","binary_ops","leq","geq","math_unary","math_comm","math_noncomm","any","prod","norm2squared","norm2","norminf","norm1","sup","inf","argmin","argmax","random","assigns","opLambda","binaryOp","Concat","inputType","inputDimensionality","inputs_1","inputs_1_1","useAlpha","useBeta","outType","classifyType","aType","bType","os","as","bs","checkShapes","typeSig","CACHE","generatePlan","Dropout","ratio","testMode","Flatten","Gather","Transpose","finalPerm","inpDim","numElementsInBlock","Y","numAxesInPrefix","suffixBlocksize","prefixBlocksize","isSuffix","inpAxis","numAxes","targetDims","numBlocks","startTargetIndex","sourceOffset","doTransposeEltWise","sizeOffset","doTranspose","ImageScaler","bias","getFloats","InstanceNormalization","ReduceBase","Slice","starts","ends","Squeeze","Tile","UnaryOp","Unsqueeze","Clip","__WEBPACK_AMD_DEFINE_RESULT__","objectTypes","function","freeExports","freeModule","nodeType","freeGlobal","maxSafeInteger","reOpera","objectProto","capitalize","toUpperCase","test","forOwn","callback","getClassOf","qualify","accumulator","each","platform","parse","ua","isCustomContext","nav","navigator","userAgent","isSpecialCasedOS","likeChrome","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","environment","doc","document","opera","operamini","operaClass","arch","description","prerelease","useFeatures","layout","label","pattern","guess","RegExp","exec","guesses","getName","product","getProduct","manufacturer","getManufacturer","Apple","iPad","iPhone","iPod","Archos","Amazon","Kindle","Kindle Fire","Asus","Transformer","Barnes & Noble","Nook","BlackBerry","PlayBook","Google","Google TV","Nexus","HP","TouchPad","HTC","LG","Microsoft","Xbox","Xbox One","Motorola","Xoom","Nintendo","Wii U","Wii","Nokia","Lumia","Samsung","Galaxy S","Galaxy S2","Galaxy S3","Galaxy S4","Sony","PlayStation","PlayStation Vita","10.0","6.4","6.3","6.2","6.1","6.0","5.2","5.1","5.01","5.0","4.0","4.90","cleanupOS","getOS","parseFloat","runtime","flash","system","Capabilities","phantom","major","minor","patch","documentMode","lang","System","getProperty","require","electron","nw","appMinorVersion","external","architecture","family","cpuClass","RedFloat32DataEncoder","WebGL2RenderingContext","R32F","RED","channelSize","RGBA32F","textureSize","WebGLRenderingContext","dest","Float16DataEncoder","HALF_FLOAT_OES","WebGl2Uint8DataEncoder","R8UI","RGBA_INTEGER","UNSIGNED_BYTE","RGBA8UI","ALPHA","Utils","inferredDims","internalTensor","flatIndices","indexArray","validateIndices","matchElementType","tensor_impl_1","fromInternalTensor","toInternalTensor","indices_1","indices_1_1","backend_cpu_1","backend_wasm_1","backend_webgl_1","env_impl_1","__export","backend","cpu","CpuBackend","WasmBackend","webgl","WebGLBackend","ENV","envImpl","session_handler_1","createSessionHandler","CpuSessionHandler","opset_1","inference_handler_1","op_resolve_rules_1","createInferenceHandler","CpuInferenceHandler","profiler","argMax","ArgMax","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","extraBytes","parts","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","protobuf","configure","rpc","ctx","pending","s64","chunk","_listeners","evt","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","sign","round","exponent","readFloat_ieee754","readUint","uint","mantissa","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","moduleName","eval","c1","c2","SIZE","MAX","slab","zero","toLong","mask","part0","part1","part2","writeBytesBuffer","writeStringBuffer","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","response","endedByRPC","isSlowBuffer","createThunk","Procedure","argTypes","shimArgs","arrayArgs","arrayBlockIndices","scalarArgs","offsetArgs","offsetArgIndex","indexArgs","shapeArgs","debug","proc_args","arg_type","blockIndices","printCode","vars","thunkName","typesig","string_typesig","shapeLengthConditions","shapeConditions","thunk","uniq","innerFill","nargs","has_index","pidx","processBlock","block","dtypes","carg","re","ptrStr","arrNum","offArgIndex","localStr","arrStr","reStrArr","ptrStrArr","typeSummary","summary","allEqual","orders","blockBegin","blockEnd","loopBegin","loopEnd","loopOrders","newOrder","arglist","zeros","off_arg","init_string","matched","countMatches","indexStr","outerFill","loopName","sorted","ptr","unique_pred","unique_eq","batchNormalization","variance","inputDimensions","scaleData","bData","meanData","varianceData","nc","Util","input0","inputShape","concatAxisSize","dataNShape","dataN","axisIndex","axisPitch","outputBase","inputIndex","inputAxisPitch","inputData","inputSize","outputOffset","ndarray_gemm_1","wDims","conv","ndx","ndk","localPads","newShape_1","newSize","ndp","hiPoint","loPoint","originalSlice","batchSize","xRows","xCols","xChannels","_c","wRows","wCols","yChannels","pvRows","pvCols","yRows","yCols","ySize","patchSize","ndf","yChannel","pick","reshapedPatch","yArray","pixelVec","b_1","image","yRow","xRowStart","yCol","xColStart","patchView","pvVec","ndy","ndyTransed","biasData","outputData","batchSize_1","outputChannels","batch","channel","offset_1","unpackShape","oType","oOrd","aOrd","bOrd","symbols","walk","generateRowColumnLoop","generateBetaPass","BLOCK_SIZE","sym","generateBlockLoop","dropout","isTestMode","flatten","gather","newDims","indicesData","dimsStrides","newDimsStrides","newLogicalIndex","oldLogicalIndex","oldOffset","gemm","finalA","finalB","finalNdA","finalNdB","finalNdC","imageScaler","hw","instanceNormalization","temp","physicalOffset","iterEnd","currentChannel","lrn","Lrn","tensorDataSize","paddedSquareData","alphaOverSize","prePad","scaleSliceStart","matMul","mat2dShape","ndA","ndB","num2dMatrices","isFloat64","curPos","indicesA","indicesB","MatMul2d","tensorY","A","startPos","averagePool","globalAveragePool","maxPool","globalMaxPool","MIN_SAFE_INTEGER","startVal","processOp","finalOp","kernelSize","kernelStrides","stridesRank","ndX","outputSize","outputStride","curInd","startInd","isPad","reduce_op_1","reduceSum","reduceSumSquare","reduceLogSum","reduceMax","reduceMin","reduceMean","reduceProd","numItems","adjustedStarts","newDimsStride","oldDimsStride","softmax","axisCorrected","D","squeeze","tile","repeats","unary_op_1","unaryOp","unsqueeze","wasmBinding","cpuFallback","checkIfNumWorkersIsValid","isWasmSupported","sent","WasmSessionHandler","e_1","ptr8","numBytesAllocated","ccall","expandMemory","HEAPU8","startTimeFunc","endTimeFunc","ccallRaw","param","paramData","paramType","paramPass","heapU8","heap32","heapU32","heapF32","offset8","offset32","boolArray","int32Array","float32Array","minBytesRequired","_free","_malloc","_scriptDir","currentScript","moduleOverrides","status","toThrow","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","importScripts","nodeFS","nodePath","scriptDirectory","locateFile","path","__dirname","filename","binary","assert","ex","ExitStatus","abort","readbuffer","scriptArgs","quit","location","href","url","xhr","XMLHttpRequest","open","send","responseText","responseType","onload","print","printErr","warn","STACK_ALIGN","alignMemory","factor","asm2wasmImports","f64-rem","debugger","tempRet0","setTempRet0","ABORT","condition","text","Pointer_stringify","hasUtf","curr","UTF8ArrayToString","UTF8ToString","UTF8Decoder","TextDecoder","u8Array","endPtr","u0","u1","u2","u3","u4","ch","HEAP8","HEAP32","STATICTOP","STACK_BASE","STACKTOP","STACK_MAX","DYNAMIC_BASE","DYNAMICTOP_PTR","WASM_PAGE_SIZE","ASMJS_PAGE_SIZE","MIN_TOTAL_MEMORY","alignUp","multiple","updateGlobalBuffer","updateGlobalBufferViews","enlargeMemory","PAGE_MULTIPLE","LIMIT","OLD_TOTAL_MEMORY","TOTAL_MEMORY","replacement","oldHEAP8","_emscripten_replace_memory","getOwnPropertyDescriptor","TOTAL_STACK","callRuntimeCallbacks","callbacks","Memory","initial","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","runtimeInitialized","runDependencies","runDependencyWatcher","dependenciesFulfilled","dataURIPrefix","isDataURI","startsWith","wasmTextFile","wasmBinaryFile","asmjsCodeFile","asm2wasm","parent","getBinary","doNativeWasm","providedBuffer","receiveInstance","memory","oldBuffer","oldView","mergeMemory","clearInterval","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","receiver","fetch","credentials","catch","instantiate","instantiateStreaming","asmjsReallocBuffer","finalMethod","oldSize","grow","wasmReallocBuffer","TABLE_SIZE","MAX_TABLE_SIZE","Table","maximum","integrateWasmJS","STATIC_BASE","tempDoublePtr","__ZSt18uncaught_exceptionv","uncaught_exception","EXCEPTIONS","last","caught","infos","deAdjust","adjusted","adj","addRef","refcount","decRef","rethrown","destructor","___cxa_free_exception","clearRef","SYSCALLS","buffers","printChar","stream","varargs","getStr","get64","getZero","flush_NO_FILESYSTEM","fflush","asmGlobalArg","asmLibraryArg","getTotalMemory","getTempRet0","abortOnCannotGrowMemory","___assert_fail","line","___cxa_allocate_exception","___cxa_find_matching_catch","thrown","throwntype","typeArray","___cxa_throw","___gxx_personality_v0","___lock","___resumeException","___setErrNo","___syscall140","which","getStreamFromFD","offset_low","whence","FS","llseek","getdents","ErrnoError","errno","___syscall146","iov","iovcnt","___syscall54","___syscall6","close","___unlock","_abort","_emscripten_memcpy_big","_llvm_trap","asm","doRun","cb","postRun","preRun","what","JSON","stringify","old","runCaller","normalizeArray","allowAboveRoot","up","splitPathRe","splitPath","xs","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSlash","paths","relative","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","basename","extname","op_resolve_rules_2","fallbackToCpuOps","opResolveRules","WASM_OP_RESOLVE_RULES","WasmInferenceHandler","clip_1","WasmBinaryOp","WasmAveragePool","WasmBatchNormalization","WasmClip","WasmConv","WasmGemm","WasmGlobalAveragePool","WasmGlobalMaxPool","WasmInstanceNormalization","WasmMatMul","WasmMaxPool","WasmSoftmax","WasmSum","wasm_binding_1","binaryOpType","numThreads","numFilterMaps","numWebWorkers","determineNumThreads","workerNumber","wDimsSp","wSizeSp","wDimsFinal","yDimsSp","ySizeSp","yDimsFinal","wArray","bArray","workerTasks","intermediate","resultData","poolType","poolFunc","numChannels","xDimsSp","xSizeSp","xDimsFinal","webgl_context_factory_1","forceUint8Reads","WebGLContextFactory","contextId","WebGLSessionHandler","webpackPolyfill","deprecate","children","program_manager_1","texture_helper_1","texture_layout_strategy_1","ProgramManager","layoutStrategy","AlwaysKeepOriginalSizeStrategy","textureHelper","TextureHelper","textureDataCache","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","getTextureData","textureData","td","releaseTexture","WEBGL_OP_RESOLVE_RULES","uint8_encode_1","tensorToTexture","textureToTensor","lookupTextureData","createTextureDataFromLayout","getOrCreateTextureLayout","createTextureData","createTextureFromLayout","computeTextureWH","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","outputLayout","hasMain","inputLayouts","inputTextureDatas","__assign","uniformData","binaryOps","elu_1","leaky_relu_1","pad_1","reduceOps","split_1","WebGLUnaryOp","glslAbs","glslAcos","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","glslSigmoid","glslSin","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUnsqueeze","glslXor","webgl_operator_utils_1","handler","inputTDs","outputTD","glsl_definitions_1","glslFunc","outputRank","aBcast","bBcast","shaderSource_1","ValueBased","fname","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","sizeInConcatAxis","previousSum","numberOfTensors","codeLines","arrayRank","readSize","artifacts","programInfos","createProgramInfos","runDatas","createRunDatas","xshape","kshape","calcOutputShape","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","enable","BLEND","blendEquation","FUNC_ADD","blendFunc","disable","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","sharedDimOffset","k_1","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","calcSharedDimReadSize","createDotProdRunData","oldRowSize","newRowSize","rowbuf","newOffset","adjustPads","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","calcBlockSize","toExponential","Elu","indexDataShape","indexCopyOps","aShape","bShape","cShape","oShape","getBiasMethod","createGetBiasMethod","LeakyRelu","alayout","getPadFunction","Pad","inputLayout","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","GeneratePoolingCode","createMaxPoolProgramInfo","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","cur","arrayName","WebGLGenericReduce","iRank","idxCopy","ops","getOps","idxZero","sliceOps","pi","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","computeMaxProgramInfo","computeScaleProgramInfo","getProgramCount","results","rundata","Split","sumLine","tileOps","positionalSubs","getOutputShape","inputShapes","getAdjustedPerm","unpackedOutputShape","getPermFunctionBody","Positional","addPositionalSub","positionalSubOperator","reverseFunc","glslBuiltinUnary","glsl_preprocessor_1","VariableInfo","LocationInfo","RunData","repo","attributesBound","buildArtifact","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","bindTextures","doBlockDraw","doDraw","preprocessor","GlslPreprocessor","extractAttribInfo","getDefaultVertexShaderSource","fragScript","preprocess","attribInfos","uniformInfos","getUniformLocations","getAttribLocations","blockWidth","blockHeight","widthLocation","heightLocation","yOffsetLocation","blockYOffset","xOffsetLocation","blockXOffset","col","colCount","row","rowCount","fragShaderScript","VERTEX_SHADER","FRAGMENT_SHADER","textureCoord","bindUniformArray","uniform1fv","uniform1iv","bindUniform","uniform1f","inputScalars","li","variable","isVec","textures","tex","variableInfos","locationInfos","vi","getAttribLocation","getUniformLocation","reference","attributeLocation","glsl_function_inliner_1","glsl_registered_libs_1","glslLibRoutineDependencyGraph","inliner","GlslFunctionInliner","libs","glslRegistry","lib","extractUniformInfo","constructGlslRoutineDependencyGraph","addClosing","processImports","processMacros","processInlines","addUniforms","addPreamble","getVariableMatches","matches","uniformRegex","arraySuffix","script","currentIndexVar","positionalBodies","callLines","lastIndexVar_1","counter_1","valueSubs","valueSubFunctions","valueBodies","valueCallLines","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","uniforms","uniformLines","classAndRoutine","routine","libName","routinesInLib","getFunctions","currentNode","inline","regex","inlineDefs","InlineFuncDefRegex","tokens","name_1","regexString","FuncCallRegex","declLine","newBody","paramRedecLine","glsl_coordinate_lib_1","glsl_encoding_lib_1","glsl_fragcolor_lib_1","glsl_shape_utils_lib_1","glsl_vec_lib_1","EncodingGlslLib","fragcolor","FragColorGlslLib","vec","VecGlslLib","shapeUtils","ShapeUtilsGlslLib","coordinates","CoordsGlslLib","offsetToCoords","coordsToOffset","toVec","valueFrom","getCustomTypes","xScale","yScale","offsetFromBlocks","stridesBlock","ui","getValueFromSingle","varName","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","setFragColor","getColorAsFloat","bcastIndex","bcastMatmulIndex","incrementIndices","i_1","i_2","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","i_3","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","assignmentBlock","textureDataType","toEncoderType","toTextureData","toTensorData","createPaddedTexture","inputTextureData","inputTexture","inputWidth","inputHeight","copyTexSubImage2D","wsize","hsize","totalSize","webgl_experimental_context_1","webgl1_context_1","webgl2_context_1","contextAttributes","canvas","createCanvas","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","ca","getContext","WebGL2Context","WebGL1Context","WebGLExperimentalContext","createElement","base_webgl_context_1","max3DTextureSize","MAX_3D_TEXTURE_SIZE","maxArrayTextureLayers","MAX_ARRAY_TEXTURE_LAYERS","maxColorAttachments","MAX_COLOR_ATTACHMENTS","maxDrawBuffers","MAX_DRAW_BUFFERS","colorBufferFloatExtension","env_1","EnvironmentImpl","TensorImpl","InferenceSessionImpl","InferenceSession","session_1","tensorUtils","Session","loadModel","Blob","URL","createObjectURL","inputFeed","modelInputFeed_1","modelInputFeed_2","modelInputFeed","convertedOutput","startProfiling","endProfiling","fs_1","backend_1","execution_plan_1","model_1","nnSubgraph_1","_initialized","backendHint","graphInputTypes","graphInputDims","supportedOps","enablePseudoReorder","__awaiter","Backend","sessionHandler","_model","Model","promisify","readFile","arrayBuffer","modelProtoBlob","graphInitializer","transformGraph","load","initializeOps","_executionPlan","ExecutionPlan","_ops","inputTensors","normalizeAndValidateInputs","execute","outputTensors","createOutput","modelInputNames","getInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","getInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","noneDimSeen","modelOutputNames","getOutputNames","partitionBy","getNodes","subgraph","_d","subgraphNode","_e","_f","NNSubgraph","formatRegExp","objects","_","isNull","msg","isUndefined","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","primitive","simple","isNumber","formatPrimitive","visibleKeys","arrayToHash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","base","braces","toUTCString","formatProperty","formatArray","prev","numLinesEst","reduceToSingleString","desc","ar","objectToString","debuglog","NODE_DEBUG","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","months","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","superCtor","super_","writable","TempCtor","backendsCache","tryLoadBackend","backendObj","isBackend","disabled","hint","hints","hints_1","hints_1_1","KernelOp","_values","modelInputs","graphInputs","thisOp","inputList","this_1","outputList","getOutputIndices","outputIndex","thisValue","graph_1","modelProto","_opsets","_graph","Graph","attribute_1","graph_utils_1","graphProto","GraphImpl","Value","_from","_to","Node","_nodeProto","Attribute","executeNode","NNSubgraphNode","entries","cnt","buildGraph","checkIsAcyclic","_allInputIndices","_allInputNames","_allOutputIndices","_allOutputNames","_allData","_partitions","_nodes","GraphUtil","addNode","setBlack","identifyInputOutputTensors","partition","nodeIds","inputIds","outputIds","nodeIds_1","nodeIds_1_1","nodeId","dataIndices","nodesIndices","inputValueNames","_g","_h","currentIndex","_j","_k","_l","_m","_o","_p","nodeProto","_q","_r","dataIndex","_s","_t","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","this_2","out_i_1","this_3","ind_1","out_i_2","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","nodesConsumingOutput_1","nodesConsumingOutput_1_1","nodeIndex_1","replaceIndex","_attributes","attributes_1","attributes_1_1","attr","getValue","getType","defaultValue","getStrings","getTensors","valueAndType","INT","TENSOR","FLOATS","INTS","STRINGS","TENSORS","GRAPH","GRAPHS","getValueNoCheck","numberValue","maybeLong","utf8String","vertices","tensorMapping","inTensorsOfInputNode","outTensorsOfOutputNode","addEdge","inTensors","outTensors","inTensors_1","inTensors_1_1","inNodeId","outTensors_1","outTensors_1_1","outNodeId","inTensors_2","inTensors_2_1","outTensors_2","outTensors_2_1","topologicalSort","indegree","q","u","biTopologicalSort","ord","eager","union","sortSet","crossTensorsTo","partitions","partitions_1","partitions_1_1","partition_1","partition_1_1","tensorUV","partition_2","partition_2_1","_operandIndex","_nnOperands","_operations","_tensorTypes","_tensorData","_execution","createCompiledModel","setInput","tensorId","_getTensorByOnnxId","startCompute","graphInputTensors","_nn","ml","getNeuralNetworkContext","createModel","_addTensorFloat32","nnTensorId","_addOpsAndParams","_addInputsOutputs","createCompilation","_compilation","setPreference","PREFER_FAST_SINGLE_ANSWER","createExecution","setOutput","onnxTensorId","modelOutputs","identifyInputsAndOutputs","convFilter","convBias","nGroups","nChannels","convFilterId","convBiasId","kernelHeight","kernelWidth","paddingHeightBegin","paddingWidthBegin","paddingHeightEnd","paddingWidthEnd","_addScalarInt32","strideY","strideX","nextNode","bnNode","bnBias","scaleTensor","meanTensor","varTensor","bnBiasTensor","convFilterTensor","convBiasTensor","nPixels","FUSED_RELU","FUSED_NONE","inputChannels","isDepthWiseConv","nhwc","chwnData","_setOperandValue","convFilterType","_getTensorTypeById","dimensions","outputId","outputTensor","DEPTHWISE_CONV_2D","CONV_2D","convFilterDims","convBiasDims","in1","in2","in1Dims","in2Dims","dim1","dim2","ADD","MUL","weights","weightsId","biasId","nUnits","FULLY_CONNECTED","MAX_POOL_2D","AVERAGE_POOL_2D","shapeId","_addTensorInt32","inputDims_1","minusOneCnt","nonAdaptDim","adaptDimIdx","RESHAPE","CONCATENATION","_addScalarFloat32","SOFTMAX","_addOperation","addOperand","setOperandValue","opCode","addOperation","_addOperand","FLOAT32","TENSOR_FLOAT32","TENSOR_INT32"],"mappings":"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","file":"onnx.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport Long from 'long';\nimport ndarray from 'ndarray';\nimport {assign} from 'ndarray-ops';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: number[], dimsB: number[]): [number[], number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    if (dimsA.length === 1) {\n      dimsA = [1, dimsA[0]];\n    }\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    if (dimsB.length === 1) {\n      dimsB = [dimsB[0], 1];\n    }\n\n    return [dimsA, dimsB];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: ReadonlyArray<number>, bdims: ReadonlyArray<number>, isMatMul = false):\n      ReadonlyArray<number>|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(\n      broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>, originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(a: ndarray, b: ndarray, op: (a: number, b: number) => number): ndarray|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.shape, b.shape);\n\n    if (outputShape) {\n      const size = ShapeUtil.size(outputShape);\n      const c = ndarray(\n          new (\n              a.data.constructor as Int8ArrayConstructor | Int16ArrayConstructor | Int32ArrayConstructor |\n              Uint8ArrayConstructor | Uint16ArrayConstructor | Uint32ArrayConstructor | Float32ArrayConstructor |\n              Float64ArrayConstructor | Uint8ClampedArrayConstructor)(size),\n          outputShape as number[]);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set(op(a.get(), b.get()));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.shape.length);\n        const originalIndicesB = new Array(b.shape.length);\n        let valA = 0;\n        let valB = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.shape.length === 0) {\n          valA = a.get();\n          isAScalar = true;\n        }\n        if (b.shape.length === 0) {\n          valB = b.get();\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.shape, originalIndicesA);\n            valA = a.get(...originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.shape, originalIndicesB);\n            valB = b.get(...originalIndicesB);\n          }\n\n          // assign value to output ndarray\n          c.set(...outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: ReadonlyArray<number>, finalShape: ReadonlyArray<number>): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error(`sourceIndex out of bounds`);\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error(`targetIndex out of bounds`);\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error(`source indices to be copied are outside bounds`);\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error(`target array is too small to hold result`);\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: ReadonlyArray<number>, transLeft: boolean, rightShape: ReadonlyArray<number>, transRight: boolean,\n      biasShape: ReadonlyArray<number>): ReadonlyArray<number> {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error(`shape need to be of size 2`);\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error(`dimension mismatch`);\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error(`invalid shape specified`);\n    }\n\n    if (!BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error(`gemm: invalid bias shape for broadcast`);\n    }\n\n    return [M, N];\n  }\n}\n\nexport class NdarrayUtil {\n  /**\n   * Get the constructor of the data type in the given ndarray\n   */\n  static ctor<T>(x: ndarray<T>) {\n    return x.data.constructor as /* ArrayConstructor | Int8ArrayConstructor\n        | Int16ArrayConstructor | Int32ArrayConstructor | Uint8ArrayConstructor\n        | Uint16ArrayConstructor | Uint32ArrayConstructor |\n        Float32ArrayConstructor | Float64ArrayConstructor |\n        Uint8ClampedArrayConstructor*/\n    {\n      new (arrayLength: number): ndarray.Data<T>;\n    };\n  }\n\n  /**\n   * Create a shallow copy of the given ndarray\n   */\n  static copy<T extends ndarray<U>, U>(x: T): T {\n    return ndarray(x.data, x.shape, x.stride, x.offset) as T;\n  }\n\n  /**\n   * Create a deep copy of the given ndarray\n   */\n  static deepCopy<T extends ndarray<U>, U>(x: T): T {\n    const buf = new (NdarrayUtil.ctor(x))(x.size);\n    const y = ndarray(buf, x.shape);\n    assign(y, x);\n    return y as T;\n  }\n\n  /**\n   * Create a new ndarray, using the same underlying data type as the given\n   * ndarray\n   * @param protoType the ndarray to take as a prototype for data type\n   * @param dims the dimensions of the new ndarray\n   */\n  static create<T extends ndarray<U>, U>(protoType: T, dims: number[]): T {\n    const buf = new (NdarrayUtil.ctor(protoType))(ShapeUtil.size(dims));\n    return ndarray(buf, dims) as T;\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? (d as Long).toNumber() : d as number);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n}\n\nexport class LongUtil {\n  static longToNumber(n: Long|number) {\n    if (Long.isLong(n)) {\n      return (n as Long).toNumber();\n    }\n    return n as number;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: ReadonlyArray<number>): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: ReadonlyArray<number>, axis: number): number {\n    if (axis < 0 || axis >= dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: ReadonlyArray<number>, axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: ReadonlyArray<number>, start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // tslint:disable-next-line:max-line-length\n            `cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.`);\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: ReadonlyArray<number>): ReadonlyArray<number> {\n    const rank = dims.length;\n    if (rank < 2) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: ReadonlyArray<number>): ReadonlyArray<number> {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: ReadonlyArray<number>, strides: ReadonlyArray<number>, axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: ReadonlyArray<number>): ReadonlyArray<number> {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  static parseAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: ReadonlyArray<number>, axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error(`Index incrementing unsupported for scalar Tensor`);\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error(`Incorrect axis to increment on`);\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(\n      originalDims: ReadonlyArray<number>,\n      shapeHints: number[]|ReadonlyArray<number>|Tensor.IntegerType): ReadonlyArray<number> {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error(`cannot reshape to a scalar Tensor`);\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error(`reshapedDims and originalDims don't have matching sizes`);\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: ReadonlyArray<number>, perm?: ReadonlyArray<number>): ReadonlyArray<number> {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: ReadonlyArray<number>, pad: ReadonlyArray<number>): ReadonlyArray<number> {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: ReadonlyArray<number>, shape2: ReadonlyArray<number>): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: ReadonlyArray<number>): number {\n    if (dims.length > 6) {\n      throw new TypeError(`Only rank 0 to 6 is supported for tensor shape.`);\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n <= 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis\n   */\n  static flattenShape(dims: ReadonlyArray<number>, axis: number): ReadonlyArray<number> {\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    if (axes.some(axis => axis >= dims.length || axis < 0)) {\n      throw new Error(`'axes' has an out of range axis`);\n    }\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error(`squeeze an axis of size different than 1`);\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = axes[i];\n      if (axis >= outputDims.length) {\n        throw new Error(`'axes' has an out of range axis`);\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error(`'axes' has a duplicate axis`);\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: ReadonlyArray<number>, axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error(`need to know number of outputs when the 'split' attribute is not specified`);\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error(`cannot split tensor to equal sized parts`);\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to 1, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: number, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, 1);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const ndY = ndarray(new Array<number>(size), outputDims);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      ndY.set(\n          ...indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims === 1) {\n      return Tensor.fromNdarray(ndY, a.type);\n    } else {\n      // keepdims == 0, calculate the expected shape\n      const res = new Tensor(ReduceUtil.calcReduceShape(dims, axes, keepdims), a.type);\n      res.numberData.set(ndY.data);\n      return res;\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to 1, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: number[], axes: number[], keepDims: number): number[] {\n    let outputDims = dims.slice(0);\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims === 1) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    outputDims = outputDims.filter(dim => dim !== 0);\n    return outputDims;\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, kernelShape: number[], strides: number[],\n      pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error(`length of specified kernel shapes should be 2 less than length of input dimensions`);\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error(`strides should be greater than or equal to 1`);\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error(`pad should be greater than or equal to 1`);\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error(`kernel shapes need to be greater than 0`);\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error(`pads should be smaller than kernel`);\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: ReadonlyArray<number>, strides: number[], kernelShape: number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, strides: number[], kernelShape: number[],\n      pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error(`input shape must be of size greater than 0`);\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(isGlobalOperator, inputDims, outputDims, strides, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: ReadonlyArray<number>, filterDims: ReadonlyArray<number>, strides: number[], kernelShape: number[],\n      pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error(`invalid input tensor dims or invalid filter tensor dims`);\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, outputDims: number[], strides: number[],\n      kernelShape: number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2, autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, kernel: number, pads: number[], padHeadIndex: number, padTailIndex: number,\n      autoPad?: string): number {\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - kernel) / stride) + 1);\n        case 'SAME_LOWER':\n          const legacyTargetSize1 = (inSize + stride - 1) / stride;\n          const padNeeded1 = (legacyTargetSize1 - 1) * stride + kernel - inSize;\n          pads[padHeadIndex] = Math.floor((padNeeded1 + 1) / 2);\n          pads[padTailIndex] = padNeeded1 - pads[padHeadIndex];\n          return Math.floor(((inSize + padNeeded1 - kernel) / stride) + 1);\n        case 'SAME_UPPER':\n          const legacyTargetSize = (inSize + stride - 1) / stride;\n          const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n          pads[padHeadIndex] = Math.floor(padNeeded / 2);\n          pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n          return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n        default:\n          throw new Error(`Unsupported AutoPad type`);\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - kernel) / stride) + 1);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport Long from 'long';\nimport ndarray from 'ndarray';\nimport {onnx} from 'onnx-proto';\n\nimport {ProtoUtil, ShapeUtil} from './util';\n\ntype NdArray = ndarray<number>|ndarray<string>;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = object;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.format === 'NHWC') {\n      if (this.nhwcCache === undefined) {\n        this.nhwcCache = this.createBuffer();\n      }\n      return this.nhwcCache;\n    } else {\n      if (this.cache === undefined) {\n        const data = this.dataProvider!(this.dataId);\n        if (data.length !== this.size) {\n          throw new Error(`Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.`);\n        }\n        this.cache = data;\n      }\n      return this.cache;\n    }\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError(`data type is not string`);\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError(`data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)`);\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError(`data type is not float (float32, float64)`);\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError(`type cannot be non-number (string)`);\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    throw new Error('not implemented');\n\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\n    //      asynchronous way. should implement this function when enabling webgl async read data.\n\n    // if (this.cache === undefined) {\n    //   this.cache = await this.asyncDataProvider!(this.dataId);\n    // }\n    // return this.cache!;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n  public dims: number[];\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      dims: ReadonlyArray<number>,\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      /* private */ asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Tensor.Id = {},\n      public format: string = 'NCHW',\n      private nhwcCache?: TensorData) {\n\n    this.dims = Array.from(dims);\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError(`Input dims doesn't match data length.`);\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError(`cache should be a string array`);\n      }\n\n      if (empty) {\n        cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        this.cache = this.createBuffer();\n        // lazily create 4-d NHWC cache\n        if (this.dims.length !== 4) {\n          if (nhwcCache === undefined /* && format === 'NHWC' */) {\n            this.nhwcCache = this.cache;\n          } else {\n            this.cache = this.nhwcCache;\n          }\n        }\n      }\n    }\n  }\n\n  createBuffer(): TensorData {\n    const buf = new ArrayBuffer(this.size * sizeof(this.type));\n    return createView(buf, this.type);\n  }\n\n  toNHWC(pseudo = false) {  // NCHW -> NHWC, ONNX -> WebNN\n    if (this.format === 'NCHW' && this.dims.length === 4) {\n      const [N, C, H, W] = Array.from(this.dims);\n      this.dims = [N, H, W, C];\n\n      if (!this.nhwcCache) {\n        if (!pseudo) {\n          this.nhwcCache = this.createBuffer();\n        } else {\n          this.nhwcCache = this.cache;\n        }\n      }\n\n      if (!pseudo) {\n        const nchwData = this.cache!;\n        const nhwcData = this.nhwcCache!;\n        for (let n = 0; n < N; ++n) {\n          for (let c = 0; c < C; ++c) {\n            for (let h = 0; h < H; ++h) {\n              for (let w = 0; w < W; ++w) {\n                nhwcData[n*H*W*C + h*W*C + w*C + c] = nchwData[n*C*H*W + c*H*W + h*W + w];\n              }\n            }\n          }\n        }\n      }\n    }\n    this.format = 'NHWC';\n    return this;\n  }\n\n  toNCHW(pseudo = false) {  // NHWC -> NCHW, WebNN -> ONNX\n    if (this.format === 'NHWC' && this.dims.length === 4) {\n      const [N, H, W, C] = Array.from(this.dims);\n      this.dims = [N, C, H, W];\n\n      if (!pseudo) {\n        const nchwData = this.cache!;\n        const nhwcData = this.nhwcCache!;\n        for (let n = 0; n < N; ++n) {\n          for (let c = 0; c < C; ++c) {\n            for (let h = 0; h < H; ++h) {\n              for (let w = 0; w < W; ++w) {\n                nchwData[n*C*H*W + c*H*W + h*W + w] = nhwcData[n*H*W*C + h*W*C + w*C + c];\n              }\n            }\n          }\n        }\n      }\n    }\n    this.format = 'NCHW';\n    return this;\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\n        value.data[i] = buf.toString();\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error(`invalid buffer length`);\n      }\n      if (dataDest.length !== length) {\n        throw new Error(`buffer length mismatch`);\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error(`array length mismatch`);\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element as Long, tensorProto.dataType);\n        } else {\n          data[i] = element as number;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from an ndarray object\n   * @param arr the ndarray object\n   * @param type the tensor data type\n   * @param copy whether to copy the underlying buffer or not\n   */\n  static fromNdarray(arr: NdArray, type: Tensor.DataType, copy = true): Tensor {\n    if (copy) {\n      const tensor = new Tensor(arr.shape, type);\n      if (type === 'string') {\n        throw new TypeError(`do not support NDArray with string tensors`);\n      } else {\n        tensor.numberData.set(arr.data as Tensor.NumberType);\n      }\n      return tensor;\n    } else {\n      return new Tensor(arr.shape, type, undefined, undefined, arr.data as TensorData);\n    }\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: Array<number>, type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (type === onnx.TensorProto.DataType.UINT32 || type === onnx.TensorProto.DataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Tensor} from '../../tensor';\n\nimport {GlslPositionalFunction} from './glsl-definitions';\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {TextureLayout} from './texture-data';\nimport {WidthHeightPrefs} from './texture-layout-strategy';\nimport {getPackedShape} from './utils';\nimport {PositionalSubOperator, WebGLOperator} from './webgl-operator';\n\nexport class WebGLOperatorHelper {\n  static run(op: WebGLOperator, inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    let artifact = inferenceHandler.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(inferenceHandler, inputs);\n      artifact = inferenceHandler.programManager.build(programInfo);\n      inferenceHandler.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(inferenceHandler, artifact.programInfo, inputs);\n    inferenceHandler.programManager.run(artifact, runData);\n    return [inferenceHandler.getTensor(runData.outputTextureData)];\n  }\n  static getFinalLayout(\n      inferenceHandler: WebGLInferenceHandler, positionalSubFunctions: GlslPositionalFunction[],\n      outputShape: ReadonlyArray<number>, channels: number, prefs?: WidthHeightPrefs): TextureLayout {\n    let finalShape = outputShape;\n    if (positionalSubFunctions.length > 0) {\n      finalShape = positionalSubFunctions[positionalSubFunctions.length - 1].outputShape;\n    }\n    return channels === 4 ?\n        inferenceHandler.createBasicTextureLayout(getPackedShape(finalShape), channels, finalShape, prefs) :\n        inferenceHandler.createBasicTextureLayout(finalShape, 1, finalShape, prefs);\n  }\n  static getPositionalFunctions(\n      inferenceHandler: WebGLInferenceHandler, subOperators: PositionalSubOperator[],\n      outputShape: ReadonlyArray<number>): GlslPositionalFunction[] {\n    let shape = outputShape;\n    if (subOperators && subOperators.length > 0) {\n      const result = new Array<GlslPositionalFunction>(subOperators.length);\n      subOperators.forEach((sub, i) => {\n        result[i] = sub.getPositionalFunction(inferenceHandler, shape);\n        shape = result[i].outputShape;\n      });\n      return result;\n    }\n    return [];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'info' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n  }\n}\n\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'info',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// tslint:disable-next-line:no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    // tslint:disable-next-line:no-backbone-get-set-outside-model\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n}\n\n// tslint:disable-next-line:variable-name\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void;\n  }\n}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void) {}\n\n  end() {\n    this.endCallback(this);\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 100000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n\n    const nodeTimings: {\n      name: string,\n      time: number,\n      setInputTime: number,\n      computeTime: number,\n      count?: number,\n    }[] = [];\n\n    for (let i = this._timingEvents.length - 1; i >= 0; i--) {\n      const event = this._timingEvents[i];\n      const elapsedTime = event.endTime - event.startTime;\n      switch (event.category) {\n        case 'op':\n        case 'session':\n          continue;\n        case 'node': {\n          nodeTimings.unshift({\n            name: event.name,\n            time: elapsedTime,\n            setInputTime: 0,\n            computeTime: 0\n          });\n        } break;\n        case 'backend': {\n          switch (event.name) {\n            case 'WebNN.Execution.setInput': {\n              nodeTimings[0].setInputTime += elapsedTime;\n            } break;\n            case 'WebNN.Execution.startCompute': {\n              nodeTimings[0].computeTime += elapsedTime;\n            } break;\n          }\n        } break;\n      }\n    }\n\n    const reducedNodeTimings = [];\n    const mapping: Map<string, number> = new Map();\n    for (const i in nodeTimings) {\n      const nodeTiming = nodeTimings[i];\n      if (mapping.has(nodeTiming.name)) {\n        const index = mapping.get(nodeTiming.name)!;\n        reducedNodeTimings[index].time += nodeTiming.time;\n        reducedNodeTimings[index].setInputTime += nodeTiming.setInputTime;\n        reducedNodeTimings[index].computeTime += nodeTiming.computeTime;\n        reducedNodeTimings[index].count!++;\n      } else {\n        nodeTiming.count = 1;\n        reducedNodeTimings.push(nodeTiming);\n        mapping.set(nodeTiming.name, parseInt(i));\n      }\n    }\n\n    let sum = 0;\n    let sumSetInputTime = 0;\n    let sumComputeTime = 0;\n    let sumOverheadTime = 0;\n\n    for (const node of reducedNodeTimings) {\n      const time = node.time / node.count!;\n      const setInputTime = node.setInputTime / node.count!;\n      const computeTime = node.computeTime / node.count!;\n      const overheadTime = time - setInputTime - computeTime;\n\n\n      const padNum = node.name.length <= 30 ? 30 - node.name.length : 0;\n      let str = `${node.name}:${' '.repeat(padNum)} sum ${time.toFixed(5).slice(0, 6)}`;\n      if (setInputTime !== 0 || computeTime !== 0) {\n        str += `, setInput ${setInputTime.toFixed(5).slice(0, 6)}, `;\n        str += `computeTime ${computeTime.toFixed(5).slice(0, 6)}, `;\n        str += `reorder+overhead ${overheadTime.toFixed(5).slice(0, 6)}`;\n        sum += time;\n        sumSetInputTime += setInputTime;\n        sumComputeTime += computeTime;\n        sumOverheadTime += overheadTime;\n      }\n      console.log(str);\n    }\n\n    console.log(`Summary of WebNN execution (WASM ops are not taken into account)`);\n    console.log(`SetInput: ${(sumSetInputTime / sum * 100).toFixed(2)}%`);\n    console.log(`Compute: ${(sumComputeTime / sum * 100).toFixed(2)}%`);\n    console.log(`Reorder + Other Overhead: ${(sumOverheadTime / sum * 100).toFixed(2)}%`);\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>): T|Promise<T> {\n    const event = this._started ? this.begin(category, name) : undefined;\n    let isPromise = false;\n\n    try {\n      const res = func();\n\n      // we consider a then-able object is a promise\n      if (res && typeof (res as Promise<T>).then === 'function') {\n        isPromise = true;\n        return new Promise<T>((resolve, reject) => {\n          (res as Promise<T>)\n              .then(\n                  value => {  // fulfilled\n                    resolve(value);\n                    if (event) {\n                      event.end();\n                    }\n                  },\n                  reason => {  // rejected\n                    reject(reason);\n                    if (event) {\n                      event.end();\n                    }\n                  });\n        });\n      }\n\n      return res;\n\n    } finally {\n      if (!isPromise && event) {\n        event.end();\n      }\n    }\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    const startTime = now();\n    this.flush(startTime);\n    return new Event(category, name, startTime, e => this.end(e));\n  }\n\n  // end the specific event\n  private end(event: Event) {\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      const endTime = now();\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from './instrument';\nimport * as bindingCore from './wasm-binding-core';\nimport {WasmCallArgument} from './wasm-binding-core';\n\nexport {WasmCallArgument} from './wasm-binding-core';\n\ninterface PerformanceData extends bindingCore.PerformanceData {\n  startTimeWorker?: number;\n  endTimeWorker?: number;\n}\n\nlet workers: Worker[];\nlet WORKER_NUMBER: number;\n\n// complete callback after\ntype CompleteCallbackType = (buffer: ArrayBuffer, perfData: PerformanceData) => void;\nlet completeCallbacks: CompleteCallbackType[][];\n\nlet initialized = false;\nlet initializing = false;\n\n/**\n * initialize the WASM instance.\n *\n * this function should be called before any other calls to methods in WasmBinding.\n */\nexport function init(numWorkers: number): Promise<void> {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(`multiple calls to 'init()' detected.`);\n  }\n\n  initializing = true;\n  return new Promise<void>((resolve, reject) => {\n    // the timeout ID that used as a guard for rejecting binding init.\n    // we set the type of this variable to unknown because the return type of function 'setTimeout' is different\n    // in node.js (type Timeout) and browser (number)\n    let waitForBindingInitTimeoutId: unknown;\n    const clearWaitForBindingInit = () => {\n      if (waitForBindingInitTimeoutId !== undefined) {\n        // tslint:disable-next-line:no-any\n        clearTimeout(waitForBindingInitTimeoutId as any);\n        waitForBindingInitTimeoutId = undefined;\n      }\n    };\n\n    const onFulfilled = () => {\n      clearWaitForBindingInit();\n      resolve();\n      initializing = false;\n      initialized = true;\n    };\n    const onRejected = (err: unknown) => {\n      clearWaitForBindingInit();\n      reject(err);\n      initializing = false;\n    };\n\n    const bindingInitTask = bindingCore.init();\n    // a promise that gets rejected after 5s to work around the fact that\n    // there is an unrejected promise in the wasm glue logic file when\n    // it has some problem instantiating the wasm file\n    const rejectAfterTimeOutPromise = new Promise((resolve, reject) => {\n      waitForBindingInitTimeoutId = setTimeout(() => {\n        reject('Wasm init promise failed to be resolved within set timeout');\n      }, 5000);\n    });\n\n    // user requests positive number of workers\n    if (numWorkers > 0) {\n      Logger.verbose('WebAssembly-Workers', `User has requested ${numWorkers} Workers.`);\n      // check if environment supports usage of workers\n      if (areWebWorkersSupported()) {\n        Logger.verbose(\n            'WebAssembly-Workers', `Environment supports usage of Workers. Will spawn ${numWorkers} Workers`);\n        WORKER_NUMBER = numWorkers;\n      } else {\n        Logger.error('WebAssembly-Workers', 'Environment does not support usage of Workers. Will not spawn workers.');\n        WORKER_NUMBER = 0;\n      }\n    }\n\n    // user explicitly disables workers\n    else {\n      Logger.verbose('WebAssembly-Workers', 'User has disabled usage of Workers. Will not spawn workers.');\n      WORKER_NUMBER = 0;\n    }\n\n    const workerInitTasks = new Array<Promise<void>>(WORKER_NUMBER);\n    workers = new Array(WORKER_NUMBER);\n    completeCallbacks = new Array(WORKER_NUMBER);\n\n    for (let workerId = 0; workerId < WORKER_NUMBER; workerId++) {\n      const workerInitTask = new Promise<void>((resolveWorkerInit, rejectWorkerInit) => {\n        // tslint:disable-next-line\n        const worker = require('worker-loader?name=./onnx-worker.js!./worker/worker-main')() as Worker;\n        workers[workerId] = worker;\n        completeCallbacks[workerId] = [];\n        worker.onerror = e => {\n          Logger.error('WebAssembly-Workers', `worker-${workerId} ERR: ${e}`);\n          if (initialized) {\n            // TODO: we need error-handling logic\n          } else {\n            rejectWorkerInit();\n          }\n        };\n        worker.onmessage = e => {\n          if (e && e.data && e.data.type) {\n            if (e.data.type === 'init-success') {\n              resolveWorkerInit();\n            } else if (e.data.type === 'ccall') {\n              const perfData = e.data.perfData as PerformanceData;\n              completeCallbacks[workerId].shift()!(e.data.buffer as ArrayBuffer, perfData);\n            } else {\n              throw new Error(`unknown message type from worker: ${e.data.type}`);\n            }\n          } else {\n            throw new Error(`missing message type from worker`);\n          }\n        };\n      });\n      workerInitTasks[workerId] = workerInitTask;\n    }\n\n    // TODO: Fix this hack to work-around the fact that the Wasm binding instantiate promise\n    // is unrejected incase there is a fatal exception (missing wasm file for example)\n    // we impose a healthy timeout (should not affect core framework performance)\n    Promise.race([bindingInitTask, rejectAfterTimeOutPromise])\n        .then(\n            () => {\n              // Wasm init promise resolved\n              Promise.all(workerInitTasks)\n                  .then(\n                      // Wasm AND Web-worker init promises resolved. SUCCESS!!\n                      onFulfilled,\n                      // Wasm init promise resolved. Some (or all) web-worker init promises failed to be resolved.\n                      // PARTIAL SUCCESS. Use Wasm backend with no web-workers (best-effort).\n                      () => {\n                        Logger.warning(\n                            'WebAssembly-Workers',\n                            'Unable to get all requested workers initialized. Will use Wasm backend with 0 workers.');\n                        // TODO: need house-keeping logic to cull exisitng successfully initialized workers\n                        WORKER_NUMBER = 0;\n                        onFulfilled();\n                      });\n            },\n            // Wasm init promise failed to be resolved. COMPLETE FAILURE. Reject this init promise.\n            onRejected);\n  });\n}\n\n// Extending the WasmBinding class to deal with web-worker specific logic here\nexport class WasmBinding extends bindingCore.WasmBinding {\n  protected static instance?: WasmBinding;\n  static getInstance(): WasmBinding {\n    if (!WasmBinding.instance) {\n      WasmBinding.instance = new WasmBinding();\n    }\n    return WasmBinding.instance;\n  }\n  static get workerNumber() {\n    return WORKER_NUMBER;\n  }\n  ccallRemote(workerId: number, functionName: string, ...params: WasmCallArgument[]): Promise<PerformanceData> {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n\n    if (workerId < 0 || workerId >= WORKER_NUMBER) {\n      throw new Error(`invalid worker ID ${workerId}. should be in range [0, ${WORKER_NUMBER})`);\n    }\n\n    const offset: number[] = [];\n    const size = WasmBinding.calculateOffsets(offset, params);\n    const buffer = new ArrayBuffer(size);\n    WasmBinding.ccallSerialize(new Uint8Array(buffer), offset, params);\n\n    const startTime = bindingCore.now();\n    workers[workerId].postMessage({type: 'ccall', func: functionName, buffer}, [buffer]);\n\n    return new Promise<PerformanceData>((resolve, reject) => {\n      completeCallbacks[workerId].push((buffer, perf) => {\n        perf.startTimeWorker = perf.startTime;\n        perf.endTimeWorker = perf.endTime;\n        perf.startTime = startTime;\n        perf.endTime = bindingCore.now();\n\n        WasmBinding.ccallDeserialize(new Uint8Array(buffer), offset, params);\n        resolve(perf);\n      });\n    });\n  }\n}\n\nfunction areWebWorkersSupported(): boolean {\n  // very simplistic check to make sure the environment supports usage of workers\n  // tslint:disable-next-line:no-any\n  if (typeof window !== 'undefined' && typeof (window as any).Worker !== 'undefined') {\n    return true;\n  }\n  return false;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ProgramInfo} from './program-info';\nimport {VariableInfo} from './program-manager';\nimport {WebGLContext} from './webgl-context';\n\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport interface GlslValueFunction extends GlslFunction<FunctionType.ValueBased> {}\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: ReadonlyArray<number>;\n  outputShape: ReadonlyArray<number>;\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public attribInfo: VariableInfo[],\n      public uniformInfo: VariableInfo[]) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error(`Cyclic dependency detected. Can't topologically sort routines needed for shader.`);\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from './attribute';\nimport {InferenceHandler} from './backend';\nimport {Tensor} from './tensor';\n\nexport interface Operator {\n  initialize(attributes: Attribute): void;\n  checkInputs(inputs: Tensor[]): boolean;\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n}\n\nexport const NUMBER_TYPES: ReadonlyArray<Tensor.DataType> =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: ReadonlyArray<Tensor.DataType> = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: ReadonlyArray<Tensor.DataType> = ['float32', 'float64'];\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION=3 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION\"] = 3;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                object.s = options.bytes === String ? \"\" : [];\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {onnx.TensorProto.DataType|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {onnx.TensorProto.DataType} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                switch (message.dataType) {\n                default:\n                    return \"dataType: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 14:\n                case 15:\n                    break;\n                }\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            switch (object.dataType) {\n            case \"UNDEFINED\":\n            case 0:\n                message.dataType = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.dataType = 1;\n                break;\n            case \"UINT8\":\n            case 2:\n                message.dataType = 2;\n                break;\n            case \"INT8\":\n            case 3:\n                message.dataType = 3;\n                break;\n            case \"UINT16\":\n            case 4:\n                message.dataType = 4;\n                break;\n            case \"INT16\":\n            case 5:\n                message.dataType = 5;\n                break;\n            case \"INT32\":\n            case 6:\n                message.dataType = 6;\n                break;\n            case \"INT64\":\n            case 7:\n                message.dataType = 7;\n                break;\n            case \"STRING\":\n            case 8:\n                message.dataType = 8;\n                break;\n            case \"BOOL\":\n            case 9:\n                message.dataType = 9;\n                break;\n            case \"FLOAT16\":\n            case 10:\n                message.dataType = 10;\n                break;\n            case \"DOUBLE\":\n            case 11:\n                message.dataType = 11;\n                break;\n            case \"UINT32\":\n            case 12:\n                message.dataType = 12;\n                break;\n            case \"UINT64\":\n            case 13:\n                message.dataType = 13;\n                break;\n            case \"COMPLEX64\":\n            case 14:\n                message.dataType = 14;\n                break;\n            case \"COMPLEX128\":\n            case 15:\n                message.dataType = 15;\n                break;\n            }\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n            }\n            if (options.defaults) {\n                object.dataType = options.enums === String ? \"UNDEFINED\" : 0;\n                object.segment = null;\n                object.name = \"\";\n                object.rawData = options.bytes === String ? \"\" : [];\n                object.docString = \"\";\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = options.enums === String ? $root.onnx.TensorProto.DataType[message.dataType] : message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.DenotationConstProto = (function() {\n\n        /**\n         * Properties of a DenotationConstProto.\n         * @memberof onnx\n         * @interface IDenotationConstProto\n         * @property {string|null} [DATA_BATCH] DenotationConstProto DATA_BATCH\n         * @property {string|null} [DATA_CHANNEL] DenotationConstProto DATA_CHANNEL\n         * @property {string|null} [DATA_TIME] DenotationConstProto DATA_TIME\n         * @property {string|null} [DATA_FEATURE] DenotationConstProto DATA_FEATURE\n         * @property {string|null} [FILTER_IN_CHANNEL] DenotationConstProto FILTER_IN_CHANNEL\n         * @property {string|null} [FILTER_OUT_CHANNEL] DenotationConstProto FILTER_OUT_CHANNEL\n         * @property {string|null} [FILTER_SPATIAL] DenotationConstProto FILTER_SPATIAL\n         */\n\n        /**\n         * Constructs a new DenotationConstProto.\n         * @memberof onnx\n         * @classdesc Represents a DenotationConstProto.\n         * @implements IDenotationConstProto\n         * @constructor\n         * @param {onnx.IDenotationConstProto=} [properties] Properties to set\n         */\n        function DenotationConstProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DenotationConstProto DATA_BATCH.\n         * @member {string} DATA_BATCH\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.DATA_BATCH = \"DATA_BATCH\";\n\n        /**\n         * DenotationConstProto DATA_CHANNEL.\n         * @member {string} DATA_CHANNEL\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.DATA_CHANNEL = \"DATA_CHANNEL\";\n\n        /**\n         * DenotationConstProto DATA_TIME.\n         * @member {string} DATA_TIME\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.DATA_TIME = \"DATA_TIME\";\n\n        /**\n         * DenotationConstProto DATA_FEATURE.\n         * @member {string} DATA_FEATURE\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.DATA_FEATURE = \"DATA_FEATURE\";\n\n        /**\n         * DenotationConstProto FILTER_IN_CHANNEL.\n         * @member {string} FILTER_IN_CHANNEL\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.FILTER_IN_CHANNEL = \"FILTER_IN_CHANNEL\";\n\n        /**\n         * DenotationConstProto FILTER_OUT_CHANNEL.\n         * @member {string} FILTER_OUT_CHANNEL\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.FILTER_OUT_CHANNEL = \"FILTER_OUT_CHANNEL\";\n\n        /**\n         * DenotationConstProto FILTER_SPATIAL.\n         * @member {string} FILTER_SPATIAL\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         */\n        DenotationConstProto.prototype.FILTER_SPATIAL = \"FILTER_SPATIAL\";\n\n        /**\n         * Creates a new DenotationConstProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {onnx.IDenotationConstProto=} [properties] Properties to set\n         * @returns {onnx.DenotationConstProto} DenotationConstProto instance\n         */\n        DenotationConstProto.create = function create(properties) {\n            return new DenotationConstProto(properties);\n        };\n\n        /**\n         * Encodes the specified DenotationConstProto message. Does not implicitly {@link onnx.DenotationConstProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {onnx.IDenotationConstProto} message DenotationConstProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DenotationConstProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.DATA_BATCH != null && message.hasOwnProperty(\"DATA_BATCH\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.DATA_BATCH);\n            if (message.DATA_CHANNEL != null && message.hasOwnProperty(\"DATA_CHANNEL\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.DATA_CHANNEL);\n            if (message.DATA_TIME != null && message.hasOwnProperty(\"DATA_TIME\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.DATA_TIME);\n            if (message.DATA_FEATURE != null && message.hasOwnProperty(\"DATA_FEATURE\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.DATA_FEATURE);\n            if (message.FILTER_IN_CHANNEL != null && message.hasOwnProperty(\"FILTER_IN_CHANNEL\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.FILTER_IN_CHANNEL);\n            if (message.FILTER_OUT_CHANNEL != null && message.hasOwnProperty(\"FILTER_OUT_CHANNEL\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.FILTER_OUT_CHANNEL);\n            if (message.FILTER_SPATIAL != null && message.hasOwnProperty(\"FILTER_SPATIAL\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.FILTER_SPATIAL);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DenotationConstProto message, length delimited. Does not implicitly {@link onnx.DenotationConstProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {onnx.IDenotationConstProto} message DenotationConstProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DenotationConstProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DenotationConstProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.DenotationConstProto} DenotationConstProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DenotationConstProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.DenotationConstProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.DATA_BATCH = reader.string();\n                    break;\n                case 2:\n                    message.DATA_CHANNEL = reader.string();\n                    break;\n                case 3:\n                    message.DATA_TIME = reader.string();\n                    break;\n                case 4:\n                    message.DATA_FEATURE = reader.string();\n                    break;\n                case 5:\n                    message.FILTER_IN_CHANNEL = reader.string();\n                    break;\n                case 6:\n                    message.FILTER_OUT_CHANNEL = reader.string();\n                    break;\n                case 7:\n                    message.FILTER_SPATIAL = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DenotationConstProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.DenotationConstProto} DenotationConstProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DenotationConstProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DenotationConstProto message.\n         * @function verify\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DenotationConstProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.DATA_BATCH != null && message.hasOwnProperty(\"DATA_BATCH\"))\n                if (!$util.isString(message.DATA_BATCH))\n                    return \"DATA_BATCH: string expected\";\n            if (message.DATA_CHANNEL != null && message.hasOwnProperty(\"DATA_CHANNEL\"))\n                if (!$util.isString(message.DATA_CHANNEL))\n                    return \"DATA_CHANNEL: string expected\";\n            if (message.DATA_TIME != null && message.hasOwnProperty(\"DATA_TIME\"))\n                if (!$util.isString(message.DATA_TIME))\n                    return \"DATA_TIME: string expected\";\n            if (message.DATA_FEATURE != null && message.hasOwnProperty(\"DATA_FEATURE\"))\n                if (!$util.isString(message.DATA_FEATURE))\n                    return \"DATA_FEATURE: string expected\";\n            if (message.FILTER_IN_CHANNEL != null && message.hasOwnProperty(\"FILTER_IN_CHANNEL\"))\n                if (!$util.isString(message.FILTER_IN_CHANNEL))\n                    return \"FILTER_IN_CHANNEL: string expected\";\n            if (message.FILTER_OUT_CHANNEL != null && message.hasOwnProperty(\"FILTER_OUT_CHANNEL\"))\n                if (!$util.isString(message.FILTER_OUT_CHANNEL))\n                    return \"FILTER_OUT_CHANNEL: string expected\";\n            if (message.FILTER_SPATIAL != null && message.hasOwnProperty(\"FILTER_SPATIAL\"))\n                if (!$util.isString(message.FILTER_SPATIAL))\n                    return \"FILTER_SPATIAL: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DenotationConstProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.DenotationConstProto} DenotationConstProto\n         */\n        DenotationConstProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.DenotationConstProto)\n                return object;\n            var message = new $root.onnx.DenotationConstProto();\n            if (object.DATA_BATCH != null)\n                message.DATA_BATCH = String(object.DATA_BATCH);\n            if (object.DATA_CHANNEL != null)\n                message.DATA_CHANNEL = String(object.DATA_CHANNEL);\n            if (object.DATA_TIME != null)\n                message.DATA_TIME = String(object.DATA_TIME);\n            if (object.DATA_FEATURE != null)\n                message.DATA_FEATURE = String(object.DATA_FEATURE);\n            if (object.FILTER_IN_CHANNEL != null)\n                message.FILTER_IN_CHANNEL = String(object.FILTER_IN_CHANNEL);\n            if (object.FILTER_OUT_CHANNEL != null)\n                message.FILTER_OUT_CHANNEL = String(object.FILTER_OUT_CHANNEL);\n            if (object.FILTER_SPATIAL != null)\n                message.FILTER_SPATIAL = String(object.FILTER_SPATIAL);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DenotationConstProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.DenotationConstProto\n         * @static\n         * @param {onnx.DenotationConstProto} message DenotationConstProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DenotationConstProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.DATA_BATCH = \"DATA_BATCH\";\n                object.DATA_CHANNEL = \"DATA_CHANNEL\";\n                object.DATA_TIME = \"DATA_TIME\";\n                object.DATA_FEATURE = \"DATA_FEATURE\";\n                object.FILTER_IN_CHANNEL = \"FILTER_IN_CHANNEL\";\n                object.FILTER_OUT_CHANNEL = \"FILTER_OUT_CHANNEL\";\n                object.FILTER_SPATIAL = \"FILTER_SPATIAL\";\n            }\n            if (message.DATA_BATCH != null && message.hasOwnProperty(\"DATA_BATCH\"))\n                object.DATA_BATCH = message.DATA_BATCH;\n            if (message.DATA_CHANNEL != null && message.hasOwnProperty(\"DATA_CHANNEL\"))\n                object.DATA_CHANNEL = message.DATA_CHANNEL;\n            if (message.DATA_TIME != null && message.hasOwnProperty(\"DATA_TIME\"))\n                object.DATA_TIME = message.DATA_TIME;\n            if (message.DATA_FEATURE != null && message.hasOwnProperty(\"DATA_FEATURE\"))\n                object.DATA_FEATURE = message.DATA_FEATURE;\n            if (message.FILTER_IN_CHANNEL != null && message.hasOwnProperty(\"FILTER_IN_CHANNEL\"))\n                object.FILTER_IN_CHANNEL = message.FILTER_IN_CHANNEL;\n            if (message.FILTER_OUT_CHANNEL != null && message.hasOwnProperty(\"FILTER_OUT_CHANNEL\"))\n                object.FILTER_OUT_CHANNEL = message.FILTER_OUT_CHANNEL;\n            if (message.FILTER_SPATIAL != null && message.hasOwnProperty(\"FILTER_SPATIAL\"))\n                object.FILTER_SPATIAL = message.FILTER_SPATIAL;\n            return object;\n        };\n\n        /**\n         * Converts this DenotationConstProto to JSON.\n         * @function toJSON\n         * @memberof onnx.DenotationConstProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DenotationConstProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DenotationConstProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {onnx.TensorProto.DataType|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {onnx.TensorProto.DataType} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    switch (message.elemType) {\n                    default:\n                        return \"elemType: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 9:\n                    case 10:\n                    case 11:\n                    case 12:\n                    case 13:\n                    case 14:\n                    case 15:\n                        break;\n                    }\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                switch (object.elemType) {\n                case \"UNDEFINED\":\n                case 0:\n                    message.elemType = 0;\n                    break;\n                case \"FLOAT\":\n                case 1:\n                    message.elemType = 1;\n                    break;\n                case \"UINT8\":\n                case 2:\n                    message.elemType = 2;\n                    break;\n                case \"INT8\":\n                case 3:\n                    message.elemType = 3;\n                    break;\n                case \"UINT16\":\n                case 4:\n                    message.elemType = 4;\n                    break;\n                case \"INT16\":\n                case 5:\n                    message.elemType = 5;\n                    break;\n                case \"INT32\":\n                case 6:\n                    message.elemType = 6;\n                    break;\n                case \"INT64\":\n                case 7:\n                    message.elemType = 7;\n                    break;\n                case \"STRING\":\n                case 8:\n                    message.elemType = 8;\n                    break;\n                case \"BOOL\":\n                case 9:\n                    message.elemType = 9;\n                    break;\n                case \"FLOAT16\":\n                case 10:\n                    message.elemType = 10;\n                    break;\n                case \"DOUBLE\":\n                case 11:\n                    message.elemType = 11;\n                    break;\n                case \"UINT32\":\n                case 12:\n                    message.elemType = 12;\n                    break;\n                case \"UINT64\":\n                case 13:\n                    message.elemType = 13;\n                    break;\n                case \"COMPLEX64\":\n                case 14:\n                    message.elemType = 14;\n                    break;\n                case \"COMPLEX128\":\n                case 15:\n                    message.elemType = 15;\n                    break;\n                }\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = options.enums === String ? \"UNDEFINED\" : 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = options.enums === String ? $root.onnx.TensorProto.DataType[message.elemType] : message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {getPackedShape} from '../utils';\n\nexport class WebGLReshape extends Reshape {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n    const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\n    return [reshapedTensor];\n  }\n}\n\nexport function reshape(\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: ReadonlyArray<number>): Tensor {\n  const inputTD = inferenceHandler.getOrCreate(input);\n  const isInitializer = inferenceHandler.session.isInitializer(input);\n  let packedShape = reshapedDims;\n  if (inputTD.channels === 4) {\n    packedShape = getPackedShape(reshapedDims);\n  }\n  const newTD = {\n    channels: inputTD.channels,\n    dataType: input.type,\n    texture: inputTD.texture,\n    height: inputTD.height,\n    width: inputTD.width,\n    // handle reshaping into scalar Tensors\n    shape: packedShape.length !== 0 ? packedShape : [1],\n    strides: ShapeUtil.computeStrides(packedShape),\n    unpackedShape: reshapedDims,\n  };\n  const newTensor = new Tensor(newTD.unpackedShape, newTD.dataType, (id: Tensor.Id) => {\n    return inferenceHandler.readTexture(newTD);\n  });\n  if (isInitializer) {\n    inferenceHandler.session.setTextureData(newTensor, newTD);\n  } else {\n    inferenceHandler.setTextureData(newTensor, newTD);\n  }\n\n  return newTensor;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Graph} from './graph';\nimport {Operator} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  interface OperatorConstructor {\n    (node: Graph.Node): Operator;\n  }\n\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml';\n\n  /**\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\n   */\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\n}\n\nexport function resolveOperator(\n    node: Graph.Node, opsets: ReadonlyArray<OpSet>, rules: ReadonlyArray<OpSet.ResolveRule>) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opConstructor = rule[3];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return opConstructor(node);\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\n// currently this operator supports ONLY 'test' mode\n// inputs/outputs and parameters will reflect that\n// the operator implementation only supports test mode\nexport abstract class BatchNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n    this.momentum = attributes.getFloat('momentum', 0.9);\n    this.spatial = attributes.getInt('spatial', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 5) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n    const mean = inputs[3];\n    const var_ = inputs[4];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n        var_.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n        var_.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n  protected momentum: number;\n  protected spatial: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class BinaryOp implements Operator {\n  constructor(\n      protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected opType?: string,\n      protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Conv implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.dilations = attributes.getInts('dilations', [1, 1]);\n    this.group = attributes.getInt('group', 1);\n    this.kernelShape = attributes.getInts('kernel_shape', []);\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\n    this.strides = attributes.getInts('strides', [1, 1]);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    // Refer to the below link for all input checks\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n      return false;\n    }\n\n    // TODO : Need to add support for multi-dimensional conv\n    // currently only support 2-dimensional conv\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n      return false;\n    }\n\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n    const dataChannel = inputs[0].dims[1];\n    const filterInChannel = inputs[1].dims[1] * this.group;\n    if (dataChannel !== filterInChannel) {\n      return false;\n    }\n\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n      return false;\n    }\n\n    const spatialRank = inputs[0].dims.length - 2;\n    // wrong dilations dimension\n    if (this.dilations.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong strides dimension\n    if (this.strides.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong pads dimension\n    if (this.pads.length !== spatialRank * 2) {\n      return false;\n    }\n\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n    // (the first 2 dims are batch_size and channels)\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO : Need to add support for float64\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected dilations: number[];\n  protected group: number;\n  protected kernelShape: number[];\n  protected pads: number[];\n  protected strides: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gemm implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.transA = attributes.getInt('transA', 0) !== 0;\n    this.transB = attributes.getInt('transB', 0) !== 0;\n    this.alpha = attributes.getFloat('alpha', 1);\n    this.beta = attributes.getFloat('beta', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 3) {\n      return false;\n    }\n\n    // 'C' can be of dimensionality 1 or 2 only\n    if (inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n        (inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n      return false;\n    }\n\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected transA: boolean;\n  protected transB: boolean;\n  protected alpha: number;\n  protected beta: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class MatMul implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nclass PoolBase {\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected ceilMode: number;\n  protected countIncludePad: boolean;\n  protected kernelShape: number[];\n  protected strides: number[];\n  protected pads: number[];\n}\n\nexport abstract class AveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n\n    // TODO: support attribute 'ceil_mode'\n    if (this.ceilMode !== 0) {\n      throw new Error(`using ceil() in shape computation is not yet supported for AveragePool`);\n    }\n  }\n}\n\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n  }\n}\n\nexport abstract class MaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n    this.storageOrder = attributes.getInt('storage_order', 0);\n\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\n    if (this.storageOrder !== 0) {\n      throw new Error(`column major storage order is not yet supported for MaxPool`);\n    }\n    if (this.ceilMode !== 0) {\n      throw new Error(`using ceil() in shape computation is not yet supported for MaxPool`);\n    }\n  }\n\n  protected storageOrder: number;\n}\n\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Softmax implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Sum implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length === 0) {\n      return false;\n    }\n\n    const length = inputs[0].dims.length;\n    for (let i = 1; i < inputs.length; i++) {\n      if (length !== inputs[i].dims.length) {\n        return false;\n      }\n\n      for (let j = 0; j < length; j++) {\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n          return false;\n        }\n      }\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n    for (let i = 1; i < inputs.length; i++) {\n      if (inputs[0].type !== inputs[i].type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport interface Disposable {\n  dispose(): void;\n}\n\nexport function using<T extends Disposable>(resource: T, func: (resource: T) => void) {\n  try {\n    func(resource);\n  } finally {\n    resource.dispose();\n  }\n}\nexport function expandArray(shape: ReadonlyArray<number>, newLength: number, fill: number) {\n  if (shape.length === newLength) {\n    return shape;\n  }\n  const newShape = new Array(newLength);\n  newShape.fill(fill);\n  newShape.splice(newLength - shape.length, shape.length, ...shape);\n  return newShape;\n}\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: ReadonlyArray<number>): ReadonlyArray<number> {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {DataEncoder, Encoder, RGBAFloat32DataEncoder, Uint8DataEncoder} from './texture-data-encoder';\nimport {Disposable} from './utils';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Basic implementation of WebGLContext\n */\nexport abstract class BaseWebGLContext implements WebGLContext, Disposable {\n  canvas: HTMLCanvasElement;\n  gl: WebGLRenderingContext;\n  contextAttributes: WebGLContextAttributes;\n  maxTextureSize: number;\n  textureFloatExtension: OES_texture_float|null;\n  textureHalfFloatExtension: OES_texture_half_float|null;\n  vertexbuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  maxCombinedTextureImageUnits: number;\n  maxTextureImageUnits: number;\n  maxCubeMapTextureSize: number;\n  shadingLanguageVersion: string;\n  webglVendor: string;\n  webglVersion: string;\n  disposed: boolean;\n  frameBufferBound = false;\n\n  init(): void {\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n  createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0\n    ]);  // lower right\n  }\n  createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n  allocateTexture(\n      width: number, height: number, dataType: Encoder.DataType, channels: number,\n      data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.channelType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, dataType: Encoder.DataType, channels: number,\n      data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.channelType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.channelType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  checkError(): void {\n    // TODO: Implement WebGL error checks\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n    gl.enableVertexAttribArray(positionHandle);\n    gl.enableVertexAttribArray(textureCoordHandle);\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error('createShader() returned null');\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    // TODO: check if the compilation was a success\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number): DataEncoder {\n    switch (dataType) {\n      case 'float':\n        return new RGBAFloat32DataEncoder(channels);\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new Uint8DataEncoder(channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  protected queryVitalParameters(): void {\n    const gl = this.gl;\n    this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    this.webglVendor = gl.getParameter(gl.VENDOR);\n    this.webglVersion = gl.getParameter(gl.VERSION);\n  }\n  protected getExtensions(): void {\n    this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n    this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Onnx} from './onnx';\nimport * as onnxImpl from './onnx-impl';\n\n// get or create the onnx object in the global context\nconst onnxGlobal = ((typeof window !== 'undefined') ? window : global) as {onnx?: Onnx};\nconst onnx: Onnx = onnxImpl;\nonnxGlobal.onnx = onnx;\n\n// set module exported object to global.onnx\nexport = onnxImpl;\n\n// declaration of object global.onnx\ndeclare global {\n  /**\n   * the global onnxjs exported object\n   */\n  const onnx: Onnx;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\nimport {OpSet} from '../../opset';\n\nimport {CpuArgMax} from './ops/argMax';\nimport {CpuBatchNormalization} from './ops/batch-normalization';\nimport {CpuBinaryOp} from './ops/binary-op';\nimport {CpuConcat} from './ops/concat';\nimport {CpuConv} from './ops/conv';\nimport {CpuDropout} from './ops/dropout';\nimport {CpuFlatten} from './ops/flatten';\nimport {CpuGather} from './ops/gather';\nimport {CpuGemm} from './ops/gemm';\nimport {CpuImageScaler} from './ops/image-scaler';\nimport {CpuInstanceNormalization} from './ops/instance-normalization';\nimport {CpuLrn} from './ops/lrn';\nimport {CpuMatMul} from './ops/matmul';\nimport {CpuAveragePool, CpuGlobalAveragePool, CpuGlobalMaxPool, CpuMaxPool} from './ops/pool';\nimport * as cpuReduce from './ops/reduce';\nimport {CpuReshape} from './ops/reshape';\nimport {CpuSlice} from './ops/slice';\nimport {CpuSoftmax} from './ops/softmax';\nimport {CpuSqueeze} from './ops/squeeze';\nimport {CpuSum} from './ops/sum';\nimport {CpuTile} from './ops/tile';\nimport {CpuTranspose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {CpuUnsqueeze} from './ops/unsqueeze';\n\nexport const CPU_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\n  ['Abs', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.abs)],\n  ['Acos', '', '7+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.acos)],\n  ['Add', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 + e2))],\n  ['And', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 && e2))],\n  ['ArgMax', '', '1+', () => new CpuArgMax()],\n  ['Asin', '', '7+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.asin)],\n  ['Atan', '', '7+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.atan)],\n  ['AveragePool', '', '7+', () => new CpuAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new CpuBatchNormalization()],\n  ['Ceil', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.ceil)],\n  ['Clip', '', '6+', () => new unaryOps.CpuUnaryOp(FLOAT_TYPES, unaryOps.clip)],\n  ['Concat', '', '4+', () => new CpuConcat()],\n  ['Conv', '', '1+', () => new CpuConv()],\n  ['Cos', '', '7+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.cos)],\n  ['Div', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 / e2))],\n  ['Dropout', '', '7+', () => new CpuDropout()],\n  ['Elu', '', '6+', () => new unaryOps.CpuUnaryOp(FLOAT_TYPES, unaryOps.elu)],\n  ['Exp', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.exp)],\n  ['Flatten', '', '1+', () => new CpuFlatten()],\n  ['Floor', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.floor)],\n  ['Gather', '', '1+', () => new CpuGather()],\n  ['Gemm', '', '7+', () => new CpuGemm()],\n  ['GlobalAveragePool', '', '1+', () => new CpuGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new CpuGlobalMaxPool()],\n  ['ImageScaler', '', '1+', () => new CpuImageScaler()],\n  ['InstanceNormalization', '', '6+', () => new CpuInstanceNormalization()],\n  ['LeakyRelu', '', '6+', () => new unaryOps.CpuUnaryOp(FLOAT_TYPES, unaryOps.leakyRelu)],\n  ['Log', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.log)],\n  ['LRN', '', '1+', () => new CpuLrn()],\n  ['MatMul', '', '1+', () => new CpuMatMul()],\n  ['MaxPool', '', '1+', () => new CpuMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 * e2))],\n  ['Neg', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.neg)],\n  ['Or', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 || e2))],\n  ['PRelu', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 >= 0 ? e1 : e1 * e2))],\n  ['ReduceLogSum', '', '1+', () => new cpuReduce.CpuReduceLogSum()],\n  ['ReduceMax', '', '1+', () => new cpuReduce.CpuReduceMax()],\n  ['ReduceMean', '', '1+', () => new cpuReduce.CpuReduceMean()],\n  ['ReduceMin', '', '1+', () => new cpuReduce.CpuReduceMin()],\n  ['ReduceProd', '', '1+', () => new cpuReduce.CpuReduceProd()],\n  ['ReduceSum', '', '1+', () => new cpuReduce.CpuReduceSum()],\n  ['ReduceSumSquare', '', '1+', () => new cpuReduce.CpuReduceSumSquare()],\n  ['Relu', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.relu)],\n  ['Reshape', '', '5+', () => new CpuReshape()],\n  ['Sigmoid', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.sigmoid)],\n  ['Sin', '', '7+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.sin)],\n  ['Slice', '', '1+', () => new CpuSlice()],\n  ['Softmax', '', '1+', () => new CpuSoftmax()],\n  ['Sqrt', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.sqrt)],\n  ['Squeeze', '', '1+', () => new CpuSqueeze()],\n  ['Sub', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 - e2))],\n  ['Sum', '', '6+', () => new CpuSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Tan', '', '7+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.tan)],\n  ['Tanh', '', '6+', () => new unaryOps.CpuUnaryOp(NUMBER_TYPES, unaryOps.tanh)],\n  ['Tile', '', '6+', () => new CpuTile()],\n  ['Transpose', '', '1+', () => new CpuTranspose()],\n  ['Unsqueeze', '', '1+', () => new CpuUnsqueeze()],\n  ['Xor', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 ^ e2))],\n];\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\"\n\nvar compile = require(\"cwise-compiler\")\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport ndarray from 'ndarray';\n\nimport {Attribute} from '../../../attribute';\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuBinaryOp extends BinaryOp {\n  constructor(\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private opLambda?: (e1: number, e2: number) => number,\n      opType?: string, resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n\n  // overriding the initialize() in the base class\n  initialize(attributes: Attribute): void {\n    if (!this.opType && !this.opLambda) {\n      throw new Error(`Both opType and opLambda cannot be missing for a binary op`);\n    }\n    // Expose functionality to construct opLambdas on the fly\n    // This is not costly as initialize() should be invoked only once after the model is resolved to a graph object\n    if (!this.opLambda) {\n      switch (this.opType) {\n        default:\n          throw new Error(`Binary op could not be initialized. Missing op lambda.`);\n      }\n    }\n  }\n\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = binaryOp(inputs[0], inputs[1], this.opLambda!, this.resultType);\n    return [output];\n  }\n}\n\nexport function binaryOp(\n    x: Tensor, y: Tensor, opLambda: (e1: number, e2: number) => number, resultType?: Tensor.DataType): Tensor {\n  const result =\n      BroadcastUtil.calc(ndarray(x.numberData, x.dims.slice(0)), ndarray(y.numberData, y.dims.slice(0)), opLambda);\n  if (!result) {\n    throw new Error('not broadcastable');\n  }\n  const output = new Tensor(result.shape, resultType ? resultType : x.type);\n  output.numberData.set(result.data);\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Concat implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const inputType = inputs[0].type;\n    const inputDimensionality = inputs[0].dims.length;\n\n    // TODO: Support string concat\n    if (inputType === 'string') {\n      return false;\n    }\n\n    for (const input of inputs) {\n      // make sure types of all inputs match\n      if (input.type !== inputType) {\n        return false;\n      }\n\n      // make sure the dimensionality of all inputs are the same\n      if (input.dims.length !== inputDimensionality) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","\"use strict\"\n\nmodule.exports = matrixProduct\n\nvar generatePlan = require(\"./lib/planner.js\")\n\nfunction shape(arr) {\n  if(Array.isArray(arr)) {\n    return [ arr.length, arr[0].length ]\n  } else {\n    return arr.shape\n  }\n}\n\nfunction checkShapes(out, a, b) {\n  var os = shape(out)\n  var as = shape(a)\n  var bs = shape(b)\n  if(os[0] !== as[0] || os[1] !== bs[1] || as[1] !== bs[0]) {\n    throw new Error(\"Mismatched array shapes for matrix product\")\n  }\n}\n\nfunction classifyType(m) {\n  if(Array.isArray(m)) {\n    if(Array.isArray(m)) {\n      return [ \"r\", \"native\" ]\n    }\n  } else if(m.shape && (m.shape.length === 2)) {\n    if(m.order[0]) {\n      return [ \"r\", m.dtype ]\n    } else {\n      return [ \"c\", m.dtype ]\n    }\n  }\n  throw new Error(\"Unrecognized data type\")\n}\n\nvar CACHE = {}\n\nfunction matrixProduct(out, a, b, alpha, beta) {\n  if(alpha === undefined) {\n    alpha = 1.0\n  }\n  if(beta === undefined) {\n    beta = 0.0\n  }\n  var useAlpha = (alpha !== 1.0)\n  var useBeta  = (beta !== 0.0)\n  var outType  = classifyType(out)\n  var aType    = classifyType(a)\n  var bType    = classifyType(b)\n\n  checkShapes(out, a, b)\n\n  var typeSig  = [ outType, aType, bType, useAlpha, useBeta ].join(\":\")\n  var proc     = CACHE[typeSig]\n  if(!proc) {\n    proc = CACHE[typeSig] = generatePlan(outType, aType, bType, useAlpha, useBeta)\n  }\n  return proc(out, a, b, alpha, beta)\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Dropout implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.ratio = attributes.getFloat('ratio', 0.5);\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected ratio: number;\n  protected testMode: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Flatten implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    if (inputs[0].dims.length === 0) {\n      return false;  // scalar tensor is not supported\n    }\n\n    if (this.axis < 0 || this.axis > inputs[0].dims.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gather implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    const tensorRank = inputs[0].dims.length;\n    if (tensorRank < 1) {\n      return false;\n    }\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Transpose} from '../../../ops/transpose';\nimport {Tensor} from '../../../tensor';\nimport {arrayCopyHelper, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuTranspose extends Transpose {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = transpose(inputs[0], this.perm);\n    return [output];\n  }\n}\n\nexport function transpose(x: Tensor, perm: number[]): Tensor {\n  const inputDims = x.dims;\n  const rank = inputDims.length;\n\n  // determine permutation to use\n  // if no permutation was specified in the attributes,\n  // the default is [rank-1, ..., 0]\n  let finalPerm = new Array<number>(rank);\n  if (perm.length === rank) {\n    finalPerm = perm;\n  } else {\n    for (let i = 0; i < rank; i++) {\n      finalPerm[i] = rank - i - 1;\n    }\n  }\n\n  const outputDims = new Array<number>(rank);\n  const stride = new Array<number>(rank);\n\n  // determine shape of output, as well as stride to be used\n  // stride[i] indicates the stride for the input-tensor dimension\n  // corresponding to the i-th dimension of the output\n  for (let i = 0; i < rank; i++) {\n    const inpDim = finalPerm[i];\n    outputDims[i] = inputDims[inpDim];\n    if (inpDim + 1 < rank) {\n      stride[i] = ShapeUtil.sizeFromDimension(inputDims, inpDim + 1);\n    } else {\n      stride[i] = 1;\n    }\n  }\n\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.floatData;\n  const Y = output.floatData;\n\n  // partition the permutation into a prefix and the largest suffix such that\n  // every axis i in the suffix is mapped to i.\n  let numAxesInPrefix = 0;  // number of axes in prefix\n  let suffixBlocksize = 1;  // product of dimensions in the suffix\n  let prefixBlocksize = 1;  // product of dimensions in the prefix\n  let isSuffix = true;\n  for (let i = rank - 1; i >= 0; --i) {\n    const inpAxis = finalPerm[i];\n    if (isSuffix && (inpAxis === i)) {\n      suffixBlocksize *= inputDims[inpAxis];\n    } else {\n      isSuffix = false;\n      prefixBlocksize *= inputDims[inpAxis];\n      ++numAxesInPrefix;\n    }\n  }\n\n  if (prefixBlocksize === 1) {\n    doTransposeSingleBlock(suffixBlocksize, Y, X);\n  } else if (suffixBlocksize === 1) {\n    doTransposeEltWise(numAxesInPrefix, outputDims, prefixBlocksize, stride, Y, X);\n  } else {\n    doTranspose(numAxesInPrefix, outputDims, prefixBlocksize, suffixBlocksize, stride, Y, X);\n  }\n\n  return output;\n}\n\n// doTranspose: copies source tensor to target, transposing elements.\n// the stride vector indicates the transposition.\nfunction doTranspose(\n    numAxes: number, targetDims: number[], numBlocks: number, numElementsInBlock: number, stride: number[],\n    target: Tensor.FloatType, source: Tensor.FloatType) {\n  const targetIndex = new Array<number>(numAxes).fill(0);\n\n  const startSourceIndex = 0;\n  let startTargetIndex = 0;\n\n  for (let i = 0; i < numBlocks; ++i) {\n    const sizeOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\n    arrayCopyHelper(target, source, startTargetIndex, startSourceIndex + sizeOffset, numElementsInBlock);\n\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\n    startTargetIndex += numElementsInBlock;\n  }\n}\n\n// doTransposeEltWise: specialization of DoTranspose for the\n// num_elts_in_block=1 case. copies source tensor to target, transposing\n// elements. The stride vector indicates the transposition.\nfunction doTransposeEltWise(\n    numAxes: number, targetDims: number[], numBlocks: number, stride: number[], target: Tensor.FloatType,\n    source: Tensor.FloatType) {\n  const targetIndex = new Array<number>(numAxes).fill(0);\n\n  let startTargetIndex = 0;\n\n  for (let i = 0; i < numBlocks; ++i) {\n    const sourceOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\n    target[startTargetIndex++] = source[sourceOffset];\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\n  }\n}\n\n// doTransposeSingleBlock: specialization of DoTranspose for the num_blocks=1\n// case. copies source tensor to target, transposing elements. The stride\n// vector indicates the transposition.\nfunction doTransposeSingleBlock(numElementsInBlock: number, target: Tensor.FloatType, source: Tensor.FloatType) {\n  arrayCopyHelper(target, source, 0, 0, numElementsInBlock);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Transpose implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.perm = attributes.getInts('perm', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected perm: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ImageScaler implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.scale = attributes.getFloat('scale');\n    this.bias = attributes.getFloats('bias');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected scale: number;\n  protected bias: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class InstanceNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 3) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ReduceBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes', []);\n    this.keepDims = attributes.getInt('keepdims', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n  protected keepDims: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Reshape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[1].type !== 'int32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Slice implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.starts = attributes.getInts('starts');\n    this.ends = attributes.getInts('ends');\n    this.axes = attributes.getInts('axes', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n    return true;\n  }\n\n  protected axes: number[];\n  protected ends: number[];\n  protected starts: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Squeeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Tile implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    if (inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class UnaryOp implements Operator {\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.attributes = attributes;\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected attributes: Attribute;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Unsqueeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Clip implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected min: number;\n  protected max: number;\n}\n","/*!\n * Platform.js <https://mths.be/platform>\n * Copyright 2014-2018 Benjamin Tan <https://bnjmnt4n.now.sh/>\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object. */\n  var oldRoot = root;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Regular expression to detect Opera. */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object. */\n  var thisBinding = this;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values. */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // Platform tokens are defined at:\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '10.0': '10',\n      '6.4':  '10 Technical Preview',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // Detect Windows version from platform tokens.\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\n        (data = data[/[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // Correct character case and cleanup string.\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object. */\n    var context = root;\n\n    /** Used to flag when a custom context is provided. */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // Juggle arguments.\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object. */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string. */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome. */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts. */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environments. */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino. */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha. */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta. */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object. */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]`. */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime. */\n    var data;\n\n    /** The CPU architecture. */\n    var arch = ua;\n\n    /** Platform description array. */\n    var description = [];\n\n    /** Platform alpha/beta indicator. */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform. */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version. */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important). */\n    var layout = getLayout([\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important). */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Electron',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      { 'label': 'Microsoft Edge', 'pattern': 'Edge' },\n      'Midori',\n      'Nook Browser',\n      'PaleMoon',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'Sunrise',\n      'Swiftfox',\n      'Waterfox',\n      'WebPositive',\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chrome',\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important). */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },\n      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },\n      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },\n      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },\n      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nexus',\n      'Nook',\n      'PlayBook',\n      'PlayStation Vita',\n      'PlayStation',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers. */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Archos': {},\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 }\n    });\n\n    /* Detectable operating systems (order is important). */\n    var os = getOS([\n      'Windows Phone',\n      'Android',\n      'CentOS',\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\n      'Debian',\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'OpenBSD',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Tizen',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\n        return result || (\n          value[product] ||\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + ' *\\\\w+-[\\\\w]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // Split by forward slash and append product version if needed.\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // Correct character case and cleanup string.\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Convert layout to an array so we can add extra details.\n    layout && (layout = [layout]);\n\n    // Detect product names that contain their manufacturer's name.\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    }\n    // Clean up Google TV.\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // Detect simulators.\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // Detect IE Mobile 11.\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\n      data = parse(ua.replace(/like iPhone OS/, ''));\n      manufacturer = data.manufacturer;\n      product = data.product;\n    }\n    // Detect iOS.\n    else if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // Detect Kubuntu.\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // Detect Android browsers.\n    else if ((manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // Detect Silk desktop/accelerated modes.\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // Detect PaleMoon identifying as Firefox.\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n      description.push('identifying as Firefox ' + data[1]);\n    }\n    // Detect Firefox OS and products running Firefox.\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n      os || (os = 'Firefox OS');\n      product || (product = data[1]);\n    }\n    // Detect false positives for Firefox/Safari.\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // Escape the `/` for Firefox 1.\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // Clear name of false positives.\n        name = null;\n      }\n      // Reassign a generic name.\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // Add Chrome version to description for Electron.\n    else if (name == 'Electron' && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n      description.push('Chromium ' + data);\n    }\n    // Detect non-Opera (Presto-based) versions (order is important).\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$))',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // Detect stubborn layout engines.\n    if ((data =\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\n        )) {\n      layout = [data];\n    }\n    // Detect Windows Phone 7 desktop mode.\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // Detect Windows Phone 8.x desktop mode.\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8.x';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // Detect IE 11 identifying as other browsers.\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (name) {\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\n      }\n      name = 'IE';\n      version = data[1];\n    }\n    // Leverage environment features.\n    if (useFeatures) {\n      // Detect server-side environments.\n      // Rhino has a global function while others have a global object.\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (rhino) {\n          try {\n            version = context.require('ringo/engine').version.join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if ((data = context.system) && data.global.system == context.system) {\n              name = 'Narwhal';\n              os || (os = data[0].os || null);\n            }\n          }\n          if (!name) {\n            name = 'Rhino';\n          }\n        }\n        else if (\n          typeof context.process == 'object' && !context.process.browser &&\n          (data = context.process)\n        ) {\n          if (typeof data.versions == 'object') {\n            if (typeof data.versions.electron == 'string') {\n              description.push('Node ' + data.versions.node);\n              name = 'Electron';\n              version = data.versions.electron;\n            } else if (typeof data.versions.nw == 'string') {\n              description.push('Chromium ' + version, 'Node ' + data.versions.node);\n              name = 'NW.js';\n              version = data.versions.nw;\n            }\n          }\n          if (!name) {\n            name = 'Node.js';\n            arch = data.arch;\n            os = data.platform;\n            version = /[\\d.]+/.exec(data.version);\n            version = version ? version[0] : null;\n          }\n        }\n      }\n      // Detect Adobe AIR.\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // Detect PhantomJS.\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // Detect IE compatibility modes.\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // We're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode.\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      // Detect IE 11 masking as other browsers.\n      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\\b/.test(name)) {\n        description.push('masking as ' + name + ' ' + version);\n        name = 'IE';\n        version = '11.0';\n        layout = ['Trident'];\n        os = 'Windows';\n      }\n      os = os && format(os);\n    }\n    // Detect prerelease phases.\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // Detect Firefox Mobile.\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // Obscure Maxthon's unreliable version.\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // Detect Xbox 360 and Xbox One.\n    else if (/\\bXbox\\b/i.test(product)) {\n      if (product == 'Xbox 360') {\n        os = null;\n      }\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // Add mobile postfix.\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // Detect IE platform preview.\n    else if (name == 'IE' && useFeatures) {\n      try {\n        if (context.external === null) {\n          description.unshift('platform preview');\n        }\n      } catch(e) {\n        description.unshift('embedded');\n      }\n    }\n    // Detect BlackBerry OS version.\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // Detect Opera identifying/masking itself as another browser.\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && product != 'Wii' && (\n          (useFeatures && opera) ||\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n          (name == 'IE' && (\n            (os && !/^Win/.test(os) && version > 5.5) ||\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\n            version == 8 && !/\\bTrident\\b/.test(ua)\n          ))\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // When \"masking\", the UA contains only the other browser's name.\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // Correct build number for numeric comparison.\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // Nightly builds are postfixed with a \"+\".\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // Clear incorrect browser versions.\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // Use the full Chrome version when available.\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // Detect Blink layout engine.\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\n        layout = ['Blink'];\n      }\n      // Detect JavaScriptCore.\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // Obscure version for some Safari 1-2 releases.\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      }\n    }\n    // Detect Opera desktop modes.\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // Detect Chrome desktop mode.\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // Strip incorrect OS versions.\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // Add layout engine.\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(name) && layout[1])) {\n      // Don't add layout details to description if they are falsey.\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // Combine contextual information.\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // Append manufacturer to description.\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // Append product to description.\n    if (product) {\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\n    }\n    // Parse the OS into an object.\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // Add browser/OS architecture.\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n    // Chrome 39 and above on OS X is always 64-bit.\n    else if (\n        os && /^OS X/.test(os.family) &&\n        name == 'Chrome' && parseFloat(version) >= 39\n    ) {\n      os.architecture = 64;\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\n       * \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export platform.\n  var platform = parse();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose platform on the global object to prevent errors when platform is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    root.platform = platform;\n\n    // Define as an anonymous module so platform can be aliased through path mapping.\n    define(function() {\n      return platform;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for CommonJS support.\n    forOwn(platform, function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  else {\n    // Export to the global object.\n    root.platform = platform;\n  }\n}.call(this));\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  channelType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  channelType: number;\n  channelSize: number;\n  constructor(channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = WebGL2RenderingContext.R32F;\n      this.format = WebGL2RenderingContext.RED;\n      this.channelType = WebGL2RenderingContext.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = WebGL2RenderingContext.RGBA32F;\n      this.format = WebGL2RenderingContext.RGBA;\n      this.channelType = WebGL2RenderingContext.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloat32DataEncoder implements DataEncoder {\n  internalFormat: number = WebGLRenderingContext.RGBA;\n  format: number = WebGLRenderingContext.RGBA;\n  channelType: number = WebGLRenderingContext.FLOAT;\n  channelSize: number;\n  constructor(channels = 1) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.channelSize = channels;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support only for half-float textures\n */\nexport class Float16DataEncoder implements DataEncoder {\n  internalFormat: number = WebGLRenderingContext.RGBA;\n  format: number = WebGLRenderingContext.RGBA;\n  channelType: number;\n  channelSize = 4;\n\n  constructor(gl: WebGLRenderingContext) {\n    const ext = gl.getExtension('OES_texture_half_float');\n    if (!ext) {\n      throw new Error('WebGL extension \"OES_texture_half_float\" is not supported');\n    }\n    this.channelType = ext.HALF_FLOAT_OES;\n  }\n\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    throw new Error('Method not implemented.');\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    throw new Error('Method not implemented.');\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    throw new Error('Method not implemented.');\n  }\n}\n/**\n * Data encoder for WebGL 1 with not support only for floating point textures\n */\nexport class WebGl2Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  channelType: number;\n  channelSize = 4;\n  constructor(channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = WebGL2RenderingContext.R8UI;\n      this.format = WebGL2RenderingContext.RGBA_INTEGER;\n      this.channelType = WebGL2RenderingContext.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = WebGL2RenderingContext.RGBA8UI;\n      this.format = WebGL2RenderingContext.RGBA_INTEGER;\n      this.channelType = WebGL2RenderingContext.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length / this.channelSize);\n  }\n}\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  channelType: number;\n  channelSize = 4;\n  constructor(channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = WebGLRenderingContext.ALPHA;\n      this.format = WebGLRenderingContext.ALPHA;  // not tested\n      this.channelType = WebGLRenderingContext.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = WebGLRenderingContext.RGBA;\n      this.format = WebGLRenderingContext.RGBA;\n      this.channelType = WebGLRenderingContext.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer.constructor === Uint8Array) {\n      return buffer.subarray(0, dataSize) as Uint8Array;\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:use-named-parameter\n\nimport {Tensor as InternalTensor} from '../tensor';\nimport {Tensor as TensorInterface} from './tensor';\n\nimport * as Utils from './tensor-impl-utils';\n\ntype DataType = TensorInterface.DataType;\ntype Type = TensorInterface.Type;\ntype ElementType = TensorInterface.ElementType;\n\nexport class Tensor implements TensorInterface {\n  internalTensor: InternalTensor;\n  constructor(data: DataType|number[]|boolean[], type: Type, dims?: ReadonlyArray<number>) {\n    const inferredDims = dims ? dims : [data.length];\n    if (data.length === 0) {\n      throw new RangeError(`Tensor data should contain at least one element.`);\n    }\n    // convert regular arrays to typeArrays\n    if (Array.isArray(data) && type !== 'string') {\n      if (type === 'float32') {\n        // convert number[] to Float32Array\n        this.data = Float32Array.from(data as number[]);\n      } else if (type === 'bool') {\n        // convert boolean[] to Uint8Array\n        this.data = Uint8Array.from(data as number[]);\n      } else if (type === 'int32') {\n        // convert number[] to Int32Array\n        this.data = Int32Array.from(data as number[]);\n      }\n    } else {\n      this.data = data as DataType;\n    }\n\n    this.dims = inferredDims;\n    this.type = type;\n    this.internalTensor = new InternalTensor(this.dims, this.type, undefined, undefined, this.data);\n    this.size = this.internalTensor.size;\n  }\n\n  dims: ReadonlyArray<number>;\n  type: Type;\n  size: number;\n  data: DataType;\n  get(...indices: number[]): ElementType;\n  get(indices: ReadonlyArray<number>): ElementType;\n  get(indices?: ReadonlyArray<number>|number, ...rest: number[]): ElementType {\n    let flatIndices = 0;\n    let indexArray: number[] = [];\n    if (typeof arguments[0] === 'number') {\n      indexArray = [arguments[0], ...rest];\n    } else if (arguments[0]) {\n      indexArray = arguments[0];\n    } else {\n      throw new Error(`Input index array is undefined. `);\n    }\n    // check dims\n    Utils.validateIndices(indexArray);\n    if (indexArray.length !== this.dims.length) {\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\n    }\n    // compute the flattened index\n    indexArray.forEach((dim: number, idx: number) => {\n      if (dim >= this.dims[idx]) {\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\n      }\n      flatIndices += idx < indexArray.length - 1 ? dim * this.dims.slice(idx + 1).reduce((a, b) => a * b) : dim;\n    });\n    if (this.type === 'bool') {\n      return this.data[flatIndices] === 1 ? true : false;\n    }\n    return this.data[flatIndices];\n  }\n  set(value: ElementType, ...indices: number[]): void;\n  set(value: ElementType, indices: ReadonlyArray<number>): void;\n  set(value: ElementType, indices?: ReadonlyArray<number>|number, ...rest: number[]) {\n    Utils.matchElementType(this.type, value);\n    let flatIndices = 0;\n    let indexArray: number[] = [];\n    if (typeof arguments[1] === 'number') {\n      indexArray = [arguments[1], ...rest];\n    } else if (arguments[1]) {\n      indexArray = arguments[1];\n    } else {\n      throw new Error(`Input index array is undefined.`);\n    }\n    // check dims\n    Utils.validateIndices(indexArray);\n    if (indexArray.length !== this.dims.length) {\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\n    }\n    // compute the flattened index\n    indexArray.forEach((dim: number, idx: number) => {\n      if (dim >= this.dims[idx]) {\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\n      }\n      flatIndices += idx < indexArray.length - 1 ? dim * this.dims.slice(idx + 1).reduce((a, b) => a * b) : dim;\n    });\n\n    if (typeof value === 'boolean') {\n      this.data[flatIndices] = value ? 1 : 0;\n    } else if (typeof value === 'string') {\n      this.data[flatIndices] = value;\n    } else if (ArrayBuffer.isView(this.data)) {\n      this.data.set([value], flatIndices);\n    } else {\n      throw new TypeError(`Value type is not supported. `);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Tensor as InternalTensor} from '../tensor';\nimport {Tensor as TensorInterface} from './tensor';\nimport {Tensor as ApiTensor} from './tensor-impl';\n\nexport function fromInternalTensor(internalTensor: InternalTensor): ApiTensor {\n  switch (internalTensor.type) {\n    case 'bool':\n      return new ApiTensor(new Uint8Array(internalTensor.integerData), 'bool', internalTensor.dims);\n    case 'float32':\n      return new ApiTensor(internalTensor.floatData as Float32Array, 'float32', internalTensor.dims);\n    case 'float64':\n      return new ApiTensor(new Float32Array(internalTensor.floatData), 'float32', internalTensor.dims);\n    case 'string':\n      return new ApiTensor(internalTensor.stringData, 'string', internalTensor.dims);\n    case 'int8' || 'uint8' || 'int16' || 'uint16' || 'uint32':\n      return new ApiTensor(new Int32Array(internalTensor.integerData), 'int32', internalTensor.dims);\n    case 'int32':\n      return new ApiTensor(internalTensor.integerData as Int32Array, 'int32', internalTensor.dims);\n    default:\n      throw new TypeError('Tensor type is not supported. ');\n  }\n}\n\nexport function toInternalTensor(tensor: ApiTensor): InternalTensor {\n  return new InternalTensor(tensor.dims, tensor.type, undefined, undefined, tensor.data);\n}\n\nexport function matchElementType(type: TensorInterface.Type, element: TensorInterface.ElementType) {\n  switch (typeof element) {\n    case 'string':\n      if (type !== 'string') {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      break;\n    case 'number':\n      if (type !== 'float32' && type !== 'int32') {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      if (type === 'float32' && Number.isInteger(element)) {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      if (type === 'int32' && !Number.isInteger(element)) {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      break;\n    case 'boolean':\n      if (type !== 'bool') {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      break;\n    default:\n      throw new TypeError(`The new element type is not supported.`);\n  }\n}\n\nexport function validateIndices(indices: ReadonlyArray<number>) {\n  if (indices.length < 0 || indices.length > 6) {\n    throw new RangeError(`Only rank 0 to 6 is supported for tensor shape.`);\n  }\n  for (const n of indices) {\n    if (!Number.isInteger(n)) {\n      throw new TypeError(`Invalid index: ${n} is not an integer`);\n    }\n    if (n < 0 || n > 2147483647) {\n      throw new TypeError(`Invalid index: length ${n} is not allowed`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {CpuBackend} from '../backends/backend-cpu';\nimport {WasmBackend} from '../backends/backend-wasm';\nimport {WebGLBackend} from '../backends/backend-webgl';\n\nimport {Environment} from './env';\nimport {envImpl} from './env-impl';\nimport {Backend} from './onnx';\n\nexport * from './env';\nexport * from './onnx';\nexport * from './tensor';\nexport * from './inference-session';\n\nexport const backend: Backend = {\n  cpu: new CpuBackend(),\n  wasm: new WasmBackend(),\n  webgl: new WebGLBackend()\n};\n\nexport const ENV: Environment = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend as BackendInterface} from '../api/onnx';\nimport {Backend, SessionHandler} from '../backend';\nimport {Session} from '../session';\n\nimport {CpuSessionHandler} from './cpu/session-handler';\n\ntype CpuOptions = BackendInterface.CpuOptions;\n\nexport class CpuBackend implements Backend, CpuOptions {\n  disabled?: boolean;\n\n  initialize(): boolean {\n    return true;\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new CpuSessionHandler(this, context);\n  }\n  dispose(): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\n\nimport {CpuInferenceHandler} from './inference-handler';\nimport {CPU_OP_RESOLVE_RULES} from './op-resolve-rules';\n\nexport class CpuSessionHandler implements SessionHandler {\n  constructor(readonly backend: Backend, readonly context: Session.Context) {}\n\n  createInferenceHandler(): InferenceHandler {\n    return new CpuInferenceHandler(this, this.context.profiler);\n  }\n\n  dispose(): void {}\n\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\n    const op = resolveOperator(node, opsets, CPU_OP_RESOLVE_RULES);\n    op.initialize(node.attributes);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InferenceHandler} from '../../backend';\nimport {Profiler} from '../../instrument';\n\nimport {CpuSessionHandler} from './session-handler';\n\nexport class CpuInferenceHandler implements InferenceHandler {\n  constructor(public readonly session: CpuSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\n\n  dispose(): void {}\n}\n","import {ArgMax} from '../../../ops/argMax';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ReduceUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuArgMax extends ArgMax {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = argMax(inputs[0], this.axis, this.keepDims);\n    return [output];\n  }\n}\n\nexport function argMax(x: Tensor, axis: number, keepdims: number): Tensor {\n  const rank = x.dims ? x.dims.length : 1;\n  axis = ShapeUtil.parseAxis(axis, rank);\n  const outputDims = ReduceUtil.calcReduceShape(x.dims.slice(0), [axis], 1);\n  const X = x.data;\n  const Y = new Int32Array(ShapeUtil.size(outputDims));\n  const blockSize = axis >= x.dims.length ? 1 : ShapeUtil.size(x.dims.slice(axis + 1));\n  const strides = ShapeUtil.computeStrides(outputDims);\n  const inputStrides = ShapeUtil.computeStrides(x.dims);\n  const indicesY = new Array(x.dims.length);\n  for (let i = 0; i < Y.length; i++) {\n    const indices = ShapeUtil.offsetToIndices(i, strides);\n    // map index\n    BroadcastUtil.fillIndex(indices, x.dims, indicesY);\n    const offset = ShapeUtil.indicesToOffset(indicesY, inputStrides);\n    let max = x.data[offset];\n    let index = 0;\n    for (let j = 0; j < x.dims[axis]; ++j) {\n      const value = X[offset + j * blockSize];\n      if (value > max) {\n        max = value;\n        index = j;\n      }\n    }\n    Y[i] = index;\n  }\n\n  return new Tensor(\n      keepdims ? outputDims : ReduceUtil.calcReduceShape(x.dims.slice(0), [axis], keepdims), 'int32', undefined,\n      undefined, Y);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ArgMax implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n    this.keepDims = attributes.getInt('keepdims', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n  protected keepDims: number;\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","\"use strict\"\n\nvar createThunk = require(\"./lib/thunk.js\")\n\nfunction Procedure() {\n  this.argTypes = []\n  this.shimArgs = []\n  this.arrayArgs = []\n  this.arrayBlockIndices = []\n  this.scalarArgs = []\n  this.offsetArgs = []\n  this.offsetArgIndex = []\n  this.indexArgs = []\n  this.shapeArgs = []\n  this.funcName = \"\"\n  this.pre = null\n  this.body = null\n  this.post = null\n  this.debug = false\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure()\n  \n  //Parse blocks\n  proc.pre    = user_args.pre\n  proc.body   = user_args.body\n  proc.post   = user_args.post\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0)\n  proc.argTypes = proc_args\n  for(var i=0; i<proc_args.length; ++i) {\n    var arg_type = proc_args[i]\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\n      proc.argTypes[i] = \"array\"\n      proc.arrayArgs.push(i)\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\n      proc.shimArgs.push(\"array\" + i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\n        throw new Error(\"cwise: pre() block may not reference array args\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\n        throw new Error(\"cwise: post() block may not reference array args\")\n      }\n    } else if(arg_type === \"scalar\") {\n      proc.scalarArgs.push(i)\n      proc.shimArgs.push(\"scalar\" + i)\n    } else if(arg_type === \"index\") {\n      proc.indexArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\")\n      }\n    } else if(arg_type === \"shape\") {\n      proc.shapeArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\")\n      }\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\"\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\n      proc.offsetArgIndex.push(i)\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\n    }\n  }\n  \n  //Make sure at least one array argument was specified\n  if(proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\")\n  }\n  \n  //Make sure arguments are correct\n  if(proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\")\n  }\n  if(proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\")\n  }\n  if(proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\")\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug\n  \n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\"\n  \n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64\n\n  return createThunk(proc)\n}\n\nmodule.exports = compileCwise\n","\"use strict\"\n\n// The function below is called when constructing a cwise function object, and does the following:\n// A function object is constructed which accepts as argument a compilation function and returns another function.\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\n// The compilation passed to the first function object is used for compiling new functions.\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\n// So createThunk roughly works like this:\n// function createThunk(proc) {\n//   var thunk = function(compileBound) {\n//     var CACHED = {}\n//     return function(arrays and scalars) {\n//       if (dtype and order of arrays in CACHED) {\n//         var func = CACHED[dtype and order of arrays]\n//       } else {\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\n//       }\n//       return func(arrays and scalars)\n//     }\n//   }\n//   return thunk(compile.bind1(proc))\n// }\n\nvar compile = require(\"./compile.js\")\n\nfunction createThunk(proc) {\n  var code = [\"'use strict'\", \"var CACHED={}\"]\n  var vars = []\n  var thunkName = proc.funcName + \"_cwise_thunk\"\n  \n  //Build thunk\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"))\n  var typesig = []\n  var string_typesig = []\n  var proc_args = [[\"array\",proc.arrayArgs[0],\".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\n                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(\",\"+proc.arrayBlockIndices[0]+\")\"):\")\"].join(\"\")]\n  var shapeLengthConditions = [], shapeConditions = []\n  // Process array arguments\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    var j = proc.arrayArgs[i]\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\",\n               \"r\", j, \"=array\", j, \".order\"].join(\"\"))\n    typesig.push(\"t\" + j)\n    typesig.push(\"r\" + j)\n    string_typesig.push(\"t\"+j)\n    string_typesig.push(\"r\"+j+\".join()\")\n    proc_args.push(\"array\" + j + \".data\")\n    proc_args.push(\"array\" + j + \".stride\")\n    proc_args.push(\"array\" + j + \".offset|0\")\n    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[i]) + \"]\")\n    }\n  }\n  // Check for shape equality\n  if (proc.arrayArgs.length > 1) {\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\")\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\")\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\")\n    code.push(\"}\")\n  }\n  // Process scalar arguments\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    proc_args.push(\"scalar\" + proc.scalarArgs[i])\n  }\n  // Check for cached function (and if not present, generate it)\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"))\n  vars.push(\"proc=CACHED[type]\")\n  code.push(\"var \" + vars.join(\",\"))\n  \n  code.push([\"if(!proc){\",\n             \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\",\n             \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"))\n\n  if(proc.debug) {\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  //Compile thunk\n  var thunk = new Function(\"compile\", code.join(\"\\n\"))\n  return thunk(compile.bind(undefined, proc))\n}\n\nmodule.exports = createThunk\n","\"use strict\"\n\nvar uniq = require(\"uniq\")\n\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\nfunction innerFill(order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , has_index = proc.indexArgs.length>0\n    , code = []\n    , vars = []\n    , idx=0, pidx=0, i, j\n  for(i=0; i<dimension; ++i) { // Iteration variables\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\n  }\n  //Compute scan deltas\n  for(j=0; j<nargs; ++j) {\n    for(i=0; i<dimension; ++i) {\n      pidx = idx\n      idx = order[i]\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\n      }\n    }\n  }\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }  \n  //Scan loop\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\n    idx = order[i]\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\n  }\n  //Push body of inner loop\n  code.push(body)\n  //Advance scan pointers\n  for(i=0; i<dimension; ++i) {\n    pidx = idx\n    idx = order[i]\n    for(j=0; j<nargs; ++j) {\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\n    }\n    if(has_index) {\n      if(i > 0) {\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\n      }\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\n    }\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\nfunction outerFill(matched, order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , blockSize = proc.blockSize\n    , has_index = proc.indexArgs.length > 0\n    , code = []\n  for(var i=0; i<nargs; ++i) {\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\n  }\n  //Generate loops for unmatched dimensions\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n  for(var i=matched; i<dimension; ++i) {\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\n    code.push([\"j\",i,\"=0\"].join(\"\"))\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\n    if(has_index) {\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\n    }\n  }\n  for(var i=0; i<nargs; ++i) {\n    var indexStr = [\"offset\"+i]\n    for(var j=matched; j<dimension; ++j) {\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\n    }\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\n  }\n  code.push(innerFill(order, proc, body))\n  for(var i=matched; i<dimension; ++i) {\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n//Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\nfunction countMatches(orders) {\n  var matched = 0, dimension = orders[0].length\n  while(matched < dimension) {\n    for(var j=1; j<orders.length; ++j) {\n      if(orders[j][matched] !== orders[0][matched]) {\n        return matched\n      }\n    }\n    ++matched\n  }\n  return matched\n}\n\n//Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\nfunction processBlock(block, proc, dtypes) {\n  var code = block.body\n  var pre = []\n  var post = []\n  for(var i=0; i<block.args.length; ++i) {\n    var carg = block.args[i]\n    if(carg.count <= 0) {\n      continue\n    }\n    var re = new RegExp(carg.name, \"g\")\n    var ptrStr = \"\"\n    var arrNum = proc.arrayArgs.indexOf(i)\n    switch(proc.argTypes[i]) {\n      case \"offset\":\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\n        var offArg = proc.offsetArgs[offArgIndex]\n        arrNum = offArg.array\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\n      case \"array\":\n        ptrStr = \"p\" + arrNum + ptrStr\n        var localStr = \"l\" + i\n        var arrStr = \"a\" + arrNum\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\n          if(carg.count === 1) { // Argument/array used only once(?)\n            if(dtypes[arrNum] === \"generic\") {\n              if(carg.lvalue) {\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n                code = code.replace(re, localStr)\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n              } else {\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n              }\n            } else {\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n            }\n          } else if(dtypes[arrNum] === \"generic\") {\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            }\n          } else {\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\n            }\n          }\n        } else { // Argument to body is a \"block\"\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\n          }\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\n          ptrStr = ptrStrArr.join(\"+\")\n          if(dtypes[arrNum] === \"generic\") {\n            /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\n          } else {\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n          }\n        }\n      break\n      case \"scalar\":\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\n      break\n      case \"index\":\n        code = code.replace(re, \"index\")\n      break\n      case \"shape\":\n        code = code.replace(re, \"shape\")\n      break\n    }\n  }\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\n}\n\nfunction typeSummary(dtypes) {\n  var summary = new Array(dtypes.length)\n  var allEqual = true\n  for(var i=0; i<dtypes.length; ++i) {\n    var t = dtypes[i]\n    var digits = t.match(/\\d+/)\n    if(!digits) {\n      digits = \"\"\n    } else {\n      digits = digits[0]\n    }\n    if(t.charAt(0) === 0) {\n      summary[i] = \"u\" + t.charAt(1) + digits\n    } else {\n      summary[i] = t.charAt(0) + digits\n    }\n    if(i > 0) {\n      allEqual = allEqual && summary[i] === summary[i-1]\n    }\n  }\n  if(allEqual) {\n    return summary[0]\n  }\n  return summary.join(\"\")\n}\n\n//Generates a cwise operator\nfunction generateCWiseOp(proc, typesig) {\n\n  //Compute dimension\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\n  var orders = new Array(proc.arrayArgs.length)\n  var dtypes = new Array(proc.arrayArgs.length)\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    dtypes[i] = typesig[2*i]\n    orders[i] = typesig[2*i+1]\n  }\n  \n  //Determine where block and loop indices start and end\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\n  var loopOrders = [] // orders restricted to the loop indices\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    if (proc.arrayBlockIndices[i]<0) {\n      loopBegin.push(0)\n      loopEnd.push(dimension)\n      blockBegin.push(dimension)\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\n    } else {\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\n      blockBegin.push(0)\n      blockEnd.push(proc.arrayBlockIndices[i])\n    }\n    var newOrder = []\n    for(var j=0; j<orders[i].length; j++) {\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n      }\n    }\n    loopOrders.push(newOrder)\n  }\n\n  //First create arguments for procedure\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\n  var code = [\"'use strict'\"]\n  var vars = []\n  \n  for(var j=0; j<dimension; ++j) {\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    arglist.push(\"a\"+i) // Actual data array\n    arglist.push(\"t\"+i) // Strides\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\n    \n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\n    }\n    \n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\n    }\n  }\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    arglist.push(\"Y\" + i)\n  }\n  if(proc.shapeArgs.length > 0) {\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n  }\n  if(proc.indexArgs.length > 0) {\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n    var zeros = new Array(dimension)\n    for(var i=0; i<dimension; ++i) {\n      zeros[i] = \"0\"\n    }\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\n  }\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\n    var off_arg = proc.offsetArgs[i]\n    var init_string = []\n    for(var j=0; j<off_arg.offset.length; ++j) {\n      if(off_arg.offset[j] === 0) {\n        continue\n      } else if(off_arg.offset[j] === 1) {\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \n      } else {\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\n      }\n    }\n    if(init_string.length === 0) {\n      vars.push(\"q\" + i + \"=0\")\n    } else {\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\n    }\n  }\n\n  //Prepare this variables\n  var thisVars = uniq([].concat(proc.pre.thisVars)\n                      .concat(proc.body.thisVars)\n                      .concat(proc.post.thisVars))\n  vars = vars.concat(thisVars)\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    code.push(\"p\"+i+\"|=0\")\n  }\n  \n  //Inline prelude\n  if(proc.pre.body.length > 3) {\n    code.push(processBlock(proc.pre, proc, dtypes))\n  }\n\n  //Process body\n  var body = processBlock(proc.body, proc, dtypes)\n  var matched = countMatches(loopOrders)\n  if(matched < dimension) {\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n  } else {\n    code.push(innerFill(loopOrders[0], proc, body))\n  }\n\n  //Inline epilog\n  if(proc.post.body.length > 3) {\n    code.push(processBlock(proc.post, proc, dtypes))\n  }\n  \n  if(proc.debug) {\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\n  return f()\n}\nmodule.exports = generateCWiseOp\n","\"use strict\"\n\nfunction unique_pred(list, compare) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b=list[0]\n  for(var i=1; i<len; ++i) {\n    b = a\n    a = list[i]\n    if(compare(a, b)) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique_eq(list) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b = list[0]\n  for(var i=1; i<len; ++i, b=a) {\n    b = a\n    a = list[i]\n    if(a !== b) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique(list, compare, sorted) {\n  if(list.length === 0) {\n    return list\n  }\n  if(compare) {\n    if(!sorted) {\n      list.sort(compare)\n    }\n    return unique_pred(list, compare)\n  }\n  if(!sorted) {\n    list.sort()\n  }\n  return unique_eq(list)\n}\n\nmodule.exports = unique\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = batchNormalization(\n        inputs[0], inputs[1], inputs[2], inputs[3], inputs[4], this.epsilon, this.momentum, this.spatial);\n    return [output];\n  }\n}\n\nexport function batchNormalization(\n    x: Tensor, scale: Tensor, b: Tensor, mean: Tensor, variance: Tensor, epsilon: number, momentum: number,\n    spatial: number) {\n  const inputDimensions = x.dims;\n  const N = inputDimensions[0];\n  const C = inputDimensions[1];\n\n  // calculate channel size (i.e.) data points per channel\n  let channelSize = 1;\n  for (let i = 2; i < inputDimensions.length; i++) {\n    channelSize *= inputDimensions[i];\n  }\n\n  const output = new Tensor(x.dims, x.type);\n\n  const X = x.floatData;\n  const Y = output.floatData;\n  const scaleData = scale.numberData;\n  const bData = b.numberData;\n  const meanData = mean.numberData;\n  const varianceData = variance.numberData;\n\n  for (let nc = 0; nc < N * C; nc++) {\n    const offset = nc * channelSize;\n    for (let i = 0; i < channelSize; i++) {\n      Y[offset + i] =\n          scaleData[nc % C] * ((X[offset + i] - meanData[nc % C]) / Math.sqrt(varianceData[nc % C] + epsilon)) +\n          bData[nc % C];\n    }\n  }\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport * as Util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuConcat extends Concat {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = concat(inputs, this.axis);\n    return [output];\n  }\n}\n\nexport function concat(x: Tensor[], axis: number) {\n  const input0 = x[0];\n  const inputShape = input0.dims;\n\n  if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n    throw new Error(`axis specified for concat doesn't match input dimensionality`);\n  }\n\n  if (axis < 0) {\n    axis = inputShape.length + axis;\n  }\n\n  // ensure all of the non-concatenated axes match each other\n  // along the way, calculate the shape of the output tensor\n  let concatAxisSize = inputShape[axis];\n  const outputShape = new Array<number>(inputShape.length);\n\n  for (let i = 1; i < x.length; i++) {\n    const dataN = x[i];\n    const dataNShape = dataN.dims;\n\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n      // add to the placeholder for computing output shape\n      if (axisIndex === axis) {\n        concatAxisSize += dataNShape[axisIndex];\n      }\n\n      // ensure all non-cancatenated axes match each other\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n        throw new Error(`non concat dimensions must match`);\n      }\n\n      // fill the 'outputShape' array\n      outputShape[axisIndex] = dataNShape[axisIndex];\n    }\n  }\n\n  // complete the 'outputShape' array\n  outputShape[axis] = concatAxisSize;\n\n  // main logic\n  const output = new Tensor(outputShape, input0.type);\n  const Y = output.numberData;\n\n  // the axisPitch is the number of elements to add to move\n  // to the next split axis in the output\n  let axisPitch = 1;\n  for (let i = outputShape.length - 1; i >= axis; i--) {\n    axisPitch *= outputShape[i];\n  }\n\n  let outputBase = 0;\n  for (let inputIndex = 0; inputIndex < x.length; inputIndex++) {\n    const dataN = x[inputIndex];\n\n    // the inputAxisPitch is the number of elements to add\n    // to move to the next split axis in the input\n    let inputAxisPitch = 1;\n    for (let i = dataN.dims.length - 1; i >= axis; i--) {\n      inputAxisPitch *= dataN.dims[i];\n    }\n\n    const inputData = dataN.numberData;\n    const inputSize = Util.ShapeUtil.size(dataN.dims);\n\n    // copy the data across.\n    // for every 'inputAxisPitch' values copied, we move over by\n    // the 'axisPitch'\n\n    let outputOffset = outputBase;\n\n    for (let i = 0, j = 0; i < inputSize; i++) {\n      Y[outputOffset + i] = inputData[i];\n      if (++j === inputAxisPitch) {\n        // subtract inputAxisPitch because output is being indexed by 'i'\n        outputOffset += (axisPitch - inputAxisPitch);\n        j = 0;\n      }\n    }\n    outputBase += inputAxisPitch;\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport ndarray from 'ndarray';\nimport matrixProduct from 'ndarray-gemm';\nimport nd_ops from 'ndarray-ops';\n\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuConv extends Conv {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n\n    const output = conv(\n        inputs[0], inputs[1], inputs.length === 3 ? inputs[2] : null, this.autoPad, this.dilations, this.group,\n        this.kernelShape, this.pads, this.strides);\n    return [output];\n  }\n}\n\nexport function conv(\n    x: Tensor, w: Tensor, b: Tensor|null, autoPad: string, dilations: number[], group: number, kernelShape: number[],\n    pads: number[], strides: number[]): Tensor {\n  let ndx = ndarray(x.floatData as Float32Array, x.dims.slice(0)).transpose(0, 2, 3, 1);\n  const ndk = ndarray(w.floatData as Float32Array, w.dims.slice(0)).transpose(2, 3, 1, 0);\n\n  // adjusting pads based on 'autoPad' attribute\n  PoolConvUtil.adjustPadsBasedOnAutoPad(x.dims, strides, kernelShape, pads, autoPad);\n\n  // padding if needed\n  const localPads: Array<[number, number]> = [[0, 0], [pads[0], pads[2]], [pads[1], pads[3]], [0, 0]];\n  const padTotal = localPads.reduce((s, p) => s + p[0] + p[1], 0);\n  if (padTotal !== 0) {\n    const shape: number[] = ndx.shape;\n    const newShape = shape.map((len, index) => len + localPads[index][0] + localPads[index][1]);\n    const newSize = newShape.reduce((m, v) => m * v, 1);\n    const ndp = ndarray(new Float32Array(newSize), newShape);\n    const hiPoint = localPads.map((pair, index) => newShape[index] - pair[1]);\n    const loPoint = localPads.map(pair => pair[0]);\n    const originalSlice = ndp.hi(...hiPoint).lo(...loPoint);\n    nd_ops.assign(originalSlice, ndx);\n    ndx = ndp;\n  }\n\n  const [batchSize, xRows, xCols, xChannels] = ndx.shape;\n  const [wRows, wCols, yChannels] = [ndk.shape[0], ndk.shape[1], ndk.shape[3]];\n\n  // calculate the patch view in source image's size after dilations\n  const pvRows = wRows + (wRows - 1) * (dilations[0] - 1);\n  const pvCols = wCols + (wCols - 1) * (dilations[1] - 1);\n\n  const yRows = Math.floor((xRows - pvRows + strides[0]) / strides[0]);\n  const yCols = Math.floor((xCols - pvCols + strides[1]) / strides[1]);\n\n  const ySize = batchSize * yRows * yCols * yChannels;\n  const patchSize = wRows * wCols * xChannels;\n\n  const ndf = ndarray(new Float64Array(ndk.size), [patchSize, yChannels]);\n  const patch = ndarray(new Float64Array(patchSize), [wRows, wCols, xChannels]);\n  for (let yChannel = 0; yChannel < yChannels; ++yChannel) {\n    nd_ops.assign(patch, ndk.pick(null, null, null, yChannel));\n    const reshapedPatch = ndarray(patch.data, [patchSize]);\n    nd_ops.assign(ndf.pick(null, yChannel), reshapedPatch);\n  }\n\n  const yArray = new Float64Array(ySize);\n  const pixelVec = ndarray(new Float64Array(yChannels), [1, yChannels]);\n  let offset = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    const image = ndx.pick(b, null, null, null);\n    for (let yRow = 0; yRow < yRows; ++yRow) {\n      const xRowStart = yRow * strides[0];\n      for (let yCol = 0; yCol < yCols; ++yCol) {\n        const xColStart = yCol * strides[1];\n\n        const patchView = image.hi(xRowStart + pvRows, xColStart + pvCols, xChannels)\n                              .lo(xRowStart, xColStart, 0)\n                              .step(dilations[0], dilations[1], 1);\n        nd_ops.assign(patch, patchView);\n        const pvVec = ndarray(patch.data, [1, patchSize]);\n        matrixProduct(pixelVec, pvVec, ndf);\n        yArray.set(pixelVec.data, offset);\n        offset += yChannels;\n      }\n    }\n  }\n  const ndy = ndarray(yArray, [batchSize, yRows, yCols, yChannels]);\n  const ndyTransed = ndarray(new Float32Array(ySize), [batchSize, yChannels, yRows, yCols]);\n  nd_ops.assign(ndyTransed, ndy.transpose(0, 3, 1, 2));\n  const Y = new Tensor(ndyTransed.shape, 'float32');\n  Y.floatData.set(ndyTransed.data);\n\n  // Add bias if applicable\n  if (b) {\n    const biasData = b.numberData;\n    const outputData = Y.floatData;\n    const batchSize = Y.dims[0];\n    const outputChannels = Y.dims[1];\n    const channelSize = Y.dims[2] * Y.dims[3];\n    const dataSize = outputChannels * channelSize;\n    for (let batch = 0; batch < batchSize; ++batch) {\n      for (let channel = 0; channel < outputChannels; ++channel) {\n        const offset = batch * dataSize + channel * channelSize;\n        for (let index = 0; index < channelSize; ++index) {\n          outputData[offset + index] += biasData[channel];\n        }\n      }\n    }\n  }\n\n  return Y;\n}\n","\"use strict\"\n\nmodule.exports = generateMatrixProduct\n\nvar BLOCK_SIZE = 32\n\nfunction unpackOrder(order) {\n  return order === \"r\" ? [1,0] : [0,1]\n}\n\nfunction unpackShape(name, type) {\n  if(type[1] === \"native\") {\n    return [\n      name, \"d0=\", name, \".length,\",\n      name, \"d1=\", name, \"[0].length,\"\n    ].join(\"\")\n  } else {\n    return [\n      name, \"d0=\", name, \".shape[0],\",\n      name, \"d1=\", name, \".shape[1],\",\n      name, \"s0=\", name, \".stride[0],\",\n      name, \"s1=\", name, \".stride[1],\",\n      name, \"o=\", name, \".offset,\",\n      name, \"d=\", name, \".data,\"\n    ].join(\"\")\n  }\n}\n\nfunction start(order, name, type, i, j, w) {\n  var code = []\n  if(type[1] === \"native\") {\n    if(order[0]) {\n      if(i) {\n        code.push(\"var \", name, \"p=\", name, \"[\", i, \"];\")\n      } else {\n        code.push(\"var \", name, \"p=\", name, \"[0];\")\n      }\n    }\n  } else {\n    if(i && j) {\n      if(w) {\n        code.push(\n          \"var \", name, \"t0=\", name, \"s\", order[0], \",\",\n                  name, \"t1=\", name, \"s\", order[1], \"-\", name, \"s\", order[0], \"*\", w, \",\",\n                  name, \"p=\", name, \"o+\", i, \"*\", name, \"s0+\", j, \"*\", name, \"s1;\")\n      } else {\n        code.push(\n          \"var \", name, \"t0=\", name, \"s\", order[0], \",\",\n                  name, \"p=\", name, \"o+\", i, \"*\", name, \"s0+\", j, \"*\", name, \"s1;\")\n      }\n    } else if(i) {\n      code.push(\n        \"var \", name, \"t0=\", name, \"s\", order[0], \",\",\n                name, \"p=\", name, \"o+\", i, \"*\", name, \"s0;\")\n    } else if(j) {\n      code.push(\n        \"var \", name, \"t0=\", name, \"s\", order[0], \",\",\n                name, \"p=\", name, \"o+\", j, \"*\", name, \"s1;\")\n    } else  {\n      code.push(\n        \"var \", name, \"t0=\", name, \"s\", order[0], \",\",\n                name, \"t1=\", name, \"s\", order[1], \"-\", name, \"s\", order[0], \"*\", name, \"d\", order[0], \",\",\n                name, \"p=\", name, \"o;\")\n    }\n  }\n  return code\n}\n\nfunction walk(order, name, type, d, i) {\n  var code = []\n  if(type[1] === \"native\") {\n    if(order[0] && d === 1) {\n      code.push(name, \"p=\", name, \"[\", i, \"+1]\")\n    }\n  } else {\n    code.push(name, \"p+=\", name, \"t\", d, \";\")\n  }\n  return code\n}\n\nfunction write(order, name, type, i, j, w) {\n  var code = []\n  if(type[1] === \"native\") {\n    if(order[0]) {\n      code.push(name, \"p[\", j, \"]=\", w, \";\")\n    } else {\n      code.push(name, \"[\", i, \"][\", j, \"]=\", w, \";\")\n    }\n  } else if(type[1] === \"generic\") {\n    code.push(name, \"d.set(\", name, \"p,\", w, \");\")\n  } else {\n    code.push(name, \"d[\", name, \"p]=\", w, \";\")\n  }\n  return code\n}\n\nfunction read(order, name, type, i, j) {\n  var code = []\n  if(type[1] === \"native\") {\n    if(order[0]) {\n      code.push(name, \"p[\", j, \"]\")\n    } else {\n      code.push(name, \"[\", i, \"][\", j, \"]\")\n    }\n  } else if(type[1] === \"generic\") {\n    code.push(name, \"d.get(\", name, \"p)\")\n  } else {\n    code.push(name, \"d[\", name, \"p]\")\n  }\n  return code.join(\"\")\n}\n\nfunction generateRowColumnLoop(oType, aType, bType, useAlpha, useBeta) {\n  var code = []\n  var oOrd = oType[0] === \"r\" ? [1,0] : [0,1], aOrd = [1, 0], bOrd = [0, 1]\n  var symbols = [\"i\", \"j\"]\n\n  code.push.apply(code, start(oOrd, \"o\", oType))\n  \n  if(oOrd[1]) {\n    code.push(\"for(j=0;j<od1;++j){\")\n    code.push(\"for(i=0;i<od0;++i){\")\n  } else {\n    code.push(\"for(i=0;i<od0;++i){\")\n    code.push(\"for(j=0;j<od1;++j){\")\n  }\n\n  code.push.apply(code, start(aOrd, \"a\", aType, \"i\"))\n  code.push.apply(code, start(bOrd, \"b\", bType, undefined, \"j\"))\n\n  code.push(\n      \"var r=0.0;\",\n      \"for(k=0;k<ad1;++k){\",\n      \"r+=\", \n        read(aOrd, \"a\", aType, \"i\", \"k\"), \"*\", \n        read(bOrd, \"b\", bType, \"k\", \"j\"), \";\")\n\n  //Terminate k loop\n  code.push.apply(code, walk(aOrd, \"a\", aType, 0, \"k\"))\n  code.push.apply(code, walk(bOrd, \"b\", bType, 0, \"k\"))\n  code.push(\"}\")\n\n  //Write r to output\n  if(useAlpha) {\n    code.push(\"r*=A;\")\n  }\n  if(useBeta) {\n    code.push(\"r+=B*\", read(oOrd, \"o\", oType, \"i\", \"j\"), \";\")\n  }\n  code.push.apply(code, write(oOrd, \"o\", oType, \"i\", \"j\", \"r\"))\n  \n  //Terminate j loop loop\n  code.push.apply(code, walk(oOrd, \"o\", oType, 0, symbols[1]))\n  code.push(\"}\")\n\n  //Terminate i loop\n  code.push.apply(code, walk(oOrd, \"o\", oType, 1, symbols[0]))\n  code.push(\"}\")\n\n  return code\n}\n\nfunction generateBetaPass(oType, useBeta) {\n  var code = []\n  var oOrd = oType[0] === \"r\" ? [1,0] : [0,1], symbols\n  if(useBeta) {\n    code.push(\"if(B!==1.0){\")\n  }\n  code.push.apply(code, start(oOrd, \"o\", oType))\n  if(oOrd[0]) {\n    code.push(\"for(i=0;i<od0;++i){for(j=0;j<od1;++j){\")\n    symbols = [\"i\", \"j\"]\n  } else {\n    code.push(\"for(j=0;j<od1;++j){for(i=0;i<od0;++i){\")\n    symbols = [\"j\", \"i\"]\n  }\n  if(useBeta) {\n    code.push.apply(code, write(oOrd, \"o\", oType, \"i\", \"j\", \n      \"B*\"+read(oOrd, \"o\", oType, \"i\", \"j\")))\n  } else {\n    code.push.apply(code, write(oOrd, \"o\", oType, \"i\", \"j\", \"0\"))\n  }\n  code.push.apply(code, walk(oOrd, \"o\", oType, 0, symbols[1]))\n  code.push(\"}\")\n  code.push.apply(code, walk(oOrd, \"o\", oType, 1, symbols[0]))\n  code.push(\"}\")\n  if(useBeta) {\n    code.push(\"}\")\n  }\n  return code\n}\n\nfunction generateBlockLoop(oType, aType, bType, useAlpha, useBeta) {\n  var code = []\n  var shapes = [ \"od0\", \"od1\", \"ad1\" ]\n  var oOrd = [1, 0]\n  var aOrd = [1, 0]\n  var bOrd = [0, 1]\n\n  //Do pass over output to zero it out\n  code.push.apply(code, generateBetaPass(oType, useBeta))\n\n  for(var i=0; i<3; ++i) {\n    code.push(\n      \"for(var i\", i, \"=\", shapes[i], \";i\", i, \">0;){\",\n        \"var w\", i, \"=\", BLOCK_SIZE, \";\",\n        \"if(i\", i, \"<\", BLOCK_SIZE, \"){\",\n          \"w\", i, \"=i\", i, \";\",\n          \"i\", i, \"=0;\",\n        \"}else{\",\n          \"i\", i, \"-=\", BLOCK_SIZE, \";\",\n        \"}\")\n  }\n\n  code.push.apply(code, start(oOrd, \"o\", oType, \"i0\", \"i1\", \"w1\"))\n  \n  code.push(\"for(i=0;i<w0;++i){\\\nfor(j=0;j<w1;++j){\\\nvar r=0.0;\")\n\n  code.push.apply(code, start(aOrd, \"a\", aType, \"(i0+i)\", \"i2\"))\n  code.push.apply(code, start(bOrd, \"b\", bType, \"i2\", \"(i1+j)\"))\n\n  code.push(\"for(k=0;k<w2;++k){\")\n\n  code.push(\"r+=\",\n    read(aOrd, \"a\", aType, \"(i0+i)\", \"(i2+k)\"), \"*\", \n    read(bOrd, \"b\", bType, \"(i2+k)\", \"(i1+j)\"), \";\")\n\n  //Close off k-loop\n  code.push.apply(code, walk(aOrd, \"a\", aType, 0, \"(i2+k)\"))\n  code.push.apply(code, walk(bOrd, \"b\", bType, 0, \"(i2+k)\"))\n  code.push(\"}\")\n\n  //Write r back to output array\n  var sym = \"r\"\n  if(useAlpha) {\n    sym = \"A*r\"\n  }\n  code.push.apply(code, write(oOrd, \"o\", oType, \"(i0+i)\", \"(i1+j)\", \n    sym + \"+\" + read(oOrd, \"o\", oType, \"(i0+i)\", \"(i1+j)\")))\n\n  //Close off j-loop\n  code.push.apply(code, walk(oOrd, \"o\", oType, 0, \"(i1+j)\"))\n  code.push(\"}\")\n\n  //Close off i-loop\n  code.push.apply(code, walk(oOrd, \"o\", oType, 1, \"(i0+i)\"))\n  code.push(\"}}}}\")\n\n  return code\n}\n\nfunction generateMatrixProduct(outType, aType, bType, useAlpha, useBeta) {\n  var funcName = [\"gemm\", outType[0], outType[1], \n                     \"a\", aType[0], aType[1],\n                     \"b\", bType[0], bType[1],\n                     useAlpha ? \"alpha\" : \"\",\n                     useBeta ? \"beta\" : \"\" ].join(\"\")\n  var code = [\n    \"function \", funcName, \"(o,a,b,A,B){\",\n    \"var \", unpackShape(\"o\", outType), \n            unpackShape(\"a\", aType),\n            unpackShape(\"b\", bType),\n            \"i,j,k;\"\n  ]\n\n  if(aType[0] === \"r\" && bType[0] === \"c\") {\n    code.push.apply(code, generateRowColumnLoop(outType, aType, bType, useAlpha, useBeta))\n  } else {\n    code.push.apply(code, generateBlockLoop(outType, aType, bType, useAlpha, useBeta))\n  }\n\n  code.push(\"}return \", funcName)\n\n  //Compile function\n  var proc = new Function(code.join(\"\"))\n  return proc()\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Dropout} from '../../../ops/dropout';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuDropout extends Dropout {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = dropout(inputs[0], this.ratio, this.testMode);\n    return [output];\n  }\n}\n\nexport function dropout(x: Tensor, ratio: number, isTestMode: boolean) {\n  if (!isTestMode) {\n    throw new Error('only test mode is supported');\n  }\n\n  const output = new Tensor(x.dims, x.type);\n  const X = x.floatData;\n  const Y = output.numberData;\n  Y.set(X);\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Flatten} from '../../../ops/flatten';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuFlatten extends Flatten {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = flatten(inputs[0], this.axis);\n    return [output];\n  }\n}\n\nexport function flatten(x: Tensor, axis: number): Tensor {\n  const outputDims = ShapeUtil.flattenShape(x.dims, axis);\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.numberData;\n  const Y = output.numberData;\n\n  Y.set(X);\n\n  return output;\n}\n","import {Gather} from '../../../ops/gather';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuGather extends Gather {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = gather(inputs[0], inputs[1], this.axis);\n    return [output];\n  }\n}\n\nexport function gather(x: Tensor, indices: Tensor, axis: number): Tensor {\n  axis = ShapeUtil.parseAxis(axis, x.dims.length);\n  const dims = x.dims.slice();\n  const newDims = dims.slice();\n  const indicesData = indices.data;\n  newDims[axis] = indicesData.length;\n  const dimsStrides = ShapeUtil.computeStrides(dims);\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\n  const output = new Tensor(newDims, x.type);\n  const Y = output.numberData;\n  const X = x.data;\n  for (let i = 0; i < Y.length; ++i) {\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\n    const oldLogicalIndex = newLogicalIndex.slice();\n    oldLogicalIndex[axis] = indicesData[newLogicalIndex[axis]] as number;\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\n    Y[i] = X[oldOffset] as number;\n  }\n  // calculate the output dims\n  const outputDims = dims.slice(0, axis).concat(indices.dims).concat(dims.slice(axis + 1));\n  return new Tensor(outputDims, x.type, undefined, undefined, Y);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport ndarray from 'ndarray';\nimport matrixProduct from 'ndarray-gemm';\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport * as util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nimport {binaryOp} from './binary-op';\nimport {transpose} from './transpose';\n\nexport class CpuGemm extends Gemm {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = gemm(inputs[0], inputs[1], inputs[2], this.alpha, this.beta, this.transA, this.transB);\n    return [output];\n  }\n}\n\nexport function gemm(a: Tensor, b: Tensor, c: Tensor, alpha: number, beta: number, transA: boolean, transB: boolean) {\n  let M: number;\n  let N: number;\n\n  [M, N] = util.GemmUtil.getShapeOfGemmResult(a.dims, transA, b.dims, transB, c.dims);\n\n  // Transpose if needed\n  let finalA: Tensor;\n  let finalB: Tensor;\n\n  if (transA) {\n    finalA = transpose(a, [-1]);\n  } else {\n    finalA = a;\n  }\n\n  if (transB) {\n    finalB = transpose(b, [-1]);\n  } else {\n    finalB = b;\n  }\n\n  // gemm using ndarray\n  let finalNdA: ndarray;\n  let finalNdB: ndarray;\n  let finalNdC: ndarray;\n\n  finalNdA = ndarray(finalA.floatData, finalA.dims as number[]);\n  finalNdB = ndarray(finalB.floatData, finalB.dims as number[]);\n\n  // The result will always be of the shape [M,N]\n  finalNdC = ndarray(new Float64Array(M * N), [M, N]);\n\n  matrixProduct(finalNdC, finalNdA, finalNdB, alpha, beta);\n\n  // re-convert result to 'Tensor' type\n  const output = new Tensor(finalNdC.shape, a.type);\n\n  // scale the bias data (i.e.) 'c' tensor data by 'beta'\n  for (let i = 0; i < c.floatData.length; ++i) {\n    c.floatData[i] = beta * c.floatData[i];\n  }\n\n  // Add the ndarray's gemm result with the scaled bias data\n  // Leverage exisitng binary op add with broadcast\n  // Internally add will throw an exception when no broadcast is possible\n  if (a.type === 'float32') {\n    output.floatData.set(\n        binaryOp(Tensor.fromNdarray(finalNdC, 'float32', true), c, (e1: number, e2: number) => (e1 + e2)).floatData);\n  }\n\n  // currently supports only 'float32' or 'float64'\n  else {\n    output.floatData.set(\n        binaryOp(Tensor.fromNdarray(finalNdC, 'float64', false), c, (e1: number, e2: number) => (e1 + e2)).floatData);\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ImageScaler} from '../../../ops/image-scaler';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuImageScaler extends ImageScaler {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = imageScaler(inputs[0], this.bias, this.scale);\n    return [output];\n  }\n}\n\nexport function imageScaler(x: Tensor, bias: number[], scale: number): Tensor {\n  const [N, C, H, W] = x.dims;\n  const output = new Tensor([N, C, H, W], x.type);\n  const X = x.floatData;\n  const Y = output.floatData;\n  for (let nc = 0; nc < N * C; nc++) {\n    for (let hw = 0; hw < H * W; hw++) {\n      const index = nc * H * W + hw;\n      Y[index] = X[index] * scale + bias[nc % C];\n    }\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = instanceNormalization(inputs[0], inputs[1], inputs[2], this.epsilon);\n    return [output];\n  }\n}\n\nexport function instanceNormalization(x: Tensor, scale: Tensor, b: Tensor, epsilon: number) {\n  const inputDimensions = x.dims;\n  const N = inputDimensions[0];\n  const C = inputDimensions[1];\n\n  // calculate channel size (i.e.) data points per channel\n  let channelSize = 1;\n  for (let i = 2; i < inputDimensions.length; i++) {\n    channelSize *= inputDimensions[i];\n  }\n  const output = new Tensor(x.dims, x.type);\n\n  const X = x.floatData;\n  const Y = output.floatData;\n  const scaleData = scale.numberData;\n  const bData = b.numberData;\n\n  let temp: number;\n  let mean: number;\n  let variance: number;\n  let physicalOffset: number;\n  let iterEnd: number;\n  let currentChannel: number;\n\n  for (let nc = 0; nc < N * C; nc++) {\n    physicalOffset = nc * channelSize;\n    iterEnd = physicalOffset + channelSize;\n    currentChannel = nc % C;\n\n    // compute mean for this channel\n    temp = 0;\n    for (let i = physicalOffset; i < iterEnd; ++i) {\n      temp += X[i];\n    }\n    mean = temp / channelSize;\n\n    // compute variance for this channel\n    temp = 0;\n    for (let i = physicalOffset; i < iterEnd; ++i) {\n      temp += Math.pow(X[i] - mean, 2);\n    }\n    variance = temp / channelSize;\n\n    // compute normalized value for data in this channel\n    for (let i = physicalOffset; i < iterEnd; ++i) {\n      Y[i] = scaleData[currentChannel] * ((X[i] - mean) / Math.sqrt(variance + epsilon)) + bData[currentChannel];\n    }\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Lrn} from '../../../ops/lrn';\nimport {Tensor} from '../../../tensor';\nimport * as util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuLrn extends Lrn {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = lrn(inputs[0], this.alpha, this.beta, this.bias, this.size);\n    return [output];\n  }\n}\n\nexport function lrn(x: Tensor, alpha: number, beta: number, bias: number, size: number): Tensor {\n  const N = x.dims[0];\n  const C = x.dims[1];\n  const X = x.floatData;\n  let channelSize = 1;\n\n  for (let i = 2; i < x.dims.length; ++i) {\n    channelSize *= x.dims[i];\n  }\n\n  const tensorDataSize = channelSize * C;\n\n  // create new tensor to hold the result\n  const output = new Tensor(x.dims, x.type);\n  const Y: number[] = new Array(util.ShapeUtil.size(x.dims));\n\n  // update the output with just the bias to begin with\n  for (let i = 0; i < Y.length; ++i) {\n    Y[i] = bias;\n  }\n\n  // placeholder to store padded square (i.e.) intermediate data\n  const paddedSquareSize = (C + size - 1) * channelSize;\n  const paddedSquareData = new Float64Array(paddedSquareSize);\n\n  const alphaOverSize = alpha / size;\n  const prePad = (size - 1) / 2;\n\n  // go through the images\n  for (let n = 0; n < N; ++n) {\n    // compute the padded square\n    util.MathUtil.sqr(paddedSquareData, X, prePad * channelSize, tensorDataSize * n, tensorDataSize);\n\n    // create the first channel\n    for (let c = 0; c < size; ++c) {\n      util.MathUtil.axpy(Y, paddedSquareData, tensorDataSize * n, c * channelSize, channelSize, alphaOverSize);\n    }\n\n    for (let c = 1; c < C; ++c) {\n      const scaleSliceStart = n * tensorDataSize + c * channelSize;\n\n      // copy previous scale\n      util.arrayCopyHelper(Y, Y, scaleSliceStart, scaleSliceStart - channelSize, channelSize);\n\n      // add head\n      util.MathUtil.axpy(\n          Y, paddedSquareData, scaleSliceStart, (c + size - 1) * channelSize, channelSize, alphaOverSize);\n\n      // subtract tail\n      util.MathUtil.axpy(Y, paddedSquareData, scaleSliceStart, (c - 1) * channelSize, channelSize, -alphaOverSize);\n    }\n  }\n\n  util.MathUtil.powx(Y, Y, 0, 0, util.ShapeUtil.size(x.dims), -beta);\n\n  util.MathUtil.mul(Y, X, 0, 0, util.ShapeUtil.size(x.dims));\n\n  output.floatData.set(Y);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Lrn implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 1E-4);\n    this.beta = attributes.getFloat('beta', 0.75);\n    this.bias = attributes.getFloat('bias', 1.0);\n    this.size = attributes.getInt('size');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    // input tensor must have atleast 3 dimensions\n    if (inputs[0].dims.length < 3) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n  protected beta: number;\n  protected bias: number;\n  protected size: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport ndarray from 'ndarray';\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuMatMul extends MatMul {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = matMul(inputs[0], inputs[1]);\n    return [output];\n  }\n}\n\nexport function matMul(a: Tensor, b: Tensor) {\n  let dimsA: number[];\n  let dimsB: number[];\n  [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(a.dims.slice(), b.dims.slice());\n  const mat2dShape = [dimsA[dimsA.length - 2], dimsB[dimsB.length - 1]];\n  let shape = BroadcastUtil.calcShape(dimsA, dimsB, true);\n  if (!shape) {\n    // the inputs cannot broadcast or cannot multiply\n    throw new Error(`input dimensions do not match the requirement`);\n  }\n  // make a copy and re-assign because this can be modified later\n  shape = shape.slice(0);\n  const size = ShapeUtil.size(shape);\n  const num2dMatrices = size / (mat2dShape[0] * mat2dShape[1]);\n\n  let ndA: ndarray;\n  let ndB: ndarray;\n  let ndY: ndarray;\n  let isFloat64 = false;\n  ndA = ndarray(a.floatData, dimsA);\n  ndB = ndarray(b.floatData, dimsB);\n  if (a.type === 'float64' || b.type === 'float64') {\n    ndY = ndarray(new Float64Array(size));\n    isFloat64 = true;\n  } else {\n    ndY = ndarray(new Float32Array(size));\n  }\n\n  let curPos = 0;\n  const indices = new Array<number>(shape.length);\n  const indicesA = new Array(ndA.shape.length);\n  const indicesB = new Array(ndB.shape.length);\n  for (let i = 0; i < num2dMatrices; i++) {\n    // traverse nd array at 2d level\n    let rest = i;\n    for (let j = shape.length - 3; j >= 0; j--) {\n      indices[j] = rest % shape[j];\n      rest = Math.floor(rest / shape[j]);\n    }\n    // map the \"broadcasted\" index to original ndarray index\n    BroadcastUtil.fillIndex(indices, ndA.shape, indicesA);\n    BroadcastUtil.fillIndex(indices, ndB.shape, indicesB);\n    // slice and get 2d subarrays\n    const subarrayA = shape.length === 2 ? ndA : ndA.pick(...indicesA);\n    const subarrayB = shape.length === 2 ? ndB : ndB.pick(...indicesB);\n    // multiply like conventional matrices\n    MatMul2d(subarrayA, subarrayB, ndY, curPos);\n    curPos += mat2dShape[0] * mat2dShape[1];\n  }\n  MatMulUtil.postprocessOutputShape(shape as number[], a.dims.length, b.dims.length);\n  const tensorY = new Tensor(shape, isFloat64 ? 'float64' : 'float32');\n  tensorY.floatData.set(ndY.data);\n  return tensorY;\n}\n\nfunction MatMul2d(A: ndarray, B: ndarray, Y: ndarray, startPos: number) {\n  // 2d matrix multiplication. Y[i,j] = sum(A[i, k] + B[k, j])\n  let offset = 0;\n  for (let i = 0; i < A.shape[0]; i++) {\n    for (let j = 0; j < B.shape[1]; j++) {\n      let sum = 0;\n      for (let k = 0; k < A.shape[1]; k++) {\n        sum += A.get(i, k) * B.get(k, j);\n      }\n      Y.set(startPos + offset, sum);\n      offset++;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport ndarray from 'ndarray';\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuAveragePool extends AveragePool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output =\n        averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\n    return [output];\n  }\n}\n\nexport class CpuGlobalAveragePool extends GlobalAveragePool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = globalAveragePool(inputs[0]);\n    return [output];\n  }\n}\n\nexport class CpuMaxPool extends MaxPool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\n    return [output];\n  }\n}\n\nexport class CpuGlobalMaxPool extends GlobalMaxPool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = globalMaxPool(inputs[0]);\n    return [output];\n  }\n}\n\n// Functions implementing specific pooling operations\nexport function averagePool(\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\n    strides: number[]): Tensor {\n  return pool(\n      false, input, autoPad, countIncludePad, kernelShape, pads, strides, 0, (a, b) => (a + b), (a, b) => (a / b));\n}\n\nexport function globalAveragePool(input: Tensor): Tensor {\n  return pool(true, input, 'NOTSET', false, [], [], [], 0, (a, b) => (a + b), (a, b) => (a / b));\n}\n\nexport function maxPool(\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Tensor {\n  return pool(\n      false, input, autoPad, false, kernelShape, pads, strides, Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)),\n      (a, b) => a);\n}\n\nexport function globalMaxPool(input: Tensor): Tensor {\n  return pool(\n      true, input, 'NOTSET', false, [], [], [], Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)), (a, b) => a);\n}\n\n/**\n * Perform pooling operations based on input\n * @param isGlobalOperator If true, perform global pooling.\n * @param input The input tensor.\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\n * @param kernelShape The size of the kernel along each axis.\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\n *       xi_end, the number of pixels added at the end of axis `i`.\n * @param strides Stride along each axis.\n * @param startVal The initial value to do pooling operations\n * @param processOp The operation to be performed on each element inside kernel\n * @param finalOp The operation to be performed over all elements inside kernel\n */\nexport function pool(\n    isGlobalOperator: boolean, input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[],\n    pads: number[], strides: number[], startVal: number, processOp: (a: number, b: number) => number,\n    finalOp: (a: number, b: number) => number): Tensor {\n  // adjust the shapes of input attributes\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\n\n  // calculate output shape based on input attributes.\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\n\n  const kernelSize = ShapeUtil.size(kernelShape);\n  const kernelStrides = ShapeUtil.computeStrides(kernelShape);\n  const stridesRank = kernelStrides.length;\n  const rank = outputShape.length;\n\n  // create input ndarray\n  const ndX = ndarray(input.numberData, input.dims.slice(0));\n\n  const outputSize = ShapeUtil.size(outputShape);\n  const output =\n      ndarray(input.type === 'float32' ? new Float32Array(outputSize) : new Float64Array(outputSize), outputShape);\n  const outputStride = ShapeUtil.computeStrides(outputShape);\n\n  for (let ind = 0; ind < outputSize; ind++) {\n    const curInd = ShapeUtil.offsetToIndices(ind, outputStride);\n    const startInd = curInd.slice(0);\n    const x = curInd.slice(0);\n    // calculate the start indices of kernel corresponding to current output indices\n    for (let i = 0; i < stridesRank; i++) {\n      startInd[rank - stridesRank + i] = curInd[rank - stridesRank + i] * strides[i];\n    }\n    let value = startVal;\n    let pad = 0;\n    let isPad = false;\n    // loop through elements within kernel\n    for (let i = 0; i < kernelSize; i++) {\n      const offset = ShapeUtil.offsetToIndices(i, kernelStrides);\n      isPad = false;\n      // \"Shift\" the kernel by the kernel start indices to loop through the kernel mapped to current output indices\n      for (let j = rank - stridesRank; j < rank; j++) {\n        x[j] = startInd[j] + offset[j - rank + stridesRank] - pads[j - 2];\n        // check if current indices fall in the padding area\n        if (x[j] >= input.dims[j] || x[j] < 0) {\n          pad++;\n          isPad = true;\n          break;\n        }\n      }\n      value = isPad ? value : processOp(value, ndX.get(...x));\n    }\n    value = countIncludePad ? finalOp(value, kernelSize) : finalOp(value, kernelSize - pad);\n    output.set(...curInd, value);\n  }\n\n  return Tensor.fromNdarray(output, input.type);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ReduceBase} from '../../../ops/reduce-op';\nimport {Tensor} from '../../../tensor';\nimport {ReduceUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuReduceSum extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = reduceSum(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceSumSquare extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceSumSquare(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceLogSum extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceLogSum(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceMax extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceMax(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceMin extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceMin(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceMean extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceMean(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceProd extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceProd(inputs[0], this.axes, this.keepDims);\n    return [output];\n  }\n}\n\n// Functions implementing specific reduce operations\nexport function reduceSum(input: Tensor, axes: number[], keepDims: number): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\n}\n\nexport function reduceSumSquare(input: Tensor, axes: number[], keepDims: number): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b * b, (a, b) => a + b);\n}\n\nexport function reduceLogSum(input: Tensor, axes: number[], keepDims: number): Tensor {\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\n  const length = output.floatData.length;\n  for (let i = 0; i < length; i++) {\n    output.floatData[i] = Math.log(output.floatData[i]);\n  }\n  return output;\n}\n\nexport function reduceMax(input: Tensor, axes: number[], keepDims: number): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.max(a, b));\n}\n\nexport function reduceMin(input: Tensor, axes: number[], keepDims: number): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.min(a, b));\n}\n\nexport function reduceMean(input: Tensor, axes: number[], keepDims: number): Tensor {\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\n  const outputDims = ReduceUtil.calcReduceShape(input.dims as number[], axes, keepDims);\n  const inputSize = ShapeUtil.size(input.dims);\n  const outputSize = ShapeUtil.size(outputDims);\n  const numItems = inputSize / outputSize;\n  const length = output.floatData.length;\n  for (let i = 0; i < length; i++) {\n    output.floatData[i] = output.floatData[i] / numItems;\n  }\n  return output;\n}\n\nexport function reduceProd(input: Tensor, axes: number[], keepDims: number): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a * b);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuReshape extends Reshape {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reshape(inputs[0], inputs[1]);\n    return [output];\n  }\n}\n\nexport function reshape(x: Tensor, shape: Tensor): Tensor {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(x.dims, shape.integerData);\n  const output = new Tensor(reshapedDims, x.type);\n  const Y = output.floatData;\n  Y.set(x.floatData);\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Slice} from '../../../ops/slice';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSlice extends Slice {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = slice(inputs[0], this.starts, this.ends, this.axes);\n    return [output];\n  }\n}\n\nexport function slice(x: Tensor, starts: number[], ends: number[], axes: number[]): Tensor {\n  if (axes.length === 0) {\n    axes = x.dims.slice(0).map((val, ind) => ind);\n  }\n  axes = axes.map(axis => ShapeUtil.parseAxis(axis, x.dims.length));\n  starts = starts.map((start, ind) => {\n    if (start > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.parseAxis(start, x.dims[axes[ind]]);\n  });\n  ends = ends.map((end, ind) => {\n    if (end > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.parseAxis(end, x.dims[axes[ind]]);\n  });\n  const size: number[] = [];\n  const adjustedStarts: number[] = [];\n  axes.map((val, ind) => {\n    size[val] = ends[ind] - starts[ind];\n    adjustedStarts[val] = starts[ind];\n  });\n  for (let i = 0; i < x.dims.length; i++) {\n    size[i] = size[i] || x.dims[i];\n    adjustedStarts[i] = adjustedStarts[i] || 0;\n  }\n\n  const newDimsStride = ShapeUtil.computeStrides(size);\n  const oldDimsStride = ShapeUtil.computeStrides(x.dims ? x.dims : [x.data.length]);\n  const X = x.data;\n  const output = new Tensor(size, x.type);\n  const Y = output.numberData;\n  for (let i = 0; i < Y.length; ++i) {\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStride);\n    const oldLogicalIndex = newLogicalIndex.map((idx, j) => idx + adjustedStarts[j]);\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, oldDimsStride);\n    Y[i] = X[oldOffset] as number;\n  }\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport * as util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSoftmax extends Softmax {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = softmax(inputs[0], this.axis);\n    return [output];\n  }\n}\n\nexport function softmax(x: Tensor, axis: number): Tensor {\n  const inputDimensions = x.dims;\n  const inputRank = inputDimensions.length;\n\n  const axisCorrected = util.ShapeUtil.parseAxis(axis, inputRank);\n  const N = util.ShapeUtil.sizeToDimension(inputDimensions, axisCorrected);\n  const D = util.ShapeUtil.sizeFromDimension(inputDimensions, axisCorrected);\n\n  const X = x.numberData;\n\n  const output = new Tensor(x.dims, x.type);\n  const Y = output.numberData;\n\n  for (let i = 0; i < N; i++) {\n    // find row offset\n    const offset = i * D;\n\n    // find max of each logical row\n    let max = Number.MIN_VALUE;\n    for (let j = 0; j < D; j++) {\n      if (X[offset + j] > max) {\n        max = X[offset + j];\n      }\n    }\n\n    // find normalization scale per row\n    let scale = 0;\n    for (let j = 0; j < D; j++) {\n      const value = X[offset + j] - max;\n      Y[offset + j] = Math.exp(value);\n      scale += Math.exp(value);\n    }\n\n    // perform the softmax normalization\n    for (let j = 0; j < D; j++) {\n      if (scale === 0) {\n        Y[offset + j] = 0;\n      } else {\n        Y[offset + j] /= scale;\n      }\n    }\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Squeeze} from '../../../ops/squeeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSqueeze extends Squeeze {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = squeeze(inputs[0], this.axes);\n    return [output];\n  }\n}\n\nexport function squeeze(x: Tensor, axes: number[]): Tensor {\n  const outputDims = ShapeUtil.squeezeShape(x.dims, axes);\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.numberData;\n  const Y = output.numberData;\n\n  Y.set(X);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSum extends Sum {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = sum(inputs);\n    return [output];\n  }\n}\n\nexport function sum(x: Tensor[]): Tensor {\n  const output = new Tensor(x[0].dims, x[0].type);\n  const size = x[0].floatData.length;\n  const Y = output.floatData;\n  for (let i = 0; i < x.length; i++) {\n    const arr = x[i].floatData;\n    for (let j = 0; j < size; ++j) {\n      Y[j] += arr[j];\n    }\n  }\n\n  return output;\n}\n","import {Tile} from '../../../ops/tile';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuTile extends Tile {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = tile(inputs[0], inputs[1]);\n    return [output];\n  }\n}\n\nexport function tile(x: Tensor, repeats: Tensor): Tensor {\n  const dims = x.dims ? x.dims : [x.data.length];\n  const rank = dims.length;\n  const newDims = new Array(rank);\n  for (let i = 0; i < rank; i++) {\n    newDims[i] = dims[i] * repeats.numberData[i];\n  }\n  const dimsStrides = ShapeUtil.computeStrides(dims);\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\n  const output = new Tensor(newDims, x.type);\n  const Y = output.numberData;\n  // TensorTransformUtils.createTypedArray(x.type, ShapeUtil.size(newDims));\n  const X = x.data;\n  for (let i = 0; i < Y.length; ++i) {\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\n    const oldLogicalIndex = new Array(rank);\n    for (let j = 0; j < rank; ++j) {\n      oldLogicalIndex[j] = newLogicalIndex[j] % x.dims[j];\n    }\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\n    Y[i] = X[oldOffset] as number;\n  }\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../../../attribute';\nimport {UnaryOp} from '../../../ops/unary-op';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\ntype UnaryOpCoreFunction = (input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) => void;\n\nexport class CpuUnaryOp extends UnaryOp {\n  constructor(\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private func: UnaryOpCoreFunction, resultType?: Tensor.DataType) {\n    super(typeConstraint, resultType);\n  }\n\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    // TODO:  use webpack + ts-loader + CustomTransformer\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory--\n    const output = unaryOp(inputs[0], this.func, this.attributes, this.resultType);\n    // console.log(`Unary ${output.dims}`);\n    // console.log(output.data);\n    return [output];\n  }\n}\n\nexport function unaryOp(\n    x: Tensor, func: UnaryOpCoreFunction, attributes: Attribute, resultType?: Tensor.DataType): Tensor {\n  const output = new Tensor(x.dims, resultType ? resultType : x.type);\n  const inputNumberData = x.data as Tensor.NumberType;\n  const outputNumberData = output.data as Tensor.NumberType;\n  func(inputNumberData, outputNumberData, attributes);\n  return output;\n}\n\n// specific implementations pertaining to each unary-op.\n// although this can be accomplished with an op lambda\n// that approach was found to be detrimental to performance\n// so we use this approach which involves slight code duplication\n\nexport function abs(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.abs(input[i]);\n  }\n}\n\nexport function neg(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = -input[i];\n  }\n}\n\nexport function acos(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.acos(input[i]);\n  }\n}\n\nexport function ceil(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.ceil(input[i]);\n  }\n}\n\nexport function cos(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.cos(input[i]);\n  }\n}\n\nexport function clip(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  const min = attributes.getFloat('min', -3.4028234663852886e+38);\n  const max = attributes.getFloat('max', 3.4028234663852886e+38);\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    output[i] = (value < min) ? min : (value > max) ? max : value;\n  }\n}\n\nexport function sin(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.sin(input[i]);\n  }\n}\n\nexport function tan(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.tan(input[i]);\n  }\n}\n\nexport function tanh(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.tanh(input[i]);\n  }\n}\n\nexport function exp(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.exp(input[i]);\n  }\n}\n\nexport function floor(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.floor(input[i]);\n  }\n}\n\nexport function atan(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.atan(input[i]);\n  }\n}\n\nexport function relu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.max(0, input[i]);\n  }\n}\n\nexport function leakyRelu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  const alpha = attributes.getFloat('alpha', 0.01);\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    output[i] = value >= 0 ? value : alpha * value;\n  }\n}\n\nexport function elu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  const alpha = attributes.getFloat('alpha', 1.0);\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    output[i] = value >= 0 ? value : alpha * (Math.exp(value) - 1.0);\n  }\n}\n\nexport function log(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.log(input[i]);\n  }\n}\n\nexport function sqrt(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.sqrt(input[i]);\n  }\n}\n\nexport function asin(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.asin(input[i]);\n  }\n}\n\nexport function sigmoid(input: Tensor.NumberType, output: Tensor.NumberType, attributes: Attribute) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = (1 / (1 + Math.exp(-input[i])));\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Unsqueeze} from '../../../ops/unsqueeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuUnsqueeze extends Unsqueeze {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = unsqueeze(inputs[0], this.axes);\n    return [output];\n  }\n}\n\nexport function unsqueeze(x: Tensor, axes: number[]): Tensor {\n  const outputDims = ShapeUtil.unsqueezeShape(x.dims, axes);\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.numberData;\n  const Y = output.numberData;\n\n  Y.set(X);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend as BackendInterface} from '../api/onnx';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\nimport * as wasmBinding from '../wasm-binding';\n\nimport {WasmSessionHandler} from './wasm/session-handler';\n\nexport let bindingInitPromise: Promise<void>|undefined;\n\ntype WasmOptions = BackendInterface.WasmOptions;\n\nexport class WasmBackend implements Backend, WasmOptions {\n  disabled?: boolean;\n  worker: number;\n  cpuFallback: boolean;\n  constructor() {\n    // default parameters that users can override using the onnx global object\n\n    // by default fallback to pure JS cpu ops if not resolved in wasm backend\n    this.cpuFallback = true;\n\n    // by default use 3 workers\n    // TODO: Have logic to determing optimal fallback worker numbers based on CPU cores\n    this.worker = 3;\n  }\n  async initialize(): Promise<boolean> {\n    this.checkIfNumWorkersIsValid();\n    const init = await this.isWasmSupported();\n    if (!init) {\n      return false;\n    }\n    return true;\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WasmSessionHandler(this, context, this.cpuFallback);\n  }\n  dispose(): void {}\n  checkIfNumWorkersIsValid() {\n    if (!Number.isFinite(this.worker) || Number.isNaN(this.worker)) {\n      throw new Error(`${this.worker} is not valid number of workers`);\n    }\n    if (!Number.isInteger(this.worker)) {\n      throw new Error(`${this.worker} is not an integer and hence not valid number of workers`);\n    }\n  }\n  async isWasmSupported(): Promise<boolean> {\n    try {\n      await wasmBinding.init(this.worker);\n      return true;\n    } catch (e) {\n      Logger.warning('WebAssembly', `Unable to initialize WebAssembly backend. ${e}`);\n      return false;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\ndeclare interface OnnxWasmBindingJs {\n  (self: OnnxWasmBindingJs): Promise<void>;\n\n  _malloc: (ptr: number) => number;\n  _free: (ptr: number) => void;\n\n  buffer: ArrayBuffer;\n\n  HEAP8: Int8Array;\n  HEAP16: Int16Array;\n  HEAP32: Int32Array;\n  HEAPU8: Uint8Array;\n  HEAPU16: Uint16Array;\n  HEAPU32: Uint32Array;\n  HEAPF32: Float32Array;\n  HEAPF64: Float64Array;\n}\n\n// an interface to define argument handling\nexport interface WasmCallArgumentTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  float64: number;\n  boolptr: ReadonlyArray<boolean>|Uint8Array;\n  int32ptr: ReadonlyArray<number>|Uint32Array|Int32Array|null;\n  float32ptr: ReadonlyArray<number>|Int32Array|Uint32Array|Float32Array|null;\n  float64ptr: ReadonlyArray<number>|Float64Array|null;\n}\n\n// some types related to arguments\nexport type WasmCallArgumentType = keyof WasmCallArgumentTypeMap;\nexport type WasmCallArgumentDataType = WasmCallArgumentTypeMap[WasmCallArgumentType];\n\nexport type WasmCallArgumentPass = 'in'|'out'|'inout';\n\nexport type WasmCallArgument = [WasmCallArgumentDataType, WasmCallArgumentType, WasmCallArgumentPass?];\n\n// an interface to deal with performance data related to Wasm function calls\nexport interface PerformanceData {\n  startTime?: number;\n  endTime?: number;\n\n  startTimeFunc?: number;\n  endTimeFunc?: number;\n}\n\n// some global parameters to deal with wasm binding initialization\nlet binding: OnnxWasmBindingJs|undefined;\nlet initialized = false;\nlet initializing = false;\n\n/**\n * initialize the WASM instance.\n *\n * this function should be called before any other calls to the WASM binding.\n */\nexport function init(): Promise<void> {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(`multiple calls to 'init()' detected.`);\n  }\n\n  initializing = true;\n\n  return new Promise<void>((resolve, reject) => {\n    // tslint:disable-next-line:no-require-imports\n    binding = require('../dist/onnx-wasm') as OnnxWasmBindingJs;\n    binding(binding).then(\n        () => {\n          // resolve init() promise\n          resolve();\n          initializing = false;\n          initialized = true;\n        },\n        err => {\n          initializing = false;\n          reject(err);\n        });\n  });\n}\n\n// class that deals with Wasm data interop and method calling\nexport class WasmBinding {\n  protected ptr8: number;\n  protected numBytesAllocated: number;\n  protected constructor() {\n    this.ptr8 = 0;\n    this.numBytesAllocated = 0;\n  }\n\n  /**\n   * ccall in current thread\n   * @param functionName\n   * @param params\n   */\n  ccall(functionName: string, ...params: WasmCallArgument[]): PerformanceData {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n    const startTime = now();\n\n    const offset: number[] = [];\n    const size = WasmBinding.calculateOffsets(offset, params);\n    if (size > this.numBytesAllocated) {\n      this.expandMemory(size);\n    }\n    WasmBinding.ccallSerialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\n\n    const startTimeFunc = now();\n    this.func(functionName, this.ptr8);\n    const endTimeFunc = now();\n\n    WasmBinding.ccallDeserialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\n    const endTime = now();\n\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\n  }\n\n  // raw ccall method  without invoking ccallSerialize() and ccallDeserialize()\n  // user by ccallRemote() in the web-worker\n  ccallRaw(functionName: string, data: Uint8Array): PerformanceData {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n    const startTime = now();\n\n    const size = data.byteLength;\n    if (size > this.numBytesAllocated) {\n      this.expandMemory(size);\n    }\n\n    // copy input memory (data) to WASM heap\n    binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size).set(data);\n\n    const startTimeFunc = now();\n    this.func(functionName, this.ptr8);\n    const endTimeFunc = now();\n\n    // copy Wasm heap to output memory (data)\n    data.set(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size));\n    const endTime = now();\n\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\n  }\n\n  protected func(functionName: string, ptr8: number): void {\n    // tslint:disable-next-line:no-any\n    const func = (binding as any)[functionName] as (data: number) => void;\n    func(ptr8);\n  }\n\n  static calculateOffsets(offset: number[], params: WasmCallArgument[]): number {\n    // calculate size and offset\n    let size = 4 + 4 * params.length;\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const paramData = param[0];\n      const paramType = param[1];\n      const paramPass = param[2];\n\n      let len = 0;\n      switch (paramType) {\n        case 'bool':\n        case 'int32':\n        case 'float32':\n          len = 4;\n          break;\n        case 'float64':\n          len = 8;\n          break;\n        case 'boolptr':\n          if (!paramData) {\n            // deal with nullptr\n            offset.push(0);\n            continue;\n          } else if (Array.isArray(paramData) || ArrayBuffer.isView(paramData)) {\n            len = 4 * Math.ceil(paramData.length / 4);\n          } else {\n            throw new Error(`boolptr requires boolean array or Uint8Array`);\n          }\n          break;\n        case 'int32ptr':\n        case 'float32ptr':\n          if (!paramData) {\n            // deal with nullptr\n            offset.push(0);\n            continue;\n          } else if (Array.isArray(paramData)) {\n            if (paramPass === 'inout' || paramPass === 'out') {\n              throw new TypeError(`inout/out parameters must be ArrayBufferView for ptr types.`);\n            }\n            len = paramData.length * 4;\n          } else if (ArrayBuffer.isView(paramData)) {\n            len = paramData.byteLength;\n          } else {\n            throw new TypeError(`unsupported data type in 'ccall()'`);\n          }\n          break;\n        default:\n          throw new Error(`not supported parameter type: ${paramType}`);\n      }\n\n      offset.push(size);\n      size += len;\n    }\n\n    return size;\n  }\n\n  // tranfer data parameters (in/inout) to emscripten heap for ccall()\n  static ccallSerialize(heapU8: Uint8Array, offset: number[], params: WasmCallArgument[]) {\n    const heap32 = new Int32Array(heapU8.buffer, heapU8.byteOffset);\n    const heapU32 = new Uint32Array(heapU8.buffer, heapU8.byteOffset);\n    const heapF32 = new Float32Array(heapU8.buffer, heapU8.byteOffset);\n\n    heapU32[0] = params.length;\n\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const paramData = param[0];\n      const paramType = param[1];\n      const paramPass = param[2];\n      const offset8 = offset[i];\n      const offset32 = offset8 >> 2;\n\n      heapU32[i + 1] = offset8;\n\n      if (paramPass === 'out' || offset8 === 0) {\n        continue;\n      }\n\n      switch (paramType) {\n        case 'bool':\n          heapU8[offset8] = (paramData as WasmCallArgumentTypeMap['bool']) === true ? 1 : 0;\n          break;\n        case 'int32':\n          heap32[offset32] = paramData as number;\n          break;\n        case 'float32':\n          heapF32[offset32] = paramData as number;\n          break;\n        case 'boolptr':\n          const boolArray = paramData as WasmCallArgumentTypeMap['boolptr'];\n          // This will work for both Uint8Array as well as ReadonlyArray<boolean>\n          heapU8.subarray(offset8, offset8 + boolArray.length).set(paramData as Uint8Array);\n          break;\n        case 'int32ptr':\n          const int32Array = (paramData as WasmCallArgumentTypeMap['int32ptr'])!;\n          heap32.subarray(offset32, offset32 + int32Array.length).set(int32Array);\n          break;\n        case 'float32ptr':\n          const float32Array = (paramData as WasmCallArgumentTypeMap['float32ptr'])!;\n          heapF32.subarray(offset32, offset32 + float32Array.length).set(float32Array);\n          break;\n        default:\n          throw new Error(`not supported parameter type: ${paramType}`);\n      }\n    }\n  }\n\n  // retrieve data parameters (in/inout) from emscripten heap after ccall()\n  static ccallDeserialize(buffer: Uint8Array, offset: number[], params: WasmCallArgument[]) {\n    const heapF32 = new Float32Array(buffer.buffer, buffer.byteOffset);\n    const heapU8 = new Uint8Array(buffer.buffer, buffer.byteOffset);\n\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const paramData = param[0];\n      const paramType = param[1];\n      const paramPass = param[2];\n      const offset8 = offset[i];\n      // const offset16 = offset8 >> 1;\n      const offset32 = offset8 >> 2;\n      // const offset64 = offset8 >> 3;\n\n      if (paramPass !== 'out' && paramPass !== 'inout') {\n        continue;\n      }\n\n      switch (paramType) {\n        case 'float32ptr':\n          const float32Array = (paramData as Float32Array);\n          float32Array.set(heapF32.subarray(offset32, offset32 + float32Array.length));\n          break;\n        case 'boolptr':\n          const boolArray = (paramData as Uint8Array);\n          boolArray.set(heapU8.subarray(offset8, offset8 + boolArray.length));\n          break;\n        default:\n          throw new Error(`not supported parameter type: ${paramType}`);\n      }\n    }\n  }\n\n  // function for defining memory allocation strategy\n  private expandMemory(minBytesRequired: number) {\n    // free already held memory if applicable\n    if (this.ptr8 !== 0) {\n      binding!._free(this.ptr8);\n    }\n    // current simplistic strategy is to allocate 2 times the minimum bytes requested\n    this.numBytesAllocated = 2 * minBytesRequired;\n    this.ptr8 = binding!._malloc(this.numBytesAllocated);\n    if (this.ptr8 === 0) {\n      throw new Error('Unable to allocate requested amount of memory. Failing.');\n    }\n  }\n\n  dispose(): void {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n    if (this.ptr8 !== 0) {\n      binding!._free(this.ptr8);\n    }\n  }\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  return (\nfunction(Module) {\n  Module = Module || {};\n\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module[\"arguments\"]=[];Module[\"thisProgram\"]=\"./this.program\";Module[\"quit\"]=(function(status,toThrow){throw toThrow});Module[\"preRun\"]=[];Module[\"postRun\"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof require===\"function\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+\"/\";var nodeFS;var nodePath;Module[\"read\"]=function shell_read(filename,binary){var ret;if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);ret=nodeFS[\"readFileSync\"](filename);return binary?ret:ret.toString()};Module[\"readBinary\"]=function readBinary(filename){var ret=Module[\"read\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){Module[\"thisProgram\"]=process[\"argv\"][1].replace(/\\\\/g,\"/\")}Module[\"arguments\"]=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process[\"on\"](\"unhandledRejection\",abort);Module[\"quit\"]=(function(status){process[\"exit\"](status)});Module[\"inspect\"]=(function(){return\"[Emscripten Module object]\"})}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){Module[\"read\"]=function shell_read(f){return read(f)}}Module[\"readBinary\"]=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){Module[\"arguments\"]=scriptArgs}else if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}if(typeof quit===\"function\"){Module[\"quit\"]=(function(status){quit(status)})}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}Module[\"read\"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module[\"readBinary\"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}Module[\"readAsync\"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module[\"setWindowTitle\"]=(function(title){document.title=title})}else{}var out=Module[\"print\"]||(typeof console!==\"undefined\"?console.log.bind(console):typeof print!==\"undefined\"?print:null);var err=Module[\"printErr\"]||(typeof printErr!==\"undefined\"?printErr:typeof console!==\"undefined\"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}function getNativeTypeSize(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return 4}else if(type[0]===\"i\"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}var asm2wasmImports={\"f64-rem\":(function(x,y){return x%y}),\"debugger\":(function(){debugger})};var jsCallStartIndex=1;var functionPointers=new Array(0);var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=(function(value){tempRet0=value});var getTempRet0=(function(){return tempRet0});var GLOBAL_BASE=1024;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}var JSfuncs={\"stackSave\":(function(){stackSave()}),\"stackRestore\":(function(){stackRestore()}),\"arrayToC\":(function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),\"stringToC\":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={\"string\":JSfuncs[\"stringToC\"],\"array\":JSfuncs[\"arrayToC\"]};function ccall(ident,returnType,argTypes,args,opts){function convertReturnValue(ret){if(returnType===\"string\")return Pointer_stringify(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}var ALLOC_STATIC=2;var ALLOC_NONE=4;function Pointer_stringify(ptr,length){if(length===0||!ptr)return\"\";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret=\"\";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str=\"\";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function demangle(func){return func}function demangleAll(text){var regex=/__Z[\\w\\d_]+/g;return text.replace(regex,(function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;var MIN_TOTAL_MEMORY=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module[\"buffer\"]=buffer=buf}function updateGlobalBufferViews(){Module[\"HEAP8\"]=HEAP8=new Int8Array(buffer);Module[\"HEAP16\"]=HEAP16=new Int16Array(buffer);Module[\"HEAP32\"]=HEAP32=new Int32Array(buffer);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buffer);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buffer);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buffer);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buffer);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+TOTAL_MEMORY+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")}if(!Module[\"reallocBuffer\"])Module[\"reallocBuffer\"]=(function(size){var ret;try{var oldHEAP8=HEAP8;ret=new ArrayBuffer(size);var temp=new Int8Array(ret);temp.set(oldHEAP8)}catch(e){return false}var success=_emscripten_replace_memory(ret);if(!success)return false;return ret});function enlargeMemory(){var PAGE_MULTIPLE=Module[\"usingWasm\"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;var LIMIT=2147483648-PAGE_MULTIPLE;if(HEAP32[DYNAMICTOP_PTR>>2]>LIMIT){return false}var OLD_TOTAL_MEMORY=TOTAL_MEMORY;TOTAL_MEMORY=Math.max(TOTAL_MEMORY,MIN_TOTAL_MEMORY);while(TOTAL_MEMORY<HEAP32[DYNAMICTOP_PTR>>2]){if(TOTAL_MEMORY<=536870912){TOTAL_MEMORY=alignUp(2*TOTAL_MEMORY,PAGE_MULTIPLE)}else{TOTAL_MEMORY=Math.min(alignUp((3*TOTAL_MEMORY+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=Module[\"reallocBuffer\"](TOTAL_MEMORY);if(!replacement||replacement.byteLength!=TOTAL_MEMORY){TOTAL_MEMORY=OLD_TOTAL_MEMORY;return false}updateGlobalBuffer(replacement);updateGlobalBufferViews();return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module[\"TOTAL_STACK\"]||5242880;var TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)err(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+TOTAL_MEMORY+\"! (TOTAL_STACK=\"+TOTAL_STACK+\")\");if(Module[\"buffer\"]){buffer=Module[\"buffer\"]}else{if(typeof WebAssembly===\"object\"&&typeof WebAssembly.Memory===\"function\"){Module[\"wasmMemory\"]=new WebAssembly.Memory({\"initial\":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=Module[\"wasmMemory\"].buffer}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module[\"buffer\"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}function integrateWasmJS(){var wasmTextFile=\"onnx-wasm.wast\";var wasmBinaryFile=\"onnx-wasm.wasm\";var asmjsCodeFile=\"onnx-wasm.temp.asm.js\";if(!isDataURI(wasmTextFile)){wasmTextFile=locateFile(wasmTextFile)}if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}if(!isDataURI(asmjsCodeFile)){asmjsCodeFile=locateFile(asmjsCodeFile)}var wasmPageSize=64*1024;var info={\"global\":null,\"env\":null,\"asm2wasm\":asm2wasmImports,\"parent\":Module};var exports=null;function mergeMemory(newBuffer){var oldBuffer=Module[\"buffer\"];if(newBuffer.byteLength<oldBuffer.byteLength){err(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\")}var oldView=new Int8Array(oldBuffer);var newView=new Int8Array(newBuffer);newView.set(oldView);updateGlobalBuffer(newBuffer);updateGlobalBufferViews()}function getBinary(){try{if(Module[\"wasmBinary\"]){return new Uint8Array(Module[\"wasmBinary\"])}if(Module[\"readBinary\"]){return Module[\"readBinary\"](wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module[\"wasmBinary\"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then((function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()})).catch((function(){return getBinary()}))}return new Promise((function(resolve,reject){resolve(getBinary())}))}function doNativeWasm(global,env,providedBuffer){if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\");return false}if(!(Module[\"wasmMemory\"]instanceof WebAssembly.Memory)){err(\"no native wasm Memory in use\");return false}env[\"memory\"]=Module[\"wasmMemory\"];info[\"global\"]={\"NaN\":NaN,\"Infinity\":Infinity};info[\"global.Math\"]=Math;info[\"env\"]=env;function receiveInstance(instance,module){exports=instance.exports;if(exports.memory)mergeMemory(exports.memory);Module[\"asm\"]=exports;Module[\"usingWasm\"]=true;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"],output[\"module\"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver,(function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)}))}if(!Module[\"wasmBinary\"]&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:\"same-origin\"}),info).then(receiveInstantiatedSource,(function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)}))}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module[\"asmPreload\"]=Module[\"asm\"];var asmjsReallocBuffer=Module[\"reallocBuffer\"];var wasmReallocBuffer=(function(size){var PAGE_MULTIPLE=Module[\"usingWasm\"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;size=alignUp(size,PAGE_MULTIPLE);var old=Module[\"buffer\"];var oldSize=old.byteLength;if(Module[\"usingWasm\"]){try{var result=Module[\"wasmMemory\"].grow((size-oldSize)/wasmPageSize);if(result!==(-1|0)){return Module[\"buffer\"]=Module[\"wasmMemory\"].buffer}else{return null}}catch(e){return null}}});Module[\"reallocBuffer\"]=(function(size){if(finalMethod===\"asmjs\"){return asmjsReallocBuffer(size)}else{return wasmReallocBuffer(size)}});var finalMethod=\"\";Module[\"asm\"]=(function(global,env,providedBuffer){if(!env[\"table\"]){var TABLE_SIZE=Module[\"wasmTableSize\"];if(TABLE_SIZE===undefined)TABLE_SIZE=1024;var MAX_TABLE_SIZE=Module[\"wasmMaxTableSize\"];if(typeof WebAssembly===\"object\"&&typeof WebAssembly.Table===\"function\"){if(MAX_TABLE_SIZE!==undefined){env[\"table\"]=new WebAssembly.Table({\"initial\":TABLE_SIZE,\"maximum\":MAX_TABLE_SIZE,\"element\":\"anyfunc\"})}else{env[\"table\"]=new WebAssembly.Table({\"initial\":TABLE_SIZE,element:\"anyfunc\"})}}else{env[\"table\"]=new Array(TABLE_SIZE)}Module[\"wasmTable\"]=env[\"table\"]}if(!env[\"__memory_base\"]){env[\"__memory_base\"]=Module[\"STATIC_BASE\"]}if(!env[\"__table_base\"]){env[\"__table_base\"]=0}var exports;exports=doNativeWasm(global,env,providedBuffer);assert(exports,\"no binaryen method succeeded.\");return exports});}integrateWasmJS();STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+5104;__ATINIT__.push();var STATIC_BUMP=5104;Module[\"STATIC_BASE\"]=STATIC_BASE;Module[\"STATIC_BUMP\"]=STATIC_BUMP;var tempDoublePtr=STATICTOP;STATICTOP+=16;function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+Pointer_stringify(condition)+\", at: \"+[filename?Pointer_stringify(filename):\"unknown filename\",line,func?Pointer_stringify(func):\"unknown function\"])}function ___cxa_allocate_exception(size){return _malloc(size)}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var key in EXCEPTIONS.infos){var ptr=+key;var adj=EXCEPTIONS.infos[ptr].adjusted;var len=adj.length;for(var i=0;i<len;i++){if(adj[i]===adjusted){return ptr}}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module[\"dynCall_vi\"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(setTempRet0(0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(setTempRet0(0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\"___cxa_is_pointer_type\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\"___cxa_can_catch\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted.push(thrown);return(setTempRet0(typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(setTempRet0(throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};EXCEPTIONS.last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}function ___gxx_personality_v0(){}function ___lock(){}var SYSCALLS={buffers:[null,[],[]],printChar:(function(stream,curr){var buffer=SYSCALLS.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}}),varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function flush_NO_FILESYSTEM(){var fflush=Module[\"_fflush\"];if(fflush)fflush(0);var buffers=SYSCALLS.buffers;if(buffers[1].length)SYSCALLS.printChar(1,10);if(buffers[2].length)SYSCALLS.printChar(2,10)}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function _abort(){Module[\"abort\"]()}function _llvm_trap(){abort(\"trap!\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}function ___setErrNo(value){if(Module[\"___errno_location\"])HEAP32[Module[\"___errno_location\"]()>>2]=value;return value}__ATEXIT__.push(flush_NO_FILESYSTEM);DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;var ASSERTIONS=false;Module[\"wasmTableSize\"]=41;Module[\"wasmMaxTableSize\"]=41;Module.asmGlobalArg={};Module.asmLibraryArg={\"abort\":abort,\"assert\":assert,\"enlargeMemory\":enlargeMemory,\"getTotalMemory\":getTotalMemory,\"setTempRet0\":setTempRet0,\"getTempRet0\":getTempRet0,\"abortOnCannotGrowMemory\":abortOnCannotGrowMemory,\"__ZSt18uncaught_exceptionv\":__ZSt18uncaught_exceptionv,\"___assert_fail\":___assert_fail,\"___cxa_allocate_exception\":___cxa_allocate_exception,\"___cxa_find_matching_catch\":___cxa_find_matching_catch,\"___cxa_throw\":___cxa_throw,\"___gxx_personality_v0\":___gxx_personality_v0,\"___lock\":___lock,\"___resumeException\":___resumeException,\"___setErrNo\":___setErrNo,\"___syscall140\":___syscall140,\"___syscall146\":___syscall146,\"___syscall54\":___syscall54,\"___syscall6\":___syscall6,\"___unlock\":___unlock,\"_abort\":_abort,\"_emscripten_memcpy_big\":_emscripten_memcpy_big,\"_llvm_trap\":_llvm_trap,\"flush_NO_FILESYSTEM\":flush_NO_FILESYSTEM,\"DYNAMICTOP_PTR\":DYNAMICTOP_PTR,\"tempDoublePtr\":tempDoublePtr,\"STACKTOP\":STACKTOP,\"STACK_MAX\":STACK_MAX};var asm=Module[\"asm\"](Module.asmGlobalArg,Module.asmLibraryArg,buffer);Module[\"asm\"]=asm;var ___errno_location=Module[\"___errno_location\"]=(function(){return Module[\"asm\"][\"___errno_location\"].apply(null,arguments)});var _add_f32=Module[\"_add_f32\"]=(function(){return Module[\"asm\"][\"_add_f32\"].apply(null,arguments)});var _and_u8=Module[\"_and_u8\"]=(function(){return Module[\"asm\"][\"_and_u8\"].apply(null,arguments)});var _average_pool_f32=Module[\"_average_pool_f32\"]=(function(){return Module[\"asm\"][\"_average_pool_f32\"].apply(null,arguments)});var _batch_normalization_f32=Module[\"_batch_normalization_f32\"]=(function(){return Module[\"asm\"][\"_batch_normalization_f32\"].apply(null,arguments)});var _conv_f32=Module[\"_conv_f32\"]=(function(){return Module[\"asm\"][\"_conv_f32\"].apply(null,arguments)});var _div_f32=Module[\"_div_f32\"]=(function(){return Module[\"asm\"][\"_div_f32\"].apply(null,arguments)});var _emscripten_replace_memory=Module[\"_emscripten_replace_memory\"]=(function(){return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null,arguments)});var _fflush=Module[\"_fflush\"]=(function(){return Module[\"asm\"][\"_fflush\"].apply(null,arguments)});var _free=Module[\"_free\"]=(function(){return Module[\"asm\"][\"_free\"].apply(null,arguments)});var _gemm_f32=Module[\"_gemm_f32\"]=(function(){return Module[\"asm\"][\"_gemm_f32\"].apply(null,arguments)});var _instance_normalization_f32=Module[\"_instance_normalization_f32\"]=(function(){return Module[\"asm\"][\"_instance_normalization_f32\"].apply(null,arguments)});var _malloc=Module[\"_malloc\"]=(function(){return Module[\"asm\"][\"_malloc\"].apply(null,arguments)});var _matmul_f32=Module[\"_matmul_f32\"]=(function(){return Module[\"asm\"][\"_matmul_f32\"].apply(null,arguments)});var _max_pool_f32=Module[\"_max_pool_f32\"]=(function(){return Module[\"asm\"][\"_max_pool_f32\"].apply(null,arguments)});var _memcpy=Module[\"_memcpy\"]=(function(){return Module[\"asm\"][\"_memcpy\"].apply(null,arguments)});var _memset=Module[\"_memset\"]=(function(){return Module[\"asm\"][\"_memset\"].apply(null,arguments)});var _mul_f32=Module[\"_mul_f32\"]=(function(){return Module[\"asm\"][\"_mul_f32\"].apply(null,arguments)});var _or_u8=Module[\"_or_u8\"]=(function(){return Module[\"asm\"][\"_or_u8\"].apply(null,arguments)});var _prelu_f32=Module[\"_prelu_f32\"]=(function(){return Module[\"asm\"][\"_prelu_f32\"].apply(null,arguments)});var _sbrk=Module[\"_sbrk\"]=(function(){return Module[\"asm\"][\"_sbrk\"].apply(null,arguments)});var _softmax_f32=Module[\"_softmax_f32\"]=(function(){return Module[\"asm\"][\"_softmax_f32\"].apply(null,arguments)});var _sub_f32=Module[\"_sub_f32\"]=(function(){return Module[\"asm\"][\"_sub_f32\"].apply(null,arguments)});var _sum_f32=Module[\"_sum_f32\"]=(function(){return Module[\"asm\"][\"_sum_f32\"].apply(null,arguments)});var _xor_u8=Module[\"_xor_u8\"]=(function(){return Module[\"asm\"][\"_xor_u8\"].apply(null,arguments)});var establishStackSpace=Module[\"establishStackSpace\"]=(function(){return Module[\"asm\"][\"establishStackSpace\"].apply(null,arguments)});var setThrew=Module[\"setThrew\"]=(function(){return Module[\"asm\"][\"setThrew\"].apply(null,arguments)});var stackAlloc=Module[\"stackAlloc\"]=(function(){return Module[\"asm\"][\"stackAlloc\"].apply(null,arguments)});var stackRestore=Module[\"stackRestore\"]=(function(){return Module[\"asm\"][\"stackRestore\"].apply(null,arguments)});var stackSave=Module[\"stackSave\"]=(function(){return Module[\"asm\"][\"stackSave\"].apply(null,arguments)});var dynCall_ii=Module[\"dynCall_ii\"]=(function(){return Module[\"asm\"][\"dynCall_ii\"].apply(null,arguments)});var dynCall_iiii=Module[\"dynCall_iiii\"]=(function(){return Module[\"asm\"][\"dynCall_iiii\"].apply(null,arguments)});var dynCall_v=Module[\"dynCall_v\"]=(function(){return Module[\"asm\"][\"dynCall_v\"].apply(null,arguments)});var dynCall_vi=Module[\"dynCall_vi\"]=(function(){return Module[\"asm\"][\"dynCall_vi\"].apply(null,arguments)});var dynCall_viiii=Module[\"dynCall_viiii\"]=(function(){return Module[\"asm\"][\"dynCall_viiii\"].apply(null,arguments)});var dynCall_viiiii=Module[\"dynCall_viiiii\"]=(function(){return Module[\"asm\"][\"dynCall_viiiii\"].apply(null,arguments)});var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=(function(){return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null,arguments)});Module[\"asm\"]=asm;Module[\"then\"]=(function(func){if(Module[\"calledRun\"]){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=(function(){if(old)old();func(Module)})}return Module});function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;dependenciesFulfilled=function runCaller(){if(!Module[\"calledRun\"])run();if(!Module[\"calledRun\"])dependenciesFulfilled=runCaller};function run(args){args=args||Module[\"arguments\"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\"calledRun\"])return;function doRun(){if(Module[\"calledRun\"])return;Module[\"calledRun\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout((function(){setTimeout((function(){Module[\"setStatus\"](\"\")}),1);doRun()}),1)}else{doRun()}}Module[\"run\"]=run;function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=\"\"}ABORT=true;EXITSTATUS=1;throw\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\"}Module[\"abort\"]=abort;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run()\n\n\n\n\n\n  return Module;\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n    module.exports = Module;\n  else if (typeof define === 'function' && define['amd'])\n    define([], function() { return Module; });\n  else if (typeof exports === 'object')\n    exports[\"Module\"] = Module;\n  ","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"./onnx-worker.js\");\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {CPU_OP_RESOLVE_RULES} from '../cpu/op-resolve-rules';\n\nimport {WasmInferenceHandler} from './inference-handler';\nimport {WASM_OP_RESOLVE_RULES} from './op-resolve-rules';\n\nexport class WasmSessionHandler implements SessionHandler {\n  private opResolveRules: ReadonlyArray<OpSet.ResolveRule>;\n  constructor(readonly backend: Backend, readonly context: Session.Context, fallbackToCpuOps: boolean) {\n    this.opResolveRules = fallbackToCpuOps ? WASM_OP_RESOLVE_RULES.concat(CPU_OP_RESOLVE_RULES) : WASM_OP_RESOLVE_RULES;\n  }\n\n  createInferenceHandler(): InferenceHandler {\n    return new WasmInferenceHandler(this, this.context.profiler);\n  }\n\n  dispose(): void {}\n\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\n    const op = resolveOperator(node, opsets, this.opResolveRules);\n    op.initialize(node.attributes);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InferenceHandler} from '../../backend';\nimport {Profiler} from '../../instrument';\n\nimport {WasmSessionHandler} from './session-handler';\n\nexport class WasmInferenceHandler implements InferenceHandler {\n  constructor(public readonly session: WasmSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\n\n  dispose(): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {OpSet} from '../../opset';\n\nimport {WasmBatchNormalization} from './ops/batch-normalization';\nimport {WasmBinaryOp} from './ops/binary-op';\nimport {WasmClip} from './ops/clip';\nimport {WasmConv} from './ops/conv';\nimport {WasmGemm} from './ops/gemm';\nimport {WasmInstanceNormalization} from './ops/instance-normalization';\nimport {WasmMatMul} from './ops/matmul';\nimport {WasmAveragePool, WasmGlobalAveragePool, WasmGlobalMaxPool, WasmMaxPool} from './ops/pool';\nimport {WasmSoftmax} from './ops/softmax';\nimport {WasmSum} from './ops/sum';\n\nexport const WASM_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\n  ['Add', '', '7+', () => new WasmBinaryOp(['float32'], 'Add')],\n  ['And', '', '7+', () => new WasmBinaryOp(['bool'], 'And')],\n  ['AveragePool', '', '7+', () => new WasmAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new WasmBatchNormalization()],\n  ['Clip', '', '6+', () => new WasmClip()],\n  ['Conv', '', '1+', () => new WasmConv()],\n  ['Div', '', '7+', () => new WasmBinaryOp(['float32'], 'Div')],\n  ['Gemm', '', '7+', () => new WasmGemm()],\n  ['GlobalAveragePool', '', '1+', () => new WasmGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new WasmGlobalMaxPool()],\n  ['InstanceNormalization', '', '6+', () => new WasmInstanceNormalization()],\n  ['MatMul', '', '1+', () => new WasmMatMul()],\n  ['MaxPool', '', '1+', () => new WasmMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new WasmBinaryOp(['float32'], 'Mul')],\n  ['Or', '', '7+', () => new WasmBinaryOp(['bool'], 'Or')],\n  ['PRelu', '', '7+', () => new WasmBinaryOp(['float32'], 'PRelu')],\n  ['Softmax', '', '1+', () => new WasmSoftmax()],\n  ['Sub', '', '7+', () => new WasmBinaryOp(['float32'], 'Sub')],\n  ['Sum', '', '6+', () => new WasmSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Xor', '', '7+', () => new WasmBinaryOp(['bool'], 'Xor')],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const scale = inputs[1];\n    const b = inputs[2];\n    const mean = inputs[3];\n    const variance = inputs[4];\n\n    // calculate channel size (i.e.) data points per channel\n    let channelSize = 1;\n    for (let i = 2; i < x.dims.length; i++) {\n      channelSize *= x.dims[i];\n    }\n\n    // create output Tensor after determining output size\n    const y = new Tensor(x.dims, x.type);\n    WasmBinding.getInstance().ccall(\n        '_batch_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\n        [b.floatData, 'float32ptr'], [mean.floatData, 'float32ptr'], [variance.floatData, 'float32ptr'],\n        [this.epsilon, 'float32']);\n    // console.log(`BatchNorm ${y.dims}`);\n    // console.log(y.data);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n    const mean = inputs[3];\n    const var_ = inputs[4];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs need to be one dimensional\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n        var_.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n        var_.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    // currently Wasm backend only supports 'float32' input type\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32' || mean.type !== 'float32' ||\n        var_.type !== 'float32') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmBinaryOp extends BinaryOp {\n  constructor(typeConstraint: ReadonlyArray<Tensor.DataType>, opType: string, resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n    if (!outputShape) {\n      throw new Error('not broadcastable');\n    }\n    let fun = '';\n    // TODO: Explore better ways to deal with types than current `binaryOpType` approach\n    let binaryOpType = '';\n    switch (this.opType) {\n      case 'Add':\n        if (inputs[0].type === 'float32') {\n          fun = '_add_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Sub':\n        if (inputs[0].type === 'float32') {\n          fun = '_sub_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Mul':\n        if (inputs[0].type === 'float32') {\n          fun = '_mul_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Div':\n        if (inputs[0].type === 'float32') {\n          fun = '_div_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'PRelu':\n        if (inputs[0].type === 'float32') {\n          fun = '_prelu_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Xor':\n        fun = '_xor_u8';\n        binaryOpType = 'boolInBoolOut';\n        break;\n      case 'Or':\n        fun = '_or_u8';\n        binaryOpType = 'boolInBoolOut';\n        break;\n      case 'And':\n        fun = '_and_u8';\n        binaryOpType = 'boolInBoolOut';\n        break;\n      default:\n        throw Error(`unsupported binary op by the Wasm backend`);\n    }\n    let result: Tensor;\n    if (binaryOpType === 'float32InFloat32Out') {\n      result = new Tensor(outputShape, 'float32');\n      WasmBinding.getInstance().ccall(\n          fun, [inputs[0].floatData, 'float32ptr'], [inputs[0].dims.length, 'int32'], [inputs[0].dims, 'int32ptr'],\n          [inputs[1].floatData, 'float32ptr'], [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\n          [result.floatData, 'float32ptr', 'out'], [result.floatData.length, 'int32'], [outputShape.length, 'int32'],\n          [outputShape, 'int32ptr']);\n    } else if (binaryOpType === 'boolInBoolOut') {\n      result = new Tensor(outputShape, 'bool');\n      WasmBinding.getInstance().ccall(\n          fun, [inputs[0].integerData as Uint8Array, 'boolptr'], [inputs[0].dims.length, 'int32'],\n          [inputs[0].dims, 'int32ptr'], [inputs[1].integerData as Uint8Array, 'boolptr'],\n          [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\n          [result.integerData as Uint8Array, 'boolptr', 'out'], [result.integerData.length, 'int32'],\n          [outputShape.length, 'int32'], [outputShape, 'int32ptr']);\n    } else {\n      throw new Error(`Unsupported binary op format. Probably unsupported data types.`);\n    }\n    return [result];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Clip} from '../../../ops/clip';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmClip extends Clip {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const result = new Tensor(inputs[0].dims, inputs[0].type);\n    const size = result.floatData.length;\n    if (inputs[0].type === 'float32') {\n      WasmBinding.getInstance().ccall(\n          '_clip_f32', [inputs[0].floatData, 'float32ptr'], [result.floatData, 'float32ptr', 'out'], [size, 'int32'],\n          [this.min, 'float32'], [this.max, 'float32']);\n    }\n    // Expand for differnt types supported for this specific kernel of Clip\n    else {\n      throw new Error(`Unsupported input type for Clip operator.`);\n    }\n    return [result];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {PerformanceData} from '../../../wasm-binding-core';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmConv extends Conv {\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    const x = inputs[0];\n    const w = inputs[1];\n    const b = inputs.length === 3 ? inputs[2] : undefined;\n\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\n    const outputDims =\n        PoolConvUtil.computeConvOutputShape(x.dims, w.dims, this.strides, this.kernelShape, this.pads, this.autoPad);\n    const y = new Tensor(outputDims, x.type);\n\n    // determine number of threads needed to process\n    const numThreads = determineNumThreads(x.dims[0], this.group, w.dims[0], WasmBinding.workerNumber);\n\n    // no multi-threading\n    if (numThreads === 1) {\n      WasmBinding.getInstance().ccall(\n          '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [w.floatData, 'float32ptr'],\n          [w.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'],\n          [b ? b.floatData : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\n          [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\n      // console.log(`Conv ${y.dims}`);\n      // console.log(y.data);\n      return [y];\n    }\n\n    // multi-threaded using web-workers\n    else {\n      // data pre-processing\n      const wDimsSp = w.dims.slice(0);\n      wDimsSp[0] = Math.floor(w.dims[0] / numThreads);\n      const wSizeSp = wDimsSp[0] * wDimsSp[1] * wDimsSp[2] * wDimsSp[3];\n\n      const wDimsFinal = w.dims.slice(0);\n      wDimsFinal[0] = w.dims[0] - (numThreads - 1) * wDimsSp[0];\n\n      const yDimsSp = [1, wDimsSp[0], outputDims[2], outputDims[3]];\n      const ySizeSp = wDimsSp[0] * outputDims[2] * outputDims[3];\n\n      const yDimsFinal = [1, wDimsFinal[0], outputDims[2], outputDims[3]];\n\n      const wArray = new Array<Float32Array>(numThreads);\n      const yArray = new Array<Float32Array>(numThreads);\n      const bArray = new Array<Float32Array>(numThreads);\n      const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\n\n      // function calls\n      for (let i = 0; i < numThreads; ++i) {\n        if (i !== numThreads - 1) {\n          wArray[i] = w.floatData.subarray(i * wSizeSp, (i + 1) * wSizeSp) as Float32Array;\n          yArray[i] = y.floatData.subarray(i * ySizeSp, (i + 1) * ySizeSp) as Float32Array;\n          if (b) {\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0], (i + 1) * wDimsSp[0]) as Float32Array;\n          }\n          workerTasks[i] = WasmBinding.getInstance().ccallRemote(\n              i, '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\n              [wDimsSp, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\n        } else {\n          wArray[i] = w.floatData.subarray(i * wSizeSp) as Float32Array;\n          yArray[i] = y.floatData.subarray(i * ySizeSp) as Float32Array;\n          if (b) {\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0]) as Float32Array;\n          }\n          WasmBinding.getInstance().ccall(\n              '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\n              [wDimsFinal, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\n        }\n      }\n\n      await Promise.all(workerTasks);\n      // console.log(`Conv ${y.dims}`);\n      // console.log(y.data);\n      return [y];\n    }\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n// This function will determine the number of threads\n// The strategy to parallelize is to parallelize on number of filter maps in the kernel\n// (i.e.) number of output channels\nfunction determineNumThreads(batchSize: number, group: number, numFilterMaps: number, numWebWorkers: number): number {\n  // single threaded if:\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\n  // 2) multi-threading not supported yet for mulitple groups\n  // 3) if number of filter maps is 1\n  // 4) number of web workers is 0\n  if (batchSize !== 1 || group !== 1 || numFilterMaps === 1 || numWebWorkers <= 0) {\n    return 1;\n  }\n\n  // multi-threaded:\n  // determine number of threads\n  return Math.min(numFilterMaps, numWebWorkers + 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport ndarray from 'ndarray';\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, GemmUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmGemm extends Gemm {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const a = inputs[0];\n    const b = inputs[1];\n    const c = inputs[2];\n\n    const outputDims = GemmUtil.getShapeOfGemmResult(a.dims, this.transA, b.dims, this.transB, c.dims);\n    const y = new Tensor(outputDims, a.type);\n    const intermediate = BroadcastUtil.calc(\n        ndarray(y.floatData, y.dims as number[]), ndarray(c.floatData, c.dims as number[]), (a, b) => (a + b));\n    if (!intermediate) {\n      throw new Error(`c is not broadcastable to the shape of the result of the Gemm operator`);\n    }\n    y.floatData.set(intermediate.data);\n    WasmBinding.getInstance().ccall(\n        '_gemm_f32', [this.transA, 'bool'], [this.transB, 'bool'], [this.transA ? a.dims[1] : a.dims[0], 'int32'],\n        [this.transB ? b.dims[0] : b.dims[1], 'int32'], [this.transA ? a.dims[0] : a.dims[1], 'int32'],\n        [this.alpha, 'float32'], [a.floatData, 'float32ptr'], [b.floatData, 'float32ptr'], [this.beta, 'float32'],\n        [y.floatData, 'float32ptr', 'inout']);\n    // console.log(`Gemm ${y.dims}`);\n    // console.log(y.data);\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32' || inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const scale = inputs[1];\n    const b = inputs[2];\n\n    // calculate channel size (i.e.) data points per channel\n    let channelSize = 1;\n    for (let i = 2; i < x.dims.length; i++) {\n      channelSize *= x.dims[i];\n    }\n\n    // create output Tensor after determining output size\n    const y = new Tensor(x.dims, x.type);\n    WasmBinding.getInstance().ccall(\n        '_instance_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\n        [b.floatData, 'float32ptr'], [this.epsilon, 'float32']);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs need to be one dimensional\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    // currently Wasm backend only supports 'float32' input type\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmMatMul extends MatMul {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    let dimsA: number[];\n    let dimsB: number[];\n    [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(inputs[0].dims.slice(), inputs[1].dims.slice());\n    const outputShape = BroadcastUtil.calcShape(dimsA, dimsB, true);\n    if (!outputShape) {\n      // the inputs cannot broadcast or cannot multiply\n      throw new Error(`input dimensions do not match the requirement`);\n    }\n\n    const outputSize = ShapeUtil.size(outputShape);\n    const resultData = new Float32Array(outputSize);\n    WasmBinding.getInstance().ccall(\n        '_matmul_f32', [inputs[0].floatData, 'float32ptr'], [inputs[0].dims, 'int32ptr'],\n        [inputs[0].dims.length, 'int32'], [inputs[1].floatData, 'float32ptr'], [inputs[1].dims, 'int32ptr'],\n        [inputs[1].dims.length, 'int32'], [resultData, 'float32ptr', 'out'], [resultData.length, 'int32'],\n        [outputShape, 'int32ptr'], [outputShape.length, 'int32']);\n    MatMulUtil.postprocessOutputShape(outputShape as number[], inputs[0].dims.length, inputs[1].dims.length);\n    const result = new Tensor(outputShape, inputs[0].type);\n    result.floatData.set(resultData);\n    return [result];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {PerformanceData} from '../../../wasm-binding-core';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmAveragePool extends AveragePool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\n  }\n}\n\nexport class WasmGlobalAveragePool extends GlobalAveragePool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return globalAveragePool(inputs[0]);\n  }\n}\n\nexport class WasmMaxPool extends MaxPool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\n  }\n}\n\nexport class WasmGlobalMaxPool extends GlobalMaxPool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return globalMaxPool(inputs[0]);\n  }\n}\n\n// type check function\nfunction checkInputTypes(inputs: Tensor[]): boolean {\n  // currently Wasm backend only supports 'float32' input type\n  if (inputs[0].type !== 'float32') {\n    return false;\n  }\n\n  return true;\n}\n\n// functions implementing specific pooling operations\nasync function averagePool(\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\n    strides: number[]): Promise<Tensor[]> {\n  return pool(false, 1, input, autoPad, countIncludePad, kernelShape, pads, strides);\n}\n\nasync function globalAveragePool(input: Tensor): Promise<Tensor[]> {\n  return pool(true, 1, input, 'NOTSET', false, [], [], []);\n}\n\nasync function maxPool(\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\n  return pool(false, 2, input, autoPad, false, kernelShape, pads, strides);\n}\n\nasync function globalMaxPool(input: Tensor): Promise<Tensor[]> {\n  return pool(true, 2, input, 'NOTSET', false, [], [], []);\n}\n\n/**\n * Perform pooling operations based on input\n * @param isGlobalOperator If true, perform global pooling.\n * @param poolType 1 if averagepool, 2 for maxpool.\n * @param input The input tensor.\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\n * @param kernelShape The size of the kernel along each axis.\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\n *       xi_end, the number of pixels added at the end of axis `i`.\n * @param strides Stride along each axis.\n */\nasync function pool(\n    isGlobalOperator: boolean, poolType: number, input: Tensor, autoPad: string, countIncludePad: boolean,\n    kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\n  // determine pool function name in wasm\n  let poolFunc = '';\n  switch (poolType) {\n    case 1:\n      poolFunc = '_average_pool_f32';\n      break;\n    case 2:\n      poolFunc = '_max_pool_f32';\n      break;\n    default:\n      throw new Error(`unknown pool type`);\n  }\n  // adjust the shapes of input attributes\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\n\n  // calculate output shape based on input attributes\n  const outputDims =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\n\n  // create output\n  const y = new Tensor(outputDims, input.type);\n\n  // determine number of threads needed to process\n  const numThreads = determineNumThreads(input.dims[0], input.dims[1], WasmBinding.workerNumber);\n\n  // no multi-threading\n  if (numThreads === 1) {\n    WasmBinding.getInstance().ccall(\n        poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'], [input.floatData, 'float32ptr'],\n        [input.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'], [kernelShape, 'int32ptr'],\n        [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\n  }\n\n  // multi-threaded using web-workers\n  else {\n    // data pre-processing\n    const xDimsSp = input.dims.slice(0);\n    xDimsSp[1] = Math.floor(input.dims[1] / numThreads);\n    const xSizeSp = ShapeUtil.size(xDimsSp);\n\n    const xDimsFinal = input.dims.slice(0);\n    xDimsFinal[1] = input.dims[1] - (numThreads - 1) * xDimsSp[1];\n\n    const yDimsSp = outputDims.slice(0);\n    yDimsSp[1] = xDimsSp[1];\n    const ySizeSp = ShapeUtil.size(yDimsSp);\n\n    const yDimsFinal = outputDims.slice(0);\n    yDimsFinal[1] = xDimsFinal[1];\n\n    const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\n\n    const X = input.floatData;\n    const Y = y.floatData;\n\n    // function calls\n    for (let i = 0; i < numThreads; ++i) {\n      if (i !== numThreads - 1) {\n        workerTasks[i] = WasmBinding.getInstance().ccallRemote(\n            i, poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\n            [X.subarray(i * xSizeSp, (i + 1) * xSizeSp), 'float32ptr'], [xDimsSp, 'int32ptr'],\n            [Y.subarray(i * ySizeSp, (i + 1) * ySizeSp), 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\n      } else {\n        WasmBinding.getInstance().ccall(\n            poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\n            [X.subarray((numThreads - 1) * xSizeSp), 'float32ptr'], [xDimsFinal, 'int32ptr'],\n            [Y.subarray((numThreads - 1) * ySizeSp), 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\n      }\n    }\n\n    await Promise.all(workerTasks);\n  }\n\n  return [y];\n}\n\n// this function will determine the number of threads\n// the strategy to parallelize is to parallelize on number of data channels\nfunction determineNumThreads(batchSize: number, numChannels: number, numWebWorkers: number): number {\n  // single threaded if:\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\n  // 2) if number of channels is 1\n  // 3) number of web workers is 0\n  if (batchSize !== 1 || numChannels === 1 || numWebWorkers <= 0) {\n    return 1;\n  }\n\n  // multi-threaded:\n  // determine number of threads\n  return Math.min(numChannels, numWebWorkers + 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmSoftmax extends Softmax {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const axisCorrected = ShapeUtil.parseAxis(this.axis, x.dims.length);\n    const N = ShapeUtil.sizeToDimension(x.dims, axisCorrected);\n    const D = ShapeUtil.sizeFromDimension(x.dims, axisCorrected);\n    const y = new Tensor(x.dims, x.type);\n    WasmBinding.getInstance().ccall(\n        '_softmax_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'], [N, 'int32'], [D, 'int32']);\n    // console.log(`Softmax ${y.dims}`);\n    // console.log(y.data);\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding, WasmCallArgument} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmSum extends Sum {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const y = new Tensor(inputs[0].dims, inputs[0].type);\n    const size = inputs[0].floatData.length;\n    const input = new Array<WasmCallArgument>(inputs.length);\n    for (let i = 0; i < inputs.length; i++) {\n      input[i] = [inputs[i].floatData, 'float32ptr'];\n    }\n    WasmBinding.getInstance().ccall(\n        '_sum_f32', [inputs.length, 'int32'], [size, 'int32'], [y.floatData, 'float32ptr', 'inout'], ...input);\n    // console.log(`Sum ${y.dims}`);\n    // console.log(y.data);\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32') {\n      return false;\n    }\n    for (let i = 1; i < inputs.length; i++) {\n      if (inputs[0].type !== inputs[i].type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport * as platform from 'platform';\n\nimport {Backend as BackendInterface} from '../api/onnx';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {WebGLContextFactory} from './webgl/webgl-context-factory';\n\ntype WebGLOptions = BackendInterface.WebGLOptions;\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend, WebGLOptions {\n  disabled?: boolean;\n  glContext: WebGLContext;\n  contextId?: 'webgl'|'webgl2'|'experimental-webgl';\n  forceUint8Reads = false;\n\n  initialize(): boolean {\n    try {\n      if (platform.name === 'Safari') {\n        this.forceUint8Reads = true;\n      }\n      this.glContext = WebGLContextFactory.create(this.contextId);\n      Logger.verbose('WebGLBackend', `Created WebGLContext: ${typeof this.glContext}`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {TextureData} from './texture-data';\nimport {TextureHelper} from './texture-helper';\nimport {AlwaysKeepOriginalSizeStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureHelper: TextureHelper;\n  layoutStrategy: TextureLayoutStrategy;\n  textureDataCache: Map<Tensor, TextureData>;\n  initializers: Set<Tensor>;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext);\n    this.layoutStrategy = new AlwaysKeepOriginalSizeStrategy(backend.glContext.maxTextureSize);\n    this.textureHelper = new TextureHelper(backend.glContext, this.layoutStrategy, this.context.profiler);\n    this.textureDataCache = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this.backend, this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1).map(v => v.tensor).filter(t => (t)) as Tensor[];\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(t: Tensor): boolean {\n    return this.initializers ? this.initializers.has(t) : false;\n  }\n  getTextureData(tensor: Tensor): TextureData|undefined {\n    return this.textureDataCache.get(tensor);\n  }\n  setTextureData(tensor: Tensor, textureData: TextureData): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    this.textureDataCache.set(tensor, textureData);\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureHelper.clearActiveTextures();\n    this.textureDataCache.forEach(td => this.textureHelper.releaseTexture(td.texture));\n    this.textureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    op.initialize(node.attributes);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLUint8Encode} from './ops/uint8-encode';\nimport {ProgramManager} from './program-manager';\nimport {WebGLSessionHandler} from './session-handler';\nimport {TextureData, TextureLayout} from './texture-data';\nimport {TextureHelper} from './texture-helper';\nimport {WidthHeightPrefs} from './texture-layout-strategy';\nimport {getPackedShape} from './utils';\n\n/**\n * GlInferencContext is reponsible for mapping from Tensors to TextureData\n * and back\n * Throughout WebGL backend operations TextureData is used as the data carrier\n */\nexport class WebGLInferenceHandler implements InferenceHandler {\n  textureHelper: TextureHelper;\n  programManager: ProgramManager;\n  private tensorToTexture: Map<Tensor, TextureData>;\n  private textureToTensor: Map<TextureData, Tensor>;\n  constructor(public backend: WebGLBackend, public session: WebGLSessionHandler) {\n    this.textureHelper = session.textureHelper;\n    this.programManager = session.programManager;\n    this.tensorToTexture = new Map();\n    this.textureToTensor = new Map();\n  }\n  protected lookupTextureData(tensor: Tensor): TextureData|undefined {\n    const isInitializer = this.session.isInitializer(tensor);\n    Logger.verbose('InferenceHandler', `tensor was an initializer; returning TextureData from session cache`);\n    return isInitializer ? this.session.getTextureData(tensor) : this.tensorToTexture.get(tensor);\n  }\n  getOrCreate(tensor: Tensor, layout?: TextureLayout): TextureData {\n    let td = this.lookupTextureData(tensor);\n    if (!td) {\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\n      if (!layout) {\n        layout = this.createBasicTextureLayout(tensor.dims.slice());\n      }\n      td = this.createTextureDataFromLayout(layout, tensor.type, tensor.numberData);\n      this.setTextureData(tensor, td);\n    } else {\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\n    }\n    return td;\n  }\n  getTextureData(tensor: Tensor): TextureData|undefined {\n    return this.lookupTextureData(tensor);\n  }\n  setTextureData(tensor: Tensor, td: TextureData): void {\n    if (this.session.isInitializer(tensor)) {\n      this.session.setTextureData(tensor, td);\n      return;\n    }\n    this.tensorToTexture.set(tensor, td);\n    this.textureToTensor.set(td, tensor);\n  }\n  getTensor(td: TextureData): Tensor {\n    let tensor: Tensor|undefined;\n    tensor = this.textureToTensor.get(td);\n    if (!tensor) {\n      Logger.verbose('InferenceHandler', `Creating new Tensor from texture data: [${td.unpackedShape}]`);\n      /**\n       * We're creating a Tensor without converting data from Texture onto CPU\n       * Instead we're passing a closure which is only executed if Tesor.data is accessed\n       * This allows for the execution of the graph without paying the penalty of\n       * data movement from GPU to CPU\n       */\n      tensor = new Tensor(td.unpackedShape, td.dataType, (id: Tensor.Id) => {\n        return this.readTexture(td);\n      });\n      this.setTextureData(tensor, td);\n    } else {\n      Logger.verbose('InferenceHandler', `Retrieving Tensor from cache for:[${td.unpackedShape}]`);\n    }\n    return tensor;\n  }\n  getOrCreateTextureLayout(tensor: Tensor, channels = 1, unpackedShape?: ReadonlyArray<number>): TextureLayout {\n    const td = this.getTextureData(tensor);\n    if (td) {\n      return td;\n    }\n    return this.createBasicTextureLayout(\n        channels === 1 ? tensor.dims.slice() : getPackedShape(tensor.dims.slice()), channels, unpackedShape);\n  }\n  dispose(): void {\n    this.textureHelper.clearActiveTextures();\n    this.tensorToTexture.forEach(td => this.textureHelper.releaseTexture(td.texture));\n    this.tensorToTexture = new Map();\n    this.textureToTensor = new Map();\n  }\n  createTextureData(\n      dataType: Tensor.DataType, shape: ReadonlyArray<number>, strides?: ReadonlyArray<number>,\n      data?: Tensor.NumberType, channels?: number, width?: number, height?: number): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: shape:[${shape}], channels:${channels ? channels : 1}`);\n    const td = this.textureHelper.createTexture(dataType, shape, strides, data, channels, width, height);\n    return td;\n  }\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const td = this.textureHelper.createTextureFromLayout(dataType, layout, data);\n    return td;\n  }\n  createBasicTextureLayout(\n      shape: ReadonlyArray<number>, channels = 1, unpackedShape?: ReadonlyArray<number>,\n      prefs?: WidthHeightPrefs): TextureLayout {\n    const [width, height] = this.session.layoutStrategy.computeTextureWH(shape, prefs);\n    let inferredDims = shape;\n    if (shape.length === 0) {\n      inferredDims = [1];\n    }\n    if (channels === 1) {\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n      unpackedShape = shape;\n    } else if (!unpackedShape) {\n      throw new Error('Unpacked shape is needed when using channels > 1');\n    }\n    return {\n      width,\n      height,\n      channels: channels ? channels : 1,\n      shape: inferredDims,\n      strides: ShapeUtil.computeStrides(inferredDims),\n      unpackedShape\n    };\n  }\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (this.backend.forceUint8Reads) {\n      const op = new WebGLUint8Encode();\n      const uint8TD = op.runInternal(this, textureData);\n      return this.textureHelper.readUint8TextureAsFloat(uint8TD);\n    }\n    const values = this.textureHelper.readTexture(textureData, textureData.dataType, textureData.channels);\n    return values;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureLayout} from '../texture-data';\r\n\r\nexport class WebGLUint8Encode {\r\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\r\n    const outputShape = input.shape;\r\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\r\n    const outputLayout: TextureLayout = {\r\n      width,\r\n      height,\r\n      channels: 4,\r\n      shape: outputShape,\r\n      strides: ShapeUtil.computeStrides(outputShape),\r\n      unpackedShape: outputShape\r\n    };\r\n    /**\r\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n     */\r\n    const shaderSource = `\r\n      const float FLOAT_MAX = 1.70141184e38;\r\n      const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n      uniform sampler2D X;\r\n\r\n      bool isNaN(float val) {\r\n        return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\r\n      }\r\n\r\n      highp vec4 encodeAsUint8(highp float v) {\r\n        if (isNaN(v)) {\r\n          return vec4(255, 255, 255, 255);\r\n        }\r\n\r\n        highp float av = abs(v);\r\n\r\n        if(av < FLOAT_MIN) {\r\n          return vec4(0.0, 0.0, 0.0, 0.0);\r\n        } else if(v > FLOAT_MAX) {\r\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n        } else if(v < -FLOAT_MAX) {\r\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n        }\r\n\r\n        highp vec4 c = vec4(0,0,0,0);\r\n\r\n        highp float e = floor(log2(av));\r\n        highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n        c[2] = floor(128.0 * m);\r\n        m -= c[2] / 128.0;\r\n        c[1] = floor(32768.0 * m);\r\n        m -= c[1] / 32768.0;\r\n        c[0] = floor(8388608.0 * m);\r\n\r\n        highp float ebias = e + 127.0;\r\n        c[3] = floor(ebias / 2.0);\r\n        ebias -= c[3] * 2.0;\r\n        c[2] += floor(ebias) * 128.0;\r\n\r\n        c[3] += 128.0 * step(0.0, -v);\r\n\r\n        return c / 255.0;\r\n      }\r\n\r\n      void main() {\r\n        float value = texture2D(X,TexCoords).r;\r\n        gl_FragColor = encodeAsUint8(value);\r\n      }`;\r\n    const programInfo = {\r\n      hasMain: true,\r\n      inputLayouts: [input],\r\n      outputLayout,\r\n      shaderSource,\r\n    };\r\n    const artifact = inferenceHandler.programManager.build(programInfo);\r\n\r\n    const texture =\r\n        inferenceHandler.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, 'byte', 4);\r\n    const outputTextureData: TextureData = {...outputLayout, dataType: 'uint8', texture};\r\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\r\n\r\n    inferenceHandler.programManager.run(artifact, runData);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\nimport {OpSet} from '../../opset';\n\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {WebGLClip} from './ops/clip';\nimport {WebGLConcat} from './ops/concat';\nimport {WebGLConv} from './ops/conv';\nimport {WebGLDropout} from './ops/dropout';\nimport {WebGLElu} from './ops/elu';\nimport {WebGLFlatten} from './ops/flatten';\nimport {WebGLGather} from './ops/gather';\nimport {WebGLGemm} from './ops/gemm';\nimport {WebGLImageScaler} from './ops/image-scaler';\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\nimport {WebGLMatMul} from './ops/matmul';\nimport {WebGLPad} from './ops/pad';\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\nimport * as reduceOps from './ops/reduce';\nimport {WebGLReshape} from './ops/reshape';\nimport {WebGLSlice} from './ops/slice';\nimport {WebGLSoftmax} from './ops/softmax';\nimport {WebGLSplit} from './ops/split';\nimport {WebGLSqueeze} from './ops/squeeze';\nimport {WebGLSum} from './ops/sum';\nimport {WebGLTile} from './ops/tile';\nimport {WebGLTranspose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\n\nexport const WEBGL_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\n  ['AveragePool', '', '7+', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\n  ['Clip', '', '6+', () => new WebGLClip()],\n  ['Concat', '', '4+', () => new WebGLConcat()],\n  ['Conv', '', '1+', () => new WebGLConv()],\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\n  ['Dropout', '', '7+', () => new WebGLDropout()],\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\n  ['Elu', '', '6+', () => new WebGLElu()],\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\n  ['Gather', '', '1+', () => new WebGLGather()],\n  ['Gemm', '', '7+', () => new WebGLGemm()],\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\n  ['MaxPool', '', '1+', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\n  ['Pad', '', '2+', () => new WebGLPad()],\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\n  ['Reshape', '', '5+', () => new WebGLReshape()],\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\n  ['Slice', '', '1+', () => new WebGLSlice()],\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data\n  // is split. When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\n  ['Tile', '', '6+', () => new WebGLTile()],\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const scale = inputLayouts[1];\n    const shaderSource = `\n      uniform sampler2D A;\n      uniform sampler2D Scale;\n      uniform sampler2D B;\n      uniform sampler2D Mean;\n      uniform sampler2D Variance;\n\n      float process(int[${rank}] indices) {\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\n        float scale = getColorAsFloat(texture2D(Scale, position));\n        float mean = getColorAsFloat(texture2D(Mean, position));\n        float variance = getColorAsFloat(texture2D(Variance, position));\n        float b = getColorAsFloat(texture2D(B, position));\n\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\n      }`;\n    return {hasMain: false, inputLayouts, outputLayout: handler.createBasicTextureLayout(outputShape), shaderSource};\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreate(t)));\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType);\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\n  constructor(\n      typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction, opType?: string,\n      resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n    if (isBroadcast) {\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n      if (!outputShape) {\n        throw new Error(`Can't perform binary op on the given tensors`);\n      }\n      const outputRank = outputShape.length;\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n      const aBcast = inputs[0].dims.length !== 0 ? `bcastIndices_A(indices, aindices);` : `aindices[0] = 0;`;\n      const bBcast = inputs[1].dims.length !== 0 ? `bcastIndices_B(indices, bindices);` : `bindices[0] = 0;`;\n      const shaderSource = `\n      uniform sampler2D A;\n      uniform sampler2D B;\n      ${this.glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\n    }`;\n      return {\n        hasMain: false,\n        inputLayouts,\n        outputLayout: handler.createBasicTextureLayout(outputShape),\n        shaderSource,\n      };\n    }\n    const shaderSource = `\n    uniform sampler2D A;\n    uniform sampler2D B;\n    ${this.glslFunc.body}\n    void main() {\n      vec4 v1 = texture2D(A, TexCoords);\n      vec4 v2 = texture2D(B, TexCoords);\n      vec4 result = ${this.glslFunc.name}(v1, v2);\n      gl_FragColor = result;\n    }\n    `;\n    return {\n      hasMain: true,\n      inputLayouts,\n      outputLayout: handler.createBasicTextureLayout(inputs[0].dims),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAdd(): GlslValueFunction {\n  const name = `add_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = `div_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = `mul_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = `sub_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = `equal_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1 == v2 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = `greater_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = `less_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = `and_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = `or_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = `xor_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = `prelu_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Clip} from '../../../ops/clip';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLClip extends Clip implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const shaderSource = `\n      const float min = float(${this.min});\n      const float max = float(${this.max});\n      uniform sampler2D A;\n      void main() {\n        float v = texture2D(A, TexCoords).r;\n        gl_FragColor = vec4(clamp(v, min, max));\n      }\n      `;\n    return {\n      hasMain: true,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLConcat extends Concat implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\n      throw new Error(`axis specified for concat doesn't match input dimensionality`);\n    }\n    if (this.axis < 0) {\n      this.axis = inputShape.length + this.axis;\n    }\n    // ensure all of the non-concatenated axes match each other\n    // calculate the shape of the output tensor while we do that\n    const outputShape = inputShape.slice(0);\n    for (let i = 1; i < inputs.length; i++) {\n      const dataNShape = inputs[i].dims.slice();\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n        // add to the placeholder for computing output shape\n        if (axisIndex === this.axis) {\n          outputShape[this.axis] += dataNShape[axisIndex];\n        }\n        // ensure all non-cancatenated axes match each other\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n          throw new Error(`non concat dimensions must match`);\n        }\n      }\n    }\n\n    const rank = outputShape.length;\n\n    let getTextureIndexWhereDataResidesMethod = ``;\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n    if (inputs.length < 5) {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\n    } else {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\n    }\n\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\n    const inputUniforms = inputs.map((v, i) => `uniform sampler2D X${i};`);\n    const shaderSource = `\n      ${inputUniforms.join('\\n')}\n      uniform int sizeInConcatAxis[${inputs.length}];\n      ${fetchDataFromCorrectTextureMethod}\n      ${getValueFromArrayIndexMethod}\n      ${getTextureIndexWhereDataResidesMethod}\n      float process(int indices[${rank}]) {\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\n\n        if(textureIndex != 0) {\n          indices[${this.axis}] = indices[${\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\n        }\n\n        return fetchDataFromCorrectTexture(textureIndex, indices);\n      }`;\n    return {\n      hasMain: false,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\n    let previousSum = 0;\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\n      sizeInConcatAxis[i] = previousSum;\n    }\n    const uniformData = {'sizeInConcatAxis': sizeInConcatAxis};\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData\n    };\n  }\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\n    return `int getTextureWhereDataResides(int index) {\n      for(int i=0; i<${numberOfTensors}; i++) {\n          if(index < int(sizeInConcatAxis[i])){\n              return i;\n          }\n        }\n      }`;\n  }\n\n  // TODO: Implement BinarySearch in GLSL\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\n  }\n\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n    for (let i = 0; i < numberOfTensors; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            `\\t` +\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      } else if (i === numberOfTensors - 1) {\n        codeLines.push(\n            `\\t` +\n            `else { return _X${i}(indices); }`);\n      } else {\n        codeLines.push(\n            `\\t` +\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      }\n    }\n    codeLines.push(\n        `\\t` +\n        `}`);\n    return codeLines.join('\\n');\n  }\n\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\n    for (let i = 0; i < arrayRank; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            `\\t` +\n            `if (index == ${i}) { return arr[${i}]; }`);\n      } else if (i === arrayRank - 1) {\n        codeLines.push(\n            `\\t` +\n            `else { return arr[${i}]; }`);\n      } else {\n        codeLines.push(\n            `\\t` +\n            `else if (index == ${i}) { return arr[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        `\\t` +\n        `}`);\n\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../../instrument';\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {Artifact, RunData} from '../program-manager';\nimport {TextureLayout} from '../texture-data';\nimport {WebGLContext} from '../webgl-context';\n\nexport class WebGLConv extends Conv {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.programManager;\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      for (let i = 0; i < programInfos.length; ++i) {\n        const artifact = inferenceHandler.programManager.build(programInfos[i]);\n        this.artifacts.push(artifact);\n      }\n    }\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    programManager.run(this.artifacts[0], runDatas[0]);\n    programManager.run(this.artifacts[1], runDatas[1]);\n    return [inferenceHandler.getTensor(runDatas[1].outputTextureData)];\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(inputs[0].dims, this.strides, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\n    const dotProductProgramInfo =\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\n    return [im2colProgramInfo, dotProductProgramInfo];\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const k = inputs[1];\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\n    let kTD = inferenceHandler.getTextureData(k);\n    if (!kTD) {\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\n      const newKernelData =\n          WebGLConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\n      kTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].inputLayouts[1], k.type, newKernelData);\n      inferenceHandler.setTextureData(k, kTD);\n    }\n    const runtDataIm2Col = {\n      inputTextureDatas: [inferenceHandler.getOrCreate(inputs[0])],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\n      uniformData: {}\n    };\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\n    if (b) {\n      inputTDs.push(inferenceHandler.getOrCreate(b));\n    }\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\n    const runDataDotProduct = {\n      inputTextureDatas: inputTDs,\n      outputTextureData: outputTD,\n      uniformData: {},\n      preRun: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        gl.enable(gl.BLEND);\n        gl.blendEquation(gl.FUNC_ADD);\n        gl.blendFunc(gl.ONE, gl.ONE);\n        glContext.checkError();\n      },\n      postRun: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        gl.disable(gl.BLEND);\n      },\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\n        const sharedDimOffsetLocation = artifact.uniformLocations.sharedDimOffset.location;\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\n          gl.uniform1i(sharedDimOffsetLocation, k);\n          glContext.draw();\n        }\n      }\n    };\n    return [runtDataIm2Col, runDataDotProduct];\n  }\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\n      ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n\n    const rank = outputShape.length;\n    const im2colDims = WebGLConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\n    const outputLayout = inferenceHandler.createBasicTextureLayout(\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\n    const shaderSource = `\n    uniform sampler2D X;\n      const int XC = ${xshape[1]};\n      const int XH = ${xshape[2]};\n      const int XW = ${xshape[3]};\n      const int KH = ${this.kernelShape[0]};\n      const int KW = ${this.kernelShape[1]};\n      const int dilationH = ${this.dilations[0]};\n      const int dilationW = ${this.dilations[1]};\n      const int strideH = ${this.strides[0]};\n      const int strideW = ${this.strides[1]};\n      const int padH = ${this.pads[0]};\n      const int padW = ${this.pads[1]};\n      const int KHKW = KH*KW;\n      const int XCKHKW = XC * KHKW;\n      const int outputChannels = 4;\n\n      vec4 process(int indices[${rank}]) {\n        int b  = indices[0]; // batch size\n        int oh = indices[1] * strideH - padH; //output height\n        int ow = indices[2] * strideW - padW; //output width\n        int patch = indices[3] * outputChannels;\n        vec4 v = vec4(0.0);\n        for(int i=0; i < outputChannels; ++i) {\n          if(patch < XCKHKW) {\n            int patchC = patch / KHKW;\n            int patchH = (patch - patchC*KHKW) / KW;\n            int patchW = (patch - patchC*KHKW) - patchH * KW;\n            int xh2 = oh + patchH * dilationH;\n            int xw2 = ow + patchW * dilationW;\n            int x[${xshape.length}];\n            x[0] = b;\n            x[1] = patchC;\n            x[2] = xh2;\n            x[3] = xw2;\n            if(xh2 >= 0 &&\n                xh2 < XH &&\n                xw2 >= 0 &&\n                xw2 < XW) {\n              v[i] = _X(x);\n            }\n          }\n          ++patch;\n        }\n        return v;\n      }\n      `;\n    return {\n      hasMain: false,\n      inputLayouts: [inferenceHandler.createBasicTextureLayout(xshape)],\n      outputLayout,\n      shaderSource,\n    };\n  }\n  createDotProductProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\n      outputShape: number[]): ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n    const kLayout = inferenceHandler.createBasicTextureLayout(\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\n\n    let bLayout: TextureLayout|undefined;\n    const rank = outputShape.length;\n\n    const inputLayouts = [im2colLayout, kLayout];\n    if (inputs.length === 3) {\n      bLayout = inferenceHandler.createBasicTextureLayout(inputs[2].dims.slice());\n      inputLayouts.push(bLayout);\n    }\n    const outputLayout = inferenceHandler.createBasicTextureLayout(outputShape);\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n    const sharedDim = im2colLayout.shape[3];\n    const sharedDimReadSize = this.calcSharedDimReadSize(sharedDim);\n    const shaderSource = `\n    uniform sampler2D Im2Col;\n    uniform sampler2D K;\n    ${inputs.length === 3 ? 'uniform sampler2D B;' : ''}\n    uniform int sharedDimOffset;\n\n    float process(int indices[${rank}]) {\n      int b[1];\n      b[0] = indices[1];\n      int im2col[${im2colLayout.shape.length}];\n      im2col[0] = indices[0];\n      im2col[1] = indices[2];\n      im2col[2] = indices[3];\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\n      float sum = sharedDimOffset == 0 ? ${initValue} : 0.0;\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\n        sum += dot(texture2D(Im2Col, im2colCoords), texture2D(K, kernelCoords));\n        ++im2colOffset;\n        ++kernelOffset;\n      }\n      return sum;\n    }`;\n    return {\n      hasMain: false,\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\n      outputLayout,\n      shaderSource,\n      params: {'sharedDim': sharedDim, 'sharedDimReadSize': sharedDimReadSize}\n    };\n  }\n  createDotProdRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreate(t, programInfo.inputLayouts[i]));\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputs[0].type);\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: outputTD,\n      uniformData: {},\n      preRun: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        gl.enable(gl.BLEND);\n        gl.blendEquation(gl.FUNC_ADD);\n        gl.blendFunc(gl.ONE, gl.ONE);\n        glContext.checkError();\n      },\n      postRun: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        gl.disable(gl.BLEND);\n      },\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\n        const sharedDimOffsetLocation = artifact.uniformLocations.sharedDimOffset.location;\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\n          gl.uniform1i(sharedDimOffsetLocation, k);\n          glContext.draw();\n        }\n      }\n    };\n  }\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\n      return kernel;\n    }\n    const strides = ShapeUtil.computeStrides(shape);\n    const oldRowSize = shape[1] * shape[2] * shape[3];\n    const newRowSize = Math.ceil(oldRowSize / channels) * channels;\n    const newSize = shape[0] * newRowSize;\n    const buffer = new Float32Array(newSize);\n\n    const rowbuf = new Float32Array(newRowSize);\n    for (let f = 0; f < shape[0]; ++f) {\n      const oldOffset = f * strides[0];\n      rowbuf.set(kernel.slice(oldOffset, oldOffset + oldRowSize), 0);\n      const newOffset = f * newRowSize;\n      buffer.set(rowbuf, newOffset);\n    }\n    return buffer;\n  }\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\n    return [\n      outputShape[0], outputShape[2], outputShape[3],\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\n    ];\n  }\n  static calcOutputShape(\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\n      strides: number[]): number[] {\n    const batchSize = inputShape[0];\n    const inputSpatialShape = inputShape.slice(2);\n    const spatialRank = inputSpatialShape.length;\n    const outChannels = kernelShape[0];\n    const kernelSpatialShape = kernelShape.slice(2);\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n    const outputSpatialShape =\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n    return outputShape;\n  }\n  protected calcSharedDimReadSize(sharedDim: number): number {\n    const preferredBatchSize = 16;\n    if (sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\n      return sharedDim;\n    }\n    return preferredBatchSize;\n  }\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\n    const preferredRowCount = 64;\n    const preferredColCount = 64;\n    if (outputLayout.height < preferredRowCount) {\n      return undefined;\n    }\n    return [preferredColCount, preferredRowCount];\n  }\n  protected artifacts: Artifact[];\n  protected readSize = 8;\n  protected blockSize = 64;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Dropout} from '../../../ops/dropout';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\n\nexport class WebGLDropout extends Dropout implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (this.testMode) {\n      return [inputs[0]];\n    }\n    throw new Error(`Non test mode Dropout is not implemented yet`);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    throw new Error(`Non test mode Dropout is not implemented yet`);\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    throw new Error(`Non test mode Dropout is not implemented yet`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Elu} from '../../../ops/elu';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLElu extends Elu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const shaderSource = `\n      uniform sampler2D A;\n      void main() {\n        float v = texture2D(A, TexCoords).r;\n        gl_FragColor = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\n      }\n      `;\n    return {\n      hasMain: true,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Elu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 1.0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Flatten} from '../../../ops/flatten';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {reshape} from './reshape';\n\nexport class WebGLFlatten extends Flatten {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\n\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Licensed under the MIT license.\n\nimport {Gather} from '../../../ops/gather';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLGather extends Gather implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const indexDataShape = inputs[1].dims.slice();\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n    if (outputShape.length === 0) {\n      throw Error('A scalar tensor output has not been supported');\n    }\n\n    const indexCopyOps: string[] = [];\n    for (let i = 0; i < outputShape.length; i++) {\n      // outputShape is divided into three parts: A, B, C\n      // |0         this.axis|           this.axis + indexDataShape.length|          end|\n      // |     A             |                     B                      |      C      |\n      //\n      // inputIdx: [A, inputs[1][B], C]\n      if (i < this.axis) {  // A\n        outputShape[i] = inputShape[i];\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n      } else {\n        if (i < this.axis + indexDataShape.length) {  // B\n          outputShape[i] = indexDataShape[i - this.axis];\n          indexCopyOps.push(`indexDataIdx[${i - this.axis}] = outputIdx[${i}];`);\n        } else {                                                       // C\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for this.axis\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n        }\n      }\n    }\n\n    const orank = outputShape.length;\n    const irank = inputShape.length;\n    const iDrank = indexDataShape.length;\n    const shaderSource = `\n      uniform sampler2D A;\n      uniform sampler2D B;\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        ${indexCopyOps.join('\\n        ')}\n        inputIdx[${this.axis}] = int(_B(indexDataIdx));\n        return _A(inputIdx);\n      }`;\n    return {\n      hasMain: false,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLGemm extends Gemm implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims.slice();\n    const bShape = inputs[1].dims.slice();\n    const cShape = inputs[2].dims.slice();\n    const oShape = GemmUtil.getShapeOfGemmResult(aShape, this.transA, bShape, this.transB, cShape);\n    if (!oShape) {\n      throw new Error('Can\\'t use gemm on the given tensors');\n    }\n    let sharedDim = aShape[aShape.length - 1];\n    let line = '';\n    if (this.transA) {\n      sharedDim = aShape[0];\n    }\n    if (this.transA && this.transB) {\n      line = `value += _A_T(a) * _B_T(b);`;\n    } else if (this.transA && !this.transB) {\n      line = `value += _A_T(a) * _B(b);`;\n    } else if (!this.transA && this.transB) {\n      line = `value += _A(a) * _B_T(b);`;\n    } else if (!this.transA && !this.transB) {\n      line = `value += _A(a) * _B(b);`;\n    }\n    const rank = oShape.length;\n    const cRank = cShape.length;\n    const shaderSource = `\n      uniform sampler2D A;\n      uniform sampler2D B;\n      uniform sampler2D C;\n      uniform float alpha;\n      uniform float beta;\n\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          int c[${cRank}];\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          bcastIndices_C(indices, c);\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          value += beta * _C(c);\n          return value;\n      }`;\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\n    return {\n      hasMain: false,\n      inputLayouts,\n      outputLayout: inferenceHandler.createBasicTextureLayout(oShape),\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ImageScaler} from '../../../ops/image-scaler';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\n    const shaderSource = `\n      uniform sampler2D X;\n      uniform float bias[${this.bias.length}];\n      uniform float scale;\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n    return {\n      hasMain: false,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {'bias': this.bias, 'scale': this.scale}\n    };\n  }\n  private createGetBiasMethod(numChannels: number): string {\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n    for (let i = 0; i < numChannels; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            `\\t` +\n            `if (channel == ${i}) { return bias[${i}]; }`);\n      } else if (i === numChannels - 1) {\n        codeLines.push(\n            `\\t` +\n            `else { return bias[${i}]; }`);\n      } else {\n        codeLines.push(\n            `\\t` +\n            `else if (channel == ${i}) { return bias[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        `\\t` +\n        `}`);\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {LeakyRelu} from '../../../ops/leaky-relu';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const shaderSource = `\n      uniform sampler2D A;\n      void main() {\n        float v = texture2D(A, TexCoords).r;\n        gl_FragColor = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\n      }\n      `;\n    return {\n      hasMain: true,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class LeakyRelu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 0.01);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims;\n    const bShape = inputs[1].dims;\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n    if (!outputShape) {\n      throw new Error('Can\\'t use matmul on the given tensors');\n    }\n    const rank = outputShape.length;\n    const arank = aShape.length;\n    const brank = bShape.length;\n    const sharedDim = aShape[aShape.length - 1];\n    const shaderSource = `\n      uniform sampler2D A;\n      uniform sampler2D B;\n      float process(int indices[${rank}]) {\n          int a[${arank}];\n          int b[${brank}];\n          bcastMatmulIndices_A(indices, a);\n          bcastMatmulIndices_B(indices, b);\n\n          float value;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${arank - 1}] = k;\n              b[${brank - 2}] = k;\n              value += _A(a) * _B(b);\n          }\n          return value;\n      }`;\n    return {\n      hasMain: false,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Pad} from '../../../ops/pad';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {TextureLayout} from '../texture-data';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLPad extends Pad implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\n    const rank = outputShape.length;\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const padFunction = getPadFunction('A', alayout, this.mode, this.pads, this.value);\n    const shaderSource = `\n      uniform sampler2D A;\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n    return {\n      hasMain: false,\n      inputLayouts: [alayout],\n      outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\nexport function getPadFunction(\n    name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\n  switch (mode) {\n    case 'constant':\n      return getPadConstant(\n          name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\n    case 'reflect':\n      return getPadReflect(name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    case 'edge':\n      return getPadEdge(name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n}\nfunction getPadConstant(\n    name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number, height: number,\n    pads: number[], value: number) {\n  const rank = shape.length;\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n          k = m[${i}] - ${pads[i]};\n          if (k < 0)  return constant;\n          if (k >= ${shape[i]}) return constant;\n          offset += k * ${strides[i]};\n          `;\n  }\n  return `\n        float pad${name}(int m[${rank}]) {\n          const float constant = float(${value});\n          int offset = 0;\n          int k = 0;\n          ${block}\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(texture2D(${name}, coords));\n          return value;\n        }\n        `;\n}\nfunction getPadReflect(\n    name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number, height: number,\n    pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float pad${name}(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(texture2D(${name}, coords));\n        return value;\n      }\n      `;\n}\nfunction getPadEdge(\n    name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number, height: number,\n    pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n      k = m[${i}] - ${pads[i]};\n      if (k < 0)  k = 0;\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\n      offset += k * ${strides[i]};\n      `;\n  }\n  return `\n    float pad${name}(int m[${rank}]) {\n      int offset = 0;\n      int k = 0;\n      ${block}\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\n      float value = getColorAsFloat(texture2D(${name}, coords));\n      return value;\n    }\n    `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Pad implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.mode = attributes.getString('mode', 'constant');\n    this.value = attributes.getFloat('value', 0.0);\n    this.pads = attributes.getInts('pads');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected mode: string;\n  protected pads: number[];\n  protected value: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {TextureLayout} from '../texture-data';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\nfunction createAveragePoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const kernelSize = ShapeUtil.size(kernelShape);\n  const op1 = `value += _X(x);`;\n  let op2 = ``;\n  if (countIncludePad) {\n    op2 += `value /= float(${kernelSize});`;\n  } else {\n    op2 += `value /= float(${kernelSize} - pad);`;\n  }\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\n  const shaderSource = `\n      ${poolingCode}\n    `;\n  return {\n    hasMain: false,\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n    shaderSource,\n  };\n}\n\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreate(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreate(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\nfunction createMaxPoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const op1 = `\n              value = max(_X(x), value);\n      `;\n  const op2 = ``;\n  const inputLayout = inferenceHandler.createBasicTextureLayout(inputShape);\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\n  const shaderSource = `\n    ${poolingCode}\n  `;\n  return {\n    hasMain: false,\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n    shaderSource,\n  };\n}\n\nexport function GeneratePoolingCode(\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\n    startVal: string): string {\n  const inputDims = x.shape;\n  const rank = x.shape.length;\n  if (kernelShape.length <= 2) {\n    const kw = kernelShape[kernelShape.length - 1];\n    const sw = strides[strides.length - 1];\n    const pwStart = pads[pads.length / 2 - 1];\n    const pwEnd = pads[pads.length - 1];\n    const dimW = inputDims[rank - 1];\n    let codeW = ``;\n    let codeH = ``;\n    let codeHEnd = ``;\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n                    pad++;\n                    continue;\n                  }\n                  ${op1}\n                }`;\n    } else {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  ${op1}\n                }`;\n    }\n\n    if (kernelShape.length === 2) {\n      const kh = kernelShape[kernelShape.length - 2];\n      const sh = strides[strides.length - 2];\n      const phStart = pads[pads.length / 2 - 2];\n      const phEnd = pads[pads.length - 2];\n      const dimH = inputDims[rank - 2];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n              for (int j = 0; j < ${kh}; j++) {\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                  pad+= ${kw};\n                  continue;\n                }\n            `;\n      } else {\n        codeH = `\n                for (int j = 0; j < ${kh}; j++) {\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            uniform sampler2D X;\n            float process(int indices[${rank}]) {\n              int x[${rank}];\n              copyVec(indices, x);\n\n              float value = ${startVal};\n              int pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n              return value;\n            }\n          `;\n    return poolingCode;\n  } else {\n    const kernelSize = ShapeUtil.size(kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = pads.length;\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\n    const copyInputDims = copyArray(inputDims, 'inputDims');\n    const copyPads = copyArray(pads, 'pads');\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n    const copyStrides = copyArray(strides, 'strides');\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\n    let padCode = ``;\n    if (hasPads) {\n      padCode = `\n                if (x[j] >= inputDims[j] || x[j] < 0) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n                  }\n                  ${op1}`;\n    }\n    const poolingCode = `\n            uniform sampler2D X;\n            ${offsetToIndicesFunction}\n            float process(int indices[${rank}]) {\n                int x[${rank}];\n                copyVec(indices, x);\n                int offset[${stridesRank}];\n                int pads[${padsRank}];\n                int inputDims[${rank}];\n                int kernelStrides[${stridesRank}];\n                int strides[${stridesRank}];\n                ${copyPads}\n                ${copyInputDims}\n                ${copyStrides}\n                ${copyKernelStrides}\n\n                float value = ${startVal};\n                int pad = 0;\n                bool isPad = false;\n                for (int i = 0; i < ${kernelSize}; i++) {\n                    offsetToIndices(i, kernelStrides, offset);\n                    isPad = false;\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n                      ${padCode}\n                }\n                ${op2}\n\n                return value;\n            }`;\n    return poolingCode;\n  }\n}\n\nexport function copyArray(array: ReadonlyArray<number>, arrayName: string): string {\n  let block = ``;\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n}\n\nexport function offsetToIndices(rank: number): string {\n  return `\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n      if (${rank} == 0) {\n        return;\n      }\n      for (int i = 0; i < ${rank} - 1; ++i) {\n        indices[i] = offset / strides[i];\n        offset -= indices[i] * strides[i];\n      }\n      indices[${rank} - 1] = offset;\n    }`;\n}\n","// Licensed under the MIT license.\n\nimport {ReduceBase} from '../../../ops/reduce-op';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\n  abstract getOps(inputs: Tensor[]): string[];\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape: number[] = [];\n    const iRank = inputs[0].dims.length;\n\n    const idxCopy = [];  // copy output indexes to input indexes\n\n    const ops = this.getOps(inputs);  // [init ops, reduce ops, final ops]\n    let reduceOps = ops[1];\n\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      // if this axis is reduced\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\n        if (this.keepDims) {\n          outputShape.push(1);\n        }  // else { remove the axis from outputShape; }\n\n        // loop over the d-th axis\n        reduceOps = `\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n          inputIdx[${k}] = j${k};\n          ${reduceOps}\n        }\n        `;\n      } else {\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n        outputShape.push(inputs[0].dims[k]);\n      }\n    }\n\n    const oRank = outputShape.length;\n\n    const shaderSource = `\n      uniform sampler2D A;\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n    return {\n      hasMain: false,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLReduceSum extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceMean extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n  }\n}\n\nexport class WebGLReduceMax extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceMin extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceProd extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n  }\n}\n\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n  }\n}\n","// Licensed under the MIT license.\n\nimport {Slice} from '../../../ops/slice';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLSlice extends Slice implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const x = inputs[0];\n    let axes = this.axes;\n    let starts = this.starts;\n    let ends = this.ends;\n\n    if (axes.length === 0) {\n      axes = x.dims.slice(0).map((val, ind) => ind);\n    }\n    axes = axes.map(axis => ShapeUtil.parseAxis(axis, x.dims.length));\n    starts = starts.map((start, ind) => {\n      if (start > x.dims[axes[ind]] - 1) {\n        return x.dims[axes[ind]];\n      }\n      return ShapeUtil.parseAxis(start, x.dims[axes[ind]]);\n    });\n    ends = ends.map((end, ind) => {\n      if (end > x.dims[axes[ind]] - 1) {\n        return x.dims[axes[ind]];\n      }\n      return ShapeUtil.parseAxis(end, x.dims[axes[ind]]);\n    });\n\n    const outputShape = x.dims.slice();\n\n    const sliceOps: string[] = [];\n    for (let i = 0; i < axes.length; i++) {\n      outputShape[axes[i]] = ends[i] - starts[i];\n      if (starts[i] > 0) {\n        sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\n      }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\n    }\n\n    const rank = outputShape.length;\n    const shaderSource = `\n    uniform sampler2D A;\n    float process(int outputIdx[${rank}]) {\n      ${sliceOps.join('\\n      ')}\n      return _A(outputIdx);\n    }`;\n    return {\n      hasMain: false,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {Artifact, RunData} from '../program-manager';\nimport {TextureLayout} from '../texture-data';\n\nexport class WebGLSoftmax extends Softmax {\n  constructor() {\n    super();\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((pi, i) => {\n        const artifact = inferenceHandler.programManager.build(pi);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.programManager.run(this.artifacts[i], v));\n    // return only the last output\n    return [inferenceHandler.getTensor(runDatas.pop()!.outputTextureData)];\n  }\n  createSoftMaxProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\n    const inputShape = input.dims.slice();\n    const inputLayout = inferenceHandler.createBasicTextureLayout(inputShape);\n    const outputShape = inputShape;\n    const rank = outputShape.length;\n    const textureWidth = inputLayout.width;\n    const textureHeight = inputLayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\n    }\n\n    const shaderSource = `\n    uniform sampler2D A;\n    uniform sampler2D Max;\n    uniform sampler2D Norm;\n    float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${D};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n    return {\n      hasMain: false,\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\n      outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n\n  /**\n   * Create a texture that contains the normalization factor for each of the 'N' rows\n   */\n  createComputScaleProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\n      outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createBasicTextureLayout(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error(`Dimensionality of the output should be 1`);\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error(`Shape of the output should be equal to logical row count`);\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1) {\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N) {\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\n    }\n\n    const shaderSource = `\n    uniform sampler2D A;\n    uniform sampler2D Max;\n    float process(int[${rank}] indices) {\n\n      int logical_row_start_offset = indices[0] * ${D};\n\n      float norm_factor = 0.0;\n      float max = _Max(indices);\n      for(int i=0; i<${D}; ++i)\n      {\n        norm_factor += exp(getColorAsFloat(texture2D(A, offsetToCoords(logical_row_start_offset + i, ${textureWidth}, ${\n        textureHeight}))) - max);\n      }\n\n      return norm_factor;\n    }`;\n    return {\n      hasMain: false,\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\n      outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  /**\n   * Create a texture that contains the maximum value of each of the 'N' rows\n   */\n  createComputeMaxProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createBasicTextureLayout(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error(`Dimensionality of the output should be 1`);\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error(`Shape of the output should be equal to logical row count`);\n    }\n\n    const shaderSource = `\n        uniform sampler2D A;\n        float process(int[${rank}] indices) {\n\n          int logical_row_start_offset = indices[0] * ${D};\n\n          float max = getColorAsFloat(texture2D(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\n        textureHeight} )));\n          for(int i=1; i<${D}; ++i)\n          {\n            float current = getColorAsFloat(texture2D(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight})));\n            if(current > max)\n              max = current;\n          }\n\n          return max;\n        }`;\n    return {\n      hasMain: false,\n      inputLayouts: [xlayout],\n      outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const inputShape = inputs[0].dims.slice();\n    const axisCorrected = ShapeUtil.parseAxis(this.axis, inputShape.length);\n    const N = ShapeUtil.sizeToDimension(inputShape, axisCorrected);\n    const D = ShapeUtil.sizeFromDimension(inputShape, axisCorrected);\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\n    const computeScaleProgramInfo =\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreate(inputs[0], programInfos[0].inputLayouts[0]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    for (let i = 1; i < programInfos.length; ++i) {\n      runDatas.push({\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\n        uniformData: {}\n      });\n    }\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Split} from '../../../ops/split';\nimport {Tensor} from '../../../tensor';\nimport {SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {Artifact, RunData} from '../program-manager';\n\nexport class WebGLSplit extends Split {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const count = this.getProgramCount(inferenceHandler, inputs);\n    if (!this.artifacts) {\n      this.artifacts = [];\n      for (let i = 0; i < count; ++i) {\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], i);\n        const artifact = inferenceHandler.programManager.build(programInfo);\n        this.artifacts.push(artifact);\n      }\n    }\n    const results: Tensor[] = [];\n\n    this.artifacts.forEach(artifact => {\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\n      inferenceHandler.programManager.run(artifact, rundata);\n      results.push(inferenceHandler.getTensor(rundata.outputTextureData));\n    });\n    return results;\n  }\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): number {\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, this.axis, this.split, this.numOutputs);\n    return offsets.length;\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, index: number): ProgramInfo {\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, this.axis, this.split, this.numOutputs);\n    const offset = offsets[index];\n    const outputShape = shapes[index];\n    const rank = outputShape.length;\n    const shaderSource = `\n      uniform sampler2D A;\n      float process(int indices[${rank}]) {\n        indices[${this.axis}] += ${offset};\n        return _A(indices);\n      }`;\n    return {\n      hasMain: false,\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\n      outputLayout: inferenceHandler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Split implements Operator {\n  constructor(protected numOutputs?: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n    this.split = attributes.getInts('split', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected split: number[];\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Squeeze} from '../../../ops/squeeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLSqueeze extends Squeeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLSum extends Sum implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const sumLine = inputs.map((v, i) => `texture2D(X${i},TexCoords)`).join(' + ');\n    const inputUniforms = inputs.map((v, i) => `uniform sampler2D X${i};`);\n    const shaderSource = `\n      ${inputUniforms.join('\\n')}\n      void main() {\n        vec4 result = ${sumLine};\n        gl_FragColor = result;\n      }`;\n    return {\n      hasMain: true,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Licensed under the MIT license.\n\nimport {Tile} from '../../../ops/tile';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLTile extends Tile implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\n\n    const tileOps: string[] = [];\n    for (let i = 0; i < inputShape.length; i++) {\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n    }\n\n    const rank = outputShape.length;\n    const shaderSource = `\n    uniform sampler2D A;\n    float process(int outputIdx[${rank}]) {\n      int inputIdx[${rank}];\n      ${tileOps.join('\\n')}\n      return _A(inputIdx);\n    }`;\n    return {\n      hasMain: false,\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createBasicTextureLayout(outputShape),\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreate(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Transpose} from '../../../ops/transpose';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {PositionalSubOperator, WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLTranspose extends Transpose implements WebGLOperator, PositionalSubOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  getOutputShape(handler: WebGLInferenceHandler, inputShapes: Array<ReadonlyArray<number>>): ReadonlyArray<number> {\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShapes = inputs.map(t => t.dims.slice());\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    const unpackedOutputShape = this.getOutputShape(handler, inputShapes);\n    const rank = inputs[0].dims.length;\n    const shaderSource = `\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      uniform sampler2D A;\n      ${this.getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n    const positionalSubFunctions =\n        WebGLOperatorHelper.getPositionalFunctions(handler, this.positionalSubs, unpackedOutputShape);\n    const outputLayout = WebGLOperatorHelper.getFinalLayout(handler, positionalSubFunctions, unpackedOutputShape, 1);\n    return {\n      hasMain: false,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout,\n      shaderSource,\n      positionalSubFunctions\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\n    const outputShape = this.getOutputShape(handler, [inputShape]);\n    if (!name) {\n      name = 'perm';\n    }\n    return {\n      name,\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\n      type: FunctionType.Positional,\n      inputShape,\n      outputShape\n    };\n  }\n  addPositionalSub(positionalSubOperator: PositionalSubOperator): void {\n    this.positionalSubs.push(positionalSubOperator);\n  }\n  protected getAdjustedPerm(inputShape: ReadonlyArray<number>): number[] {\n    let perm = this.perm;\n    if (perm && perm.length !== inputShape.length) {\n      perm = [...(inputShape.keys())].reverse();\n    }\n    return perm;\n  }\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\n    const reverseFunc = [];\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n    for (let i = 0; i < rank; ++i) {\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n    }\n    reverseFunc.push('\\t}');\n    return reverseFunc.join('\\n');\n  }\n  protected positionalSubs: PositionalSubOperator[] = [];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../../../attribute';\nimport {UnaryOp} from '../../../ops/unary-op';\nimport {Tensor} from '../../../tensor';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo} from '../program-info';\nimport {RunData} from '../program-manager';\nimport {PositionalSubOperator, WebGLOperator} from '../webgl-operator';\nimport {WebGLOperatorHelper} from '../webgl-operator-utils';\n\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction) {\n    super(typeConstraint);\n  }\n  initialize(attributes: Attribute): void {}\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return WebGLOperatorHelper.run(this, inferenceHandler, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\n    const shaderSource = `\n      uniform sampler2D A;\n      ${this.glslFunc.body}\n      void main() {\n        vec4 v = texture2D(A, TexCoords);\n        v = ${this.glslFunc.name}(v);\n        gl_FragColor = v;\n      }\n      `;\n    const outputLayout = handler.createBasicTextureLayout(outputShape);\n    return {hasMain: true, inputLayouts: [inputLayout], outputLayout, shaderSource};\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreate(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].dataType),\n      uniformData: {}\n    };\n  }\n  addPositionalSub(positionalSubOperator: PositionalSubOperator): void {\n    throw new Error('Unary ops don\\'t use index-based functions or subops');\n  }\n}\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = `indentity_`;\n  const body = `\n  float ${name}(float a) {\n    return a;\n  }\n  vec4 ${name}(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = `neg_`;\n  const body = `\n  float ${name}(float a) {\n    return -a;\n  }\n  vec4 ${name}(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = `not_`;\n  const body = `\n  float ${name}(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}(bool a) {\n    return !a;\n  }\n  vec4 ${name}(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = `relu_`;\n  const body = `\n  float ${name}(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = `sigmoid_`;\n  const body = `\n  float ${name}(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = `tanh_`;\n  const body = `\n  float ${name}(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a) {\n    return ${fname}(a);\n  }\n  vec4 ${name}(vec4 v) {\n    return ${fname}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Unsqueeze} from '../../../ops/unsqueeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLUnsqueeze extends Unsqueeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {ProgramInfo} from './program-info';\nimport {TextureData} from './texture-data';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Information extracted from Shader source to help with binding later\n */\nexport class VariableInfo {\n  type: string;\n  name: string;\n  isVec: boolean;\n  arraySuffix?: string;\n}\n/**\n * LocationInfo contains a mappig from a variable name (inside shader)\n * to its \"location\" in the compiled program\n */\nexport class LocationInfo {\n  variable: VariableInfo;\n  location: WebGLUniformLocation|number;\n}\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: {[name: string]: LocationInfo};\n  attribLocations: {[name: string]: LocationInfo};\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n\nexport class RunData {\n  inputTextureDatas: TextureData[];\n  outputTextureData: TextureData;\n  uniformData: UniformData;\n  preRun?: (glContext: WebGLContext, artifact: Artifact) => void;\n  postRun?: (glContext: WebGLContext, artifact: Artifact) => void;\n  draw?: (glContext: WebGLContext, artifact: Artifact) => void;\n}\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  // tslint:disable-next-line:ban-types\n  repo: Map<Object, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(public profiler: Readonly<Profiler>, public glContext: WebGLContext) {\n    this.repo = new Map();\n    this.glContext = glContext;\n    this.attributesBound = false;\n  }\n  getArtifact(key: {}): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: {}, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, runData: RunData): void {\n    this.profiler.event('backend', 'ProgramManager.run', () => {\n      if (runData.preRun) {\n        Logger.verbose('ProgramManager', 'PreRun');\n        runData.preRun(this.glContext, buildArtifact);\n      }\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(runData.outputTextureData);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData);\n        this.bindTextures(buildArtifact.uniformLocations, runData.inputTextureDatas);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        if (buildArtifact.programInfo.blockSize) {\n          this.doBlockDraw(buildArtifact, runData);\n        } else {\n          this.doDraw(buildArtifact, runData);\n        }\n        gl.flush();\n      });\n      if (runData.postRun) {\n        Logger.verbose('ProgramManager', 'PostRun');\n        runData.postRun(this.glContext, buildArtifact);\n      }\n    });\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\n      preprocessor.extractAttribInfo(this.getDefaultVertexShaderSource());\n      const fragScript = preprocessor.preprocess();\n      try {\n        const attribInfos = preprocessor.context.attribInfo;\n        const uniformInfos = preprocessor.context.uniformInfo;\n        const program = this.compile(fragScript);\n        const artifact = {\n          programInfo,\n          program,\n          uniformLocations: this.getUniformLocations(program, uniformInfos),\n          attribLocations: this.getAttribLocations(program, attribInfos)\n        };\n        return artifact;\n      } catch (err) {\n        Logger.error('ProgramManager', fragScript);\n        throw err;\n      }\n    });\n  }\n  protected doDraw(artifact: Artifact, runData: RunData): void {\n    if (runData.draw) {\n      Logger.verbose('ProgramManager', 'Custom draw function');\n      runData.draw(this.glContext, artifact);\n    } else {\n      this.glContext.draw();\n    }\n  }\n  protected doBlockDraw(artifact: Artifact, runData: RunData): void {\n    const gl = this.glContext.gl;\n    const [blockWidth, blockHeight] = artifact.programInfo.blockSize;\n    const widthLocation = artifact.uniformLocations.blockWidth.location;\n    const heightLocation = artifact.uniformLocations.blockHeight.location;\n    const yOffsetLocation = artifact.uniformLocations.blockYOffset.location;\n    const xOffsetLocation = artifact.uniformLocations.blockXOffset.location;\n    const height = runData.outputTextureData.height;\n    const width = runData.outputTextureData.width;\n\n    for (let col = 0; col < width; col += blockWidth) {\n      const colCount = Math.min(blockWidth, width - col);\n      gl.uniform1i(widthLocation, colCount);\n      gl.uniform1i(xOffsetLocation, col);\n      for (let row = 0; row < height; row += blockHeight) {\n        const rowCount = Math.min(blockHeight, height - row);\n        Logger.verbose('ProgramManager', `row=${row}, rowCount=${rowCount}, col=${col}, colCount=${colCount}`);\n        gl.viewport(col, row, colCount, rowCount);\n        gl.uniform1i(heightLocation, rowCount);\n        gl.uniform1i(yOffsetLocation, row);\n        this.doDraw(artifact, runData);\n      }\n    }\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      this.vertexShader =\n          this.glContext.compileShader(this.getDefaultVertexShaderSource(), WebGLRenderingContext.VERTEX_SHADER);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, WebGLRenderingContext.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    Logger.verbose('ProrgramManager', `Binding output texture to Framebuffer:\n       w/h: ${td.width}/${td.height},\n       shape: ${td.shape},\n       type: ${td.dataType}\n    `);\n    this.glContext.attachFramebuffer(td.texture, td.width, td.height);\n  }\n  bindAttributes(attribLocations: {[name: string]: LocationInfo}): void {\n    const positionHandle = attribLocations.position.location as number;\n    const textureCoordHandle = attribLocations.textureCoord.location as number;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniformArray(location: WebGLUniformLocation, type: string, value: number[]): void {\n    const gl = this.glContext.gl;\n    switch (type) {\n      case 'float':\n        gl.uniform1fv(location, value);\n        break;\n      case 'int':\n        gl.uniform1iv(location, value);\n        break;\n      default:\n        throw new Error('Uniform not implemented: ' + type);\n    }\n    this.glContext.checkError();\n  }\n  bindUniform(location: WebGLUniformLocation, type: string, value: number): void {\n    const gl = this.glContext.gl;\n    switch (type) {\n      case 'float':\n        gl.uniform1f(location, value);\n        break;\n      case 'int':\n        gl.uniform1i(location, value);\n        break;\n      default:\n        throw new Error('Uniform not implemented: ' + type);\n    }\n    this.glContext.checkError();\n  }\n  bindUniforms(uniformLocations: {[name: string]: LocationInfo}, inputScalars: UniformData): void {\n    if (!inputScalars) {\n      return;\n    }\n    Object.keys(uniformLocations).forEach(key => {\n      const li = uniformLocations[key];\n      if (!li.variable.type.startsWith('sampler')) {\n        const value = inputScalars[li.variable.name];\n        if (li.variable.isVec) {\n          this.bindUniformArray(li.location, li.variable.type, value as number[]);\n        } else {\n          this.bindUniform(li.location, li.variable.type, value as number);\n        }\n      }\n    });\n  }\n  bindTextures(uniformLocations: {[name: string]: LocationInfo}, textures: TextureData[]): void {\n    if (!textures) {\n      return;\n    }\n    Object.keys(uniformLocations).forEach((key, i) => {\n      const li = uniformLocations[key];\n      if (li.variable.type.startsWith('sampler')) {\n        const tex = textures[i];\n        this.bindTexture(tex, li.location, i++);\n      }\n    });\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram, variableInfos: VariableInfo[]): {[name: string]: LocationInfo} {\n    const locationInfos: {[name: string]: LocationInfo} = {};\n    variableInfos.forEach(vi => {\n      const li = new LocationInfo();\n      li.variable = vi;\n      li.location = this.getAttribLocation(program, vi.name);\n      locationInfos[vi.name] = li;\n    });\n    return locationInfos;\n  }\n  getUniformLocations(program: WebGLProgram, variableInfos: VariableInfo[]): {[name: string]: LocationInfo} {\n    const locationInfos: {[name: string]: LocationInfo} = {};\n    variableInfos.forEach(vi => {\n      const li = new LocationInfo();\n      li.variable = vi;\n      li.location = this.getUniformLocation(program, vi.name);\n      locationInfos[vi.name] = li;\n    });\n    return locationInfos;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error('Uniform ' + name + ' not found.');\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    if (attributeLocation === -1) {\n      throw new Error('Attribute ' + name + ' not found.');\n    }\n    return attributeLocation;\n  }\n  protected getDefaultVertexShaderSource(): string {\n    return `\n        precision highp float;\n        attribute vec3 position;\n        attribute vec2 textureCoord;\n\n        varying vec2 TexCoords;\n\n        void main()\n        {\n            gl_Position = vec4(position, 1.0);\n            TexCoords = textureCoord;\n        }`;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {GlslFunctionInliner} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {ProgramInfo} from './program-info';\nimport {VariableInfo} from './program-manager';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  context: GlslContext;\n  libs: {[name: string]: GlslLib};\n  inliner: GlslFunctionInliner;\n  glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n  shaderSource: string;\n\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\n    this.context = new GlslContext(glContext, programInfo, [], []);\n    this.inliner = new GlslFunctionInliner();\n    this.libs = {};\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n    this.shaderSource = this.extractUniformInfo(programInfo.shaderSource);\n    this.glslLibRoutineDependencyGraph = this.constructGlslRoutineDependencyGraph();\n  }\n\n  preprocess(): string {\n    let s = this.shaderSource;\n    if (!this.context.programInfo.hasMain) {\n      s = this.addClosing(s);\n    }\n    s = this.processImports(s);\n    s = this.processMacros(s);\n    s = this.processInlines(s);\n    s = this.addUniforms(s, this.context.uniformInfo);\n    s = this.addPreamble(s);\n    return s;\n  }\n  extractAttribInfo(shaderSource: string): void {\n    const attribRegex = /^\\s*attribute (\\w+) (\\w+);/gm;\n    for (const item of this.getVariableMatches(attribRegex, shaderSource)) {\n      const matches = item as string[];\n      this.context.attribInfo.push({type: matches[0], name: matches[1], isVec: matches[2] ? true : false});\n    }\n  }\n  extractUniformInfo(shaderSource: string): string {\n    const uniformRegex = /^\\s*uniform (?:\\w+ )?(\\w+) (\\w+)(\\[\\d+\\])?;/gm;\n    for (const item of this.getVariableMatches(uniformRegex, shaderSource)) {\n      const matches = item as string[];\n      this.context.uniformInfo.push(\n          {type: matches[0], name: matches[1], isVec: matches[2] ? true : false, arraySuffix: matches[2]});\n    }\n    if (this.context.programInfo.blockSize) {\n      ['blockWidth', 'blockHeight', 'blockYOffset', 'blockXOffset'].forEach(\n          name => this.context.uniformInfo.push({type: 'int', name, isVec: false, arraySuffix: ''}));\n    }\n    return shaderSource.replace(uniformRegex, '');\n  }\n  protected addPreamble(script: string): string {\n    return `\n    precision highp float;\n    precision highp int;\n    varying vec2 TexCoords;\n\n    ${script}\n    `;\n  }\n  protected addClosing(script: string): string {\n    let currentIndexVar = 'indices';\n    const rank = this.context.programInfo.outputLayout.shape.length;\n    // these should be traversed in the reverse order since the very\n    // first set of indices are the outer most indices\n    const positionalSubs = this.context.programInfo.positionalSubFunctions;\n    if (positionalSubs) {\n      positionalSubs.reverse();\n    }\n    const positionalBodies = positionalSubs ? positionalSubs.map(fn => fn.body).join('\\n') : '';\n    const callLines: string[] = [];\n    if (positionalSubs) {\n      let lastIndexVar = 'indices';\n      let counter = 1;\n      positionalSubs.forEach(fn => {\n        callLines.push(`int indices_${counter}[${fn.inputShape.length}];`);\n        callLines.push(`${fn.name}(indices_${counter}, ${lastIndexVar});`);\n        lastIndexVar = `indices_${counter}`;\n        currentIndexVar = `indices_${counter}`;\n        ++counter;\n      });\n    }\n    const valueSubs = this.context.programInfo.valueSubFunctions;\n    const valueBodies = valueSubs ? valueSubs.map(fn => fn.body).join('\\n') : '';\n    const valueCallLines: string[] = [];\n    if (valueSubs) {\n      valueSubs.forEach(fn => {\n        valueCallLines.push(`result = ${fn.name}(result);`);\n      });\n    }\n    return `\n    ${script}\n    ${positionalBodies}\n    ${valueBodies}\n    void main() {\n      int indices[${rank}];\n      toVec(TexCoords, indices);\n      ${callLines.join('\\n')}\n      vec4 result = vec4(process(${currentIndexVar}));\n      ${valueCallLines.join('\\n')}\n      gl_FragColor = result;\n    }\n    `;\n  }\n  protected processImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return `\n      ${script}\n      `;\n    }\n\n    let routines = ``;\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + `\\n`;\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return `\n    ${routines}\n    ${script}\n    `;\n  }\n  protected addUniforms(script: string, uniforms: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    uniforms.forEach(vi => {\n      const arraySuffix = vi.arraySuffix ? vi.arraySuffix : '';\n      uniformLines.push(`uniform ${vi.type} ${vi.name}${arraySuffix};`);\n    });\n    return `\n    ${uniformLines.join('\\n')}\n    ${script}\n    `;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  private constructGlslRoutineDependencyGraph(): {[routineName: string]: GlslLibRoutineNode;} {\n    const map: {[routineName: string]: GlslLibRoutineNode;} = {};\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n  protected processMacros(script: string): string {\n    return script;\n  }\n  protected processInlines(script: string): string {\n    return this.inliner.inline(script);\n  }\n  protected getVariableMatches(regex: RegExp, src: string): object[] {\n    const result: object[] = [];\n    let match;\n    while ((match = regex.exec(src)) !== null) {\n      if (match.length === 4) {\n        result.push([match[1], match[2], match[3]]);\n      } else {\n        result.push([match[1], match[2], null]);\n      }\n    }\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * GLSL preprocessor class responsible for resolving @inline directives\n */\nexport class GlslFunctionInliner {\n  // tslint:disable-next-line:variable-name\n  static readonly InlineFuncDefRegex: RegExp =\n      /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\n  // tslint:disable-next-line:variable-name\n  static readonly FuncCallRegex = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n\n  inline(script: string) {\n    const inlineDefs: {[name: string]: {params: Array<{type: string, name: string}|null>, body: string}} = {};\n    let match;\n    while ((match = GlslFunctionInliner.InlineFuncDefRegex.exec(script)) !== null) {\n      const params = match[3]\n                         .split(',')\n                         .map(s => {\n                           const tokens = s.trim().split(' ');\n                           if (tokens && tokens.length === 2) {\n                             return {type: tokens[0], name: tokens[1]};\n                           }\n                           return null;\n                         })\n                         .filter(v => v !== null);\n      inlineDefs[match[2]] = {params, body: match[4]};\n    }\n    for (const name in inlineDefs) {\n      const regexString = GlslFunctionInliner.FuncCallRegex.replace('__FUNC__', name);\n      const regex = new RegExp(regexString, 'gm');\n      while ((match = regex.exec(script)) !== null) {\n        const type = match[1];\n        const variable = match[2];\n        const params = match[3].split(',');\n        const declLine = (type) ? `${type} ${variable};` : '';\n        let newBody: string = inlineDefs[name].body;\n        let paramRedecLine = '';\n        inlineDefs[name].params.forEach((v, i) => {\n          if (v) {\n            paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n          }\n        });\n        newBody = `${paramRedecLine}\\n ${newBody}`;\n        newBody = newBody.replace('return', `${variable} = `);\n        const replacement = `\n        ${declLine}\n        {\n          ${newBody}\n        }\n        `;\n        script = script.replace(match[0], replacement);\n      }\n    }\n    script = script.replace(GlslFunctionInliner.InlineFuncDefRegex, '');\n    return script;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib.';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.offsetToCoords(), ...this.coordsToOffset(), ...this.toVec(), ...this.valueFrom()};\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = `offsetToCoords`;\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = `coordsToOffset`;\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine;} {\n    const output = this.context.programInfo.outputLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const offsetFromBlocks = (this.context.programInfo.blockSize) ? `\n      int offsetFromBlocks(vec2 coords, int blockWidth, int blockHeight,\n          int blockXOffset, int blockYOffset, int totalWidth) {\n        coords = TexCoords * vec2(blockWidth, blockHeight) + vec2(blockXOffset, blockYOffset);\n        return int(coords.t) * totalWidth + int(coords.s);\n      }` :\n                                                                    '';\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const offsetLine = (this.context.programInfo.blockSize) ? `\n      int offset = offsetFromBlocks(TexCoords, blockWidth, blockHeight, blockXOffset, blockYOffset, ${xScale});` :\n\n                                                              `\n      int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});`;\n    const body = `\n      ${offsetFromBlocks}\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        ${offsetLine}\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.uniformInfo.filter(ui => ui.type === 'sampler2D').forEach((ui, i) => {\n      const name = ui.name;\n      const layout = programInfo.inputLayouts[i];\n      const shape = layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(texture2D(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string;} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string;} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            gl_FragColor = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.uniformInfo.filter(ui => ui.type === 'sampler2D').forEach((ui, i) => {\n      const name = ui.name;\n      const shape = programInfo.inputLayouts[i].shape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.uniformInfo.filter(ui => ui.type === 'sampler2D').forEach((ui, i) => {\n      const name = ui.name;\n      const shape = programInfo.inputLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.uniformInfo.filter(ui => ui.type === 'sampler2D').forEach((ui, i) => {\n      const name = ui.name;\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.uniformInfo.filter(ui => ui.type === 'sampler2D').forEach((ui, i) => {\n      const name = ui.name;\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.uniformInfo.filter(ui => ui.type === 'sampler2D').forEach((ui, i) => {\n      const name = ui.name;\n      const shape = programInfo.inputLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string;} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string;} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine;} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {TextureData, TextureLayout} from './texture-data';\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Texture Manager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureHelper is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureHelper {\n  glContext: WebGLContext;\n  gl: WebGLRenderingContext;\n  layoutStrategy: TextureLayoutStrategy;\n  profiler: Readonly<Profiler>;\n\n  constructor(context: WebGLContext, layoutStrategy: TextureLayoutStrategy, profiler: Readonly<Profiler>) {\n    this.glContext = context;\n    this.gl = context.gl;\n    this.layoutStrategy = layoutStrategy;\n    this.profiler = profiler;\n  }\n  createTextureFromLayout(dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType) {\n    let texture: WebGLTexture;\n    const textureDataType = this.toEncoderType(dataType);\n    const size = `${layout.width}-${layout.height}`;\n\n    Logger.verbose('TextureHelper', `Creating new texture of size ${size}`);\n    texture = this.glContext.allocateTexture(\n        layout.width, layout.height, textureDataType, layout.channels, this.toTextureData(dataType, data));\n\n    return {...layout, dataType, texture};\n  }\n  createTexture(\n      dataType: Tensor.DataType, shape: ReadonlyArray<number>, strides?: ReadonlyArray<number>,\n      data?: Tensor.NumberType, channels?: number, width?: number, height?: number,\n      unpackedShape?: ReadonlyArray<number>): TextureData {\n    return this.profiler.event('backend', 'TextureHelper.createTexture', () => {\n      if (!width || !height) {\n        [width, height] = this.layoutStrategy.computeTextureWH(shape);\n      }\n      if (!strides) {\n        strides = ShapeUtil.computeStrides(shape);\n      }\n      if (!channels || channels === 1) {\n        channels = 1;\n        unpackedShape = shape;\n      }\n      if (channels > 1 && !unpackedShape) {\n        throw new Error('unpacked shape is needed when the number of channels is > 1');\n      }\n      const layout = {width, height, channels, shape, strides, unpackedShape: unpackedShape!};\n      return this.createTextureFromLayout(dataType, layout, data);\n    });\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureHelper.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureHelper.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(texture: WebGLTexture): void {\n    return this.profiler.event('backend', 'TextureHelper.releaseTexture', () => {\n      this.glContext.deleteTexture(texture);\n    });\n  }\n  createPaddedTexture(inputTextureData: TextureData, outputLayout: TextureLayout): TextureData {\n    const inputTexture = inputTextureData.texture;\n    const [inputWidth, inputHeight] = [inputTextureData.width, inputTextureData.height];\n    const outputTD = this.createTextureFromLayout(inputTextureData.dataType, outputLayout);\n\n    const gl = this.gl;\n    this.glContext.attachFramebuffer(inputTexture, inputWidth, inputHeight);\n    gl.bindTexture(gl.TEXTURE_2D, outputTD.texture);\n    gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, inputWidth, inputHeight);\n\n    return outputTD;\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n        return new Int16Array(data);\n      case 'int32':\n        return new Int32Array(data);\n      case 'int8':\n        return new Int8Array(data);\n      case 'uint16':\n        return new Uint16Array(data);\n      case 'uint32':\n        return data as Uint32Array;\n      case 'uint8':\n      case 'bool':\n        return data as Uint8Array;\n      case 'float32':\n        return data as Float32Array;\n      case 'float64':\n        return new Float64Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../instrument';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis: number;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU\\'s boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\nimport {WebGLExperimentalContext} from './webgl-experimental-context';\nimport {WebGL1Context} from './webgl1-context';\nimport {WebGL2Context} from './webgl2-context';\n\n/**\n * This factory class creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport class WebGLContextFactory {\n  static create(contextId?: 'webgl'|'webgl2'|'experimental-webgl', contextAttributes?: WebGLContextAttributes):\n      WebGLContext {\n    const canvas = this.createCanvas();\n    if (contextAttributes == null) {\n      contextAttributes = {\n        alpha: false,\n        depth: false,\n        antialias: false,\n        stencil: false,\n        preserveDrawingBuffer: false,\n        premultipliedAlpha: false,\n        failIfMajorPerformanceCaveat: false\n      };\n    }\n    let gl: WebGLRenderingContext|null;\n    const ca = contextAttributes;\n    if (!contextId || contextId === 'webgl2') {\n      gl = canvas.getContext('webgl2', ca);\n      if (gl) {\n        try {\n          return new WebGL2Context(canvas, gl, ca);\n        } catch (err) {\n          Logger.warning('GlContextFactory', `failed to create WebGL2Context. Error: ${err}`);\n        }\n      }\n    }\n    if (!contextId || contextId === 'webgl') {\n      gl = canvas.getContext('webgl', ca);\n      if (gl) {\n        try {\n          return new WebGL1Context(canvas, gl, ca);\n        } catch (err) {\n          Logger.warning('GlContextFactory', `failed to create WebGL1Context. Error: ${err}`);\n        }\n      }\n    }\n    if (!contextId || contextId === 'experimental-webgl') {\n      gl = canvas.getContext('experimental-webgl', ca);\n      if (gl) {\n        try {\n          return new WebGLExperimentalContext(canvas, gl, ca);\n        } catch (err) {\n          Logger.warning('GlContextFactory', `failed to create WebGLExperimentalContext. Error: ${err}`);\n        }\n      }\n    }\n\n    throw new Error('WebGL is not supported');\n  }\n  static createCanvas(): HTMLCanvasElement {\n    const canvas: HTMLCanvasElement = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    return canvas;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BaseWebGLContext} from './base-webgl-context';\n\nexport class WebGLExperimentalContext extends BaseWebGLContext {\n  constructor(\n      public canvas: HTMLCanvasElement, public gl: WebGLRenderingContext,\n      public contextAttributes: WebGLContextAttributes) {\n    super();\n    this.init();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BaseWebGLContext} from './base-webgl-context';\n\nexport class WebGL1Context extends BaseWebGLContext {\n  constructor(\n      public canvas: HTMLCanvasElement, public gl: WebGLRenderingContext,\n      public contextAttributes: WebGLContextAttributes) {\n    super();\n    this.init();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BaseWebGLContext} from './base-webgl-context';\nimport {DataEncoder, Encoder, RedFloat32DataEncoder,} from './texture-data-encoder';\n\nexport class WebGL2Context extends BaseWebGLContext {\n  max3DTextureSize: number;\n  maxArrayTextureLayers: number;\n  maxColorAttachments: number;\n  maxDrawBuffers: number;\n  colorBufferFloatExtension: {};\n\n  constructor(\n      public canvas: HTMLCanvasElement, public gl: WebGLRenderingContext,\n      public contextAttributes: WebGLContextAttributes) {\n    super();\n    this.init();\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number): DataEncoder {\n    return new RedFloat32DataEncoder(channels);\n  }\n  protected queryVitalParameters(): void {\n    super.queryVitalParameters();\n    const gl = this.gl;\n    this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n    this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n    this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n    this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n  }\n  protected getExtensions() {\n    this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {env} from '../env';\n\nimport {Environment} from './env';\n\nclass ENV implements Environment {\n  public set debug(value: boolean) {\n    env.debug = value;\n  }\n  public get debug(): boolean {\n    return env.debug;\n  }\n}\n\nexport const envImpl = new ENV();\n","import * as platform from 'platform';\n\nimport * as onnx from './api';\nimport {Backend, Environment, Onnx} from './api';\n\ninterface ENV extends Environment {\n  readonly onnx: Onnx;\n  readonly backend: Backend;\n  readonly platform: Platform;\n}\n\nclass EnvironmentImpl implements ENV {\n  public readonly onnx = onnx;\n  public readonly backend = onnx.backend;\n  public readonly platform = platform;\n\n  public debug = false;\n}\n\nexport const env: ENV = new EnvironmentImpl();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * represent a tensor with specified dimensions and data type.\n */\nexport interface Tensor {\n  /**\n   * get the dimensions of the tensor\n   */\n  readonly dims: ReadonlyArray<number>;\n\n  /**\n   * get the data type of the tensor\n   */\n  readonly type: Tensor.Type;\n\n  /**\n   * get the number of elements in the tensor\n   */\n  readonly size: number;\n\n  /**\n   * get the underlying data of the tensor\n   */\n  readonly data: Tensor.DataType;\n\n  /**\n   * get value of an element\n   * @param indices the indices to the element\n   * @returns value of the element\n   */\n  get(...indices: number[]): Tensor.ElementType;\n\n  /**\n   * get value of an element\n   * @param indices the indices to the element\n   * @returns value of the element\n   */\n  get(indices: ReadonlyArray<number>): Tensor.ElementType;\n\n  /**\n   * set value of an element\n   * @param value the value to set\n   * @param indices the indices to the element\n   */\n  set(value: Tensor.ElementType, ...indices: number[]): void;\n\n  /**\n   * set value of an element\n   * @param value the value to set\n   * @param indices the indices to the element\n   */\n  set(value: Tensor.ElementType, indices: ReadonlyArray<number>): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    int32: Int32Array;\n    string: string[];\n  }\n\n  interface ElementTypeMap {\n    bool: boolean;\n    float32: number;\n    int32: number;\n    string: string;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\nexport interface TensorConstructor {\n  /**\n   * Create a Tensor with provided data, dimension, and type\n   * @param data The value of the tensor. It could a flat array or a TypedArray.\n   * @param type The data type. Should match the value of the tensor, else throw\n   *     TypeError exception.\n   * @param dims Optional. Should match the length of the value provided. If not\n   *     specified, dims will be inferred as a 1d tensor.\n   */\n  new(data: Tensor.DataType|boolean[]|number[], type: Tensor.Type, dims?: ReadonlyArray<number>): Tensor;\n}\n\nexport interface TensorConstructor {\n  // Tensor factory functions\n}\n\nexport interface Tensor {\n  // Tensor utilities\n}\n\nimport * as TensorImpl from './tensor-impl';\nexport const Tensor: TensorConstructor = TensorImpl.Tensor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Tensor} from './tensor';\n\n/**\n * represent a runtime instance of an ONNX model\n */\nexport interface InferenceSession {\n  //#region loadModel\n\n  /**\n   * load an ONNX model asynchronously\n   * @param uri the URI of the model to load\n   */\n  loadModel(uri: string): Promise<void>;\n  /**\n   * load an ONNX model\n   * @param blob a Blob object representation of an ONNX model\n   */\n  loadModel(blob: Blob): Promise<void>;\n  /**\n   * load an ONNX model\n   * @param buffer an ArrayBuffer representation of an ONNX model\n   */\n  loadModel(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Promise<void>;\n  /**\n   * load an ONNX model\n   * @param buffer an Uint8Array representation of an ONNX model\n   */\n  loadModel(buffer: Uint8Array): Promise<void>;\n\n  //#endregion loadModel\n\n  /**\n   * execute the model asynchronously with the given inputs, output names and options\n   * @param inputs representation of the model input. It can be a string-to-tensor Map object or a plain object,\n   *     with all required inputs present with their names as keys; it can be a tensor array as well, with input\n   *     tensors inside in the order defined by the model.\n   * @param options Optional. A set of options that controls the behavior of model inference\n   * @returns a Promise object representing the result of the execution. Resolve to a string-to-tensor Map object\n   *     for the model output, or reject to any runtime error.\n   */\n  run(inputs: InferenceSession.InputType, options?: InferenceSession.RunOptions): Promise<InferenceSession.OutputType>;\n\n  /**\n   * start profiling for the session\n   */\n  startProfiling(): void;\n  /**\n   * end profiling for the session and flush data\n   */\n  endProfiling(): void;\n}\n\nexport declare namespace InferenceSession {\n  type TensorsMapType = ReadonlyMap<string, Tensor>;\n  type TensorsIndexType = {readonly [name: string]: Tensor};\n  type TensorsArrayType = ReadonlyArray<Tensor>;\n  type InputType = TensorsMapType|TensorsIndexType|TensorsArrayType;\n  type OutputType = TensorsMapType;\n\n  export namespace Config {\n    /**\n     * represent the configuration of the profiler that used in an inference session\n     */\n    export interface Profiler {\n      /**\n       * the max number of events to be recorded\n       */\n      maxNumberEvents?: number;\n      /**\n       * the maximum size of a batch to flush\n       */\n      flushBatchSize?: number;\n      /**\n       * the maximum interval in milliseconds to flush\n       */\n      flushIntervalInMilliseconds?: number;\n    }\n  }\n\n  /**\n   * configuration for creating a new inference session\n   */\n  export interface Config {\n    /**\n     * specify a hint of the preferred backend. If not set, the backend will be determined by the platform and\n     * environment.\n     */\n    backendHint?: string;\n\n    /**\n     * specify the configuration of the profiler that used in an inference session\n     */\n    profiler?: Config.Profiler;\n  }\n\n  /**\n   * options for running inference\n   */\n  export interface RunOptions {\n    /**\n     * represent a list of output names as an array of string. This must be a subset of the output list defined by the\n     * model. If not specified, use the model's output list.\n     */\n    outputNames?: ReadonlyArray<string>;\n  }\n}\n\nexport interface InferenceSessionConstructor {\n  /**\n   * construct a new inference session\n   * @param config specify configuration for creating a new inference session\n   */\n  new(config?: InferenceSession.Config): InferenceSession;\n}\n\nimport * as InferenceSessionImpl from './inference-session-impl';\nexport const InferenceSession: InferenceSessionConstructor = InferenceSessionImpl.InferenceSession;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Session} from '../session';\nimport {Tensor as InternalTensor} from '../tensor';\n\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\nimport * as TensorInterface from './tensor';\nimport {Tensor as ApiTensor} from './tensor-impl';\nimport * as tensorUtils from './tensor-impl-utils';\n\ntype InputType = InferenceSessionInterface.InputType;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype OutputType = InferenceSessionInterface.OutputType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  session: Session;\n  constructor(config?: InferenceSessionInterface.Config) {\n    this.session = new Session(config);\n  }\n  loadModel(uri: string): Promise<void>;\n  loadModel(blob: Blob): Promise<void>;\n  loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  loadModel(buffer: Uint8Array): Promise<void>;\n  loadModel(arg0: string|Blob|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    if (typeof arg0 === 'string') {\n      return this.session.loadModel(arg0);\n    } else if (typeof Blob !== 'undefined' && (arg0 instanceof Blob)) {\n      // create a url from Blob\n      const url = URL.createObjectURL(arg0);\n      return this.session.loadModel(url);\n    } else if (arg0 instanceof ArrayBuffer) {\n      // load model from array buffer\n      return this.session.loadModel(arg0, byteOffset, length);\n    } else if (ArrayBuffer.isView(arg0)) {\n      // load model from Uint8array\n      return this.session.loadModel(arg0);\n    } else {\n      throw new Error('Model type is not supported.');\n    }\n  }\n\n  async run(inputFeed: InputType, options?: RunOptions): Promise<OutputType> {\n    let output = new Map<string, InternalTensor>();\n    if (inputFeed instanceof Map) {\n      const modelInputFeed = new Map<string, InternalTensor>();\n      inputFeed.forEach((value: ApiTensor, key: string) => {\n        modelInputFeed.set(key, value.internalTensor);\n      });\n      output = await this.session.run(modelInputFeed);\n    } else if (Array.isArray(inputFeed)) {\n      const modelInputFeed: InternalTensor[] = [];\n      inputFeed.forEach((value) => {\n        modelInputFeed.push(value.internalTensor);\n      });\n      output = await this.session.run(modelInputFeed);\n    } else {\n      const modelInputFeed = new Map<string, InternalTensor>();\n      for (const name in inputFeed) {\n        modelInputFeed.set(name, (inputFeed as {readonly [name: string]: ApiTensor})[name].internalTensor);\n      }\n    }\n    const convertedOutput: Map<string, TensorInterface.Tensor> = new Map<string, TensorInterface.Tensor>();\n    output.forEach((value, key) => {\n      convertedOutput.set(key, tensorUtils.fromInternalTensor(value));\n    });\n    return convertedOutput;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {Backend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph, NNSubgraphNode} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\nimport {NNSubgraph} from './backends/webnn/nnSubgraph';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n    supportedOps?: string[];\n    enablePseudoReorder?: boolean;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<ReadonlyArray<number>>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n    this.supportedOps = new Set(config.supportedOps || []);\n    this.enablePseudoReorder = config.enablePseudoReorder || false;\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await Backend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(Buffer.from(buf));\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(Buffer.from(buf));\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(Buffer.from(arr));\n      } else {\n        // load model from Uint8array\n        this.initialize(Buffer.from(arg));\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Buffer): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<ReadonlyArray<number>>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<ReadonlyArray<number>>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(\n      expectedDims: ReadonlyArray<number>, actualDims: ReadonlyArray<number>, noneDimSupported: boolean): boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    let noneDimSeen = false;\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i]) {\n        // None dimension\n        if (noneDimSupported && expectedDims[i] === 0) {\n          // Atmost one 'None' dimension allowed in the expected shape\n          // If this is triggered, there is probably something wrong with the exported model\n          // which has more than one 'None' dimension in it's input shape specifications\n          if (noneDimSeen) {\n            return false;\n          }\n\n          noneDimSeen = true;\n        }\n\n        // Not a 'None' dimension. Data shape mis-match.\n        else {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error(`expected number of outputs do not match number of generated outputs`);\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    graph.partitionBy(this.supportedOps);\n    const nodes = graph.getNodes();\n    const values = graph.getValues();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].opType === 'NNSubgraph') {\n        const subgraph = nodes[i] as NNSubgraphNode;\n        const initializers = new Map<number, Tensor>();\n\n        for (const subgraphNode of subgraph.nodes) {\n          for (const input of subgraphNode.inputs) {\n            const tensor = values[input].tensor;\n            if (tensor !== undefined) {\n              initializers.set(input, tensor);\n            }\n          }\n        }\n\n        this._ops[i] = new NNSubgraph(subgraph, initializers, this.enablePseudoReorder, this.profiler);\n      } else {\n        this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets);\n      }\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private enablePseudoReorder: boolean;\n  private supportedOps: Set<string>;\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node\n   * @param opsets\n   */\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator;\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function Backend(hint?: string|ReadonlyArray<string>): Promise<Backend> {\n  if (!hint) {\n    return Backend(['webgl', 'wasm', 'cpu']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = onnx.backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    if (!backendObj[backendHint].disabled) {\n      const backend = backendObj[backendHint] as Backend;\n      let init = backend.initialize();\n      if (typeof init === 'object' && 'then' in init) {\n        init = await init;\n      }\n      if (init) {\n        backendsCache.set(backendHint, backend);\n        return backend;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // tslint:disable-next-line:no-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    // Logger.set('Profiler.node', {minimalSeverity: 'verbose'});\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      for (const thisOp of this._ops) {\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () => {\n          const op = thisOp.op;\n          if (!op.checkInputs(inputTensors)) {\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\n          }\n\n          const result = op.run(inferenceHandler, inputTensors);\n\n          return result;\n        });\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n      }\n\n      const output: Tensor[] = [];\n      this.graph.getOutputIndices().forEach((outputIndex, i) => {\n        const thisValue = this._values[outputIndex];\n        if (thisValue === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        // tslint:disable-next-line:no-unused-expression-chai\n        thisValue.data;\n        output.push(thisValue);\n      });\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Buffer, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets = modelProto.opsetImport.map(i => {\n      return {domain: i.domain as string, version: LongUtil.longToNumber(i.version!)};\n    });\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): ReadonlyArray<OpSet> {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {Tensor} from './tensor';\nimport {ProtoUtil} from './util';\nimport {GraphUtil} from './graph-utils';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: ReadonlyArray<number>;\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: ReadonlyArray<number>;\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: ReadonlyArray<number>;\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: ReadonlyArray<number>;\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\nexport interface Graph {\n  getInputIndices(): ReadonlyArray<number>;\n  getInputNames(): ReadonlyArray<string>;\n  getOutputIndices(): ReadonlyArray<number>;\n  getOutputNames(): ReadonlyArray<string>;\n  getValues(): ReadonlyArray<Graph.Value>;\n  getNodes(): ReadonlyArray<Graph.Node>;\n  partitionBy(supportedOps: Set<string>): void;\n}\n\n// tslint:disable-next-line:variable-name\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto, initializer?: Graph.Initializer) => new GraphImpl(graphProto, initializer)\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto) {\n    this.name = _nodeProto.name!;\n    this.opType = _nodeProto.opType!;\n    this.inputs = [];\n    this.outputs = [];\n    this.attributes = new Attribute(_nodeProto.attribute);\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nexport class NNSubgraphNode implements Graph.Node {\n  constructor(public nodes: ReadonlyArray<Graph.Node>,\n              public inputs: number[],\n              public outputs: number[]) {\n    this.name = Object.entries(nodes.map((node) => node.opType)\n                  .reduce((cnt: any, v: any) => {cnt[v] ? cnt[v]++ : cnt[v]=1; return cnt;}, {}))\n                  .map((n: any) => `${n[0]} x ${n[1]}`)\n                  .join(', ');\n    this.opType = 'NNSubgraph';\n    this.attributes = new Attribute(null);\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n  private _partitions: Node[];\n\n  constructor(graph: onnx.IGraphProto, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): ReadonlyArray<number> {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): ReadonlyArray<string> {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): ReadonlyArray<number> {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): ReadonlyArray<string> {\n    return this._allOutputNames;\n  }\n\n  getValues(): ReadonlyArray<Graph.Value> {\n    return this._allData;\n  }\n\n  getNodes(): ReadonlyArray<Graph.Node> {\n    if (this._partitions.length) {\n      return this._partitions;\n    } else {\n      return this._nodes;\n    }\n  }\n\n  partitionBy(supportedOps: Set<string>) {\n    const graph = new GraphUtil(this._nodes.length);\n    this._nodes.forEach((op, i) => {\n      graph.addNode(i, op.inputs, op.outputs);\n      if (!supportedOps.has(op.opType)) {\n        // mark unsupported ops black\n        graph.setBlack(i);\n      }\n    });\n    graph.identifyInputOutputTensors(this._allInputIndices, this._allOutputIndices);\n    const result = [];\n    for (const {nodeIds, inputIds, outputIds} of graph.partition()) {\n      // test if the first node in the partition is supported.\n      if (supportedOps.has(this._nodes[nodeIds[0]].opType)) {\n        const nodes = nodeIds.map((id) => this._nodes[id]);\n        result.push(new NNSubgraphNode(nodes, inputIds, outputIds));\n      } else {\n        for (const nodeId of nodeIds) {\n          result.push(this._nodes[nodeId]);\n        }\n      }\n    }\n    this._partitions = result;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n    this._partitions = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      if (!dataIndices.has(i.name!)) {\n        throw new Error(`invalid name for initializer: ${i.name}`);\n      }\n      const index = dataIndices.get(i.name!)!;\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error(`missing attributes or missing tensor value in attributes for this Constant operator`);\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error(`missing output or incorrect number of outputs for this Constant operator`);\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error(`node outputs should not be initialized`);\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error(`from property of the Value object doesn't match index of Node being processed`);\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error(`model graph is cyclic`);\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.inputs.length > 1) {\n      throw new Error(`Node deletion with multiple inputs is not supported. `);\n    }\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error(`Node deletion with more than one output connected to other nodes is not supported. `);\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error(`The Value object doesn't have the current Node in it's 'to' property `);\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error(`The Node object doesn't have the output Value in it's 'inputs' property `);\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error(`Dropout nodes should only contain one input. `);\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error(`Dropout nodes should contain either 1 or 2 output(s)`);\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error(`Dropout nodes's second output should not be referenced by other nodes`);\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Tensor} from './tensor';\nimport {LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        this._attributes.set(attr.name!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n      }\n\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto): Attribute.DataType {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto) {\n    if (attr.type === onnx.AttributeProto.AttributeType.GRAPH ||\n        attr.type === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attr.type === onnx.AttributeProto.AttributeType.INT && Long.isLong(value)) {\n      return (value as Long).toNumber();\n    }\n\n    // cast LONG[] to number[]\n    if (attr.type === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSOR) {\n      return Tensor.fromProto(value as onnx.ITensorProto);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSORS) {\n      const tensorProtos = value as onnx.ITensorProto[];\n      return tensorProtos.map(value => Tensor.fromProto(value));\n    }\n\n    // cast Uint8Array to string\n    if (attr.type === onnx.AttributeProto.AttributeType.STRING) {\n      const utf8String = value as Uint8Array;\n      return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attr.type === onnx.AttributeProto.AttributeType.STRINGS) {\n      const utf8Strings = value as Uint8Array[];\n      return utf8Strings.map(\n          utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","export class GraphUtil {\n\n  private vertices: number;\n  private color: boolean[];\n  private tensors: Map<number, { from: Set<number>, to: Set<number> }>;\n  private tensorMapping: number[][];\n  private next: number[][];\n  private prev: number[][];\n  private inTensorsOfInputNode: Map<number, Set<number>>;\n  private outTensorsOfOutputNode: Map<number, Set<number>>;\n\n  /**\n   * Create a directed graph that supports partitioning by two colors.\n   * @param {number} vertices     Number of vertices in the graph.\n   */\n  constructor(vertices: number) {\n\n    // Partitioning a neural network graph requires two graphs:\n    // a \"node graph\" and a \"tensor graph\"\n\n    // The following properties describe a \"node graph\", in which nodes are\n    // identified by a unique id of type `number`\n    //   private vertices: number;            // number of ndoes\n    //   private color: boolean[];            // false - white, true - black\n    //   private next: number[][];            // adjacency list\n    //   private prev: number[][];            // reversed adjacency list\n\n    // The following properties describe a \"tensor graph\", in which tensors are\n    // identified by a unique id of type `number`\n    //   // head and tail nodes of each tensor\n    //   private tensors: Map<number, { from: Set<number>, to: Set<number> }>;\n    //   // tensors from node i to j\n    //   private tensorMapping: number[][];\n    //   private inTensorsOfInputNode: Map<number, Set<number>>;\n    //   private outTensorsOfOutputNode: Map<number, Set<number>>;\n\n    this.vertices = vertices;\n    this.color = new Array(vertices).fill(false);\n    this.next = [];\n    this.prev = [];\n\n    this.tensors = new Map();\n    this.tensorMapping = [];\n    this.inTensorsOfInputNode = new Map();\n    this.outTensorsOfOutputNode = new Map();\n\n    for (let i = 0; i < vertices; i++) {\n      this.next[i] = [];\n      this.prev[i] = [];\n      this.tensorMapping[i] = [];\n    }\n  }\n\n  /**\n   * Add an edge between node `i` and `j` with only one `tensor` attached on it\n   *\n   * This is a helper of the function `addNode`. It can be used for constructing\n   * a directed graph that supports topological sorting with cycle detection\n   *\n   * @param {number} i            Head node\n   * @param {number} j            Tail node\n   * @param {number} [tensor=-1]  Tensor attached on edge i -> j\n   *\n   */\n  addEdge(i: number, j: number, tensor?: number) {\n    // at most one tensor attached to edge i->j\n    this.next[i].push(j);\n    this.prev[j].push(i);\n    this.tensorMapping[i][j] = typeof tensor !== 'undefined' ? tensor : -1;\n  }\n\n  /**\n   * Add a neural network node with input and output tensors\n   *\n   * @param {number}   nodeId     Node within the range [0, vertices-1]\n   * @param {number[]} inTensors  List of input tensors of the node\n   * @param {number[]} outTensors List of output tensors of the node\n   *\n   */\n  addNode(nodeId: number, inTensors: number[], outTensors: number[]) {\n\n    for (const i of inTensors) {\n      if (!this.tensors.has(i)) {\n        this.tensors.set(i, {\n          from: new Set(),\n          to: new Set()\n        });\n      }\n      for (const inNodeId of this.tensors.get(i)!.from) {\n        this.addEdge(inNodeId, nodeId, i);\n      }\n      this.tensors.get(i)!.to.add(nodeId);\n    }\n\n    for (const i of outTensors) {\n      if (!this.tensors.has(i)) {\n        this.tensors.set(i, {\n          from: new Set(),\n          to: new Set()\n        });\n      }\n      for (const outNodeId of this.tensors.get(i)!.to) {\n        this.addEdge(nodeId, outNodeId, i);\n      }\n      this.tensors.get(i)!.from.add(nodeId);\n    }\n  }\n\n  /**\n   * Mark a node black\n   *\n   * @param  {number} i           Node to be marked black\n   */\n  setBlack(i: number) {\n    this.color[i] = true;\n  }\n\n  /**\n   * Identify the input and output tensors of the whole graph\n   *\n   * @param {number[]} inTensors  List of input tensors of the graph\n   * @param {number[]} outTensors List of output tensors of the graph\n   */\n  identifyInputOutputTensors(inTensors: number[], outTensors: number[]) {\n\n    for (const t of inTensors) {\n      if (!this.tensors.has(t)) {\n        return;\n      }\n      for (const n of this.tensors.get(t)!.to) {\n        if (!this.inTensorsOfInputNode.has(n)) {\n          this.inTensorsOfInputNode.set(n, new Set());\n        }\n        this.inTensorsOfInputNode.get(n)!.add(t);\n      }\n    }\n\n    for (const t of outTensors) {\n      if (!this.tensors.has(t)) {\n        return;\n      }\n      for (const n of this.tensors.get(t)!.from) {\n        if (!this.outTensorsOfOutputNode.has(n)) {\n          this.outTensorsOfOutputNode.set(n, new Set());\n        }\n        this.outTensorsOfOutputNode.get(n)!.add(t);\n      }\n    }\n\n  }\n\n  /**\n   * Topological sorting\n   *\n   * @returns {number[]} List of nodes in topological order\n   */\n  topologicalSort(): number[] {\n    const indegree = new Array(this.vertices).fill(0);\n    const result: number[] = [];\n    const q: number[] = [];\n    for (let i = 0; i < this.vertices; i++) {\n      indegree[i] = this.prev[i].length;\n      if (!indegree[i]) {\n        q.push(i); // push node i with indegree zero\n      }\n    }\n\n    let cnt = 0;\n    while (q.length) {\n      const u = q.shift()!;\n      result.push(u);\n      cnt++;\n      for (const v of this.next[u]) {\n        if (!--indegree[v]) {\n          q.push(v);\n        }\n      }\n    }\n\n    if (cnt !== this.vertices) {\n      throw new Error('Not a DAG');\n    }\n    return result;\n  }\n\n  /**\n   * Partition the grash by two colors. It returns a unique solution based on\n   * the given dichromatic graph.\n   *\n   * @returns {Set<number>[]} A list of \"partition sets\". In each set, all nodes\n   *                          have the same color and no order. Each set is\n   *                          dependent on the previous set. Specifically, if\n   *                          all nodes are of the same color, there'll be only\n   *                          one \"partition set\" with all nodes in it.\n   *\n   * @example\n   *              xxxxx                      xxxxx              ooooo\n   *              x 0 x                      x   x : black      o   o : white\n   *              xxxxx                      xxxxx              ooooo\n   *      __________|__________\n   *     |          |          |\n   *   ooooo      ooooo      xxxxx\n   *   o 1 o      o 2 o      x 3 x\n   *   ooooo      ooooo      xxxxx           results:\n   *     |          |          |             [{0, 3}, {1, 2, 4, 6}, {5, 7}]\n   *   ooooo      xxxxx      ooooo\n   *   o 4 o      x 5 x      o 6 o\n   *   ooooo      xxxxx      ooooo\n   *     |_________ | _________|\n   *               \\|/\n   *              xxxxx\n   *              x 7 x\n   *              xxxxx\n   *\n   */\n  biTopologicalSort(): Set<number>[] {\n    const order = new Array(this.vertices).fill(0);\n    for (const u of this.topologicalSort()) {\n      for (const v of this.prev[u]) {\n        if (this.color[u] === this.color[v]) {\n          order[u] = Math.max(order[u], order[v]);\n        } else {\n          order[u] = Math.max(order[u], order[v] + 1);\n        }\n      }\n    }\n\n    const result = [];\n    for (const [nodeId, ord] of order.entries()) {\n      if (typeof result[ord] === 'undefined') {\n        result[ord] = new Set();\n      }\n      result[ord].add(nodeId);\n    }\n    return result;\n  }\n\n  /**\n   * Extend the \"partition sets\" returned by `biTopologicalSort`.\n   *\n   * Resolve the input and output tensors of each \"partition set\". These tensors\n   * lie on the cross edges, which are shared by two connected partitions.\n   *\n   * @param  {boolean} [eager=false]  Partition in eager mode\n   *                                  i.e. each node belongs to one partition set\n   *\n   * @typedef  {Object} PartitionResults\n   * @property {Set<number>[]}  nodes A partition set\n   * @property {number[]}   inTensors Input tensors of the partition set\n   * @property {number[]}  outTensors Output tensors of the partition set\n   *\n   * @returns {PartitionResults} Resolve the input and output tensors of each sets\n   *                          returned by `biTopologicalSort`\n   */\n  partition(eager = false) {\n\n    function union<T>(a: Set<T>, b: Set<T>): Set<T> {\n      return new Set([...a, ...b]);\n    }\n\n    function sortSet(set: Set<number>) {\n      return Array.from(set).sort((a, b) => a - b);\n    }\n\n    const result = [];\n    // crossTensor - tensor lies on the cross edge\n    const crossTensorsTo = new Map();\n    for (let i = 0; i < this.vertices; i++) {\n      crossTensorsTo.set(i, new Set());\n    }\n\n    let partitions = [];\n    if (eager) {\n      for (const i of this.topologicalSort())\n        partitions.push(new Set([i]));\n    } else {\n      partitions = this.biTopologicalSort();\n    }\n\n    for (const partition of partitions) {\n      let inTensors = new Set();\n      let outTensors = new Set();\n      for (const u of partition) {\n        for (const v of this.next[u]) {\n          if (!partition.has(v)) {\n            const tensorUV = this.tensorMapping[u][v];\n            crossTensorsTo.get(v).add(tensorUV);\n            outTensors.add(tensorUV);\n          }\n        }\n\n        if (this.outTensorsOfOutputNode.has(u)) {\n          outTensors = union(outTensors, this.outTensorsOfOutputNode.get(u)!);\n        }\n      }\n      for (const u of partition) {\n        inTensors = union(inTensors, crossTensorsTo.get(u)!);\n\n        if (this.inTensorsOfInputNode.has(u)) {\n          inTensors = union(inTensors, this.inTensorsOfInputNode.get(u)!);\n        }\n      }\n\n      result.push({\n        nodeIds: sortSet(partition),\n        inputIds: sortSet(inTensors),\n        outputIds: sortSet(outTensors),\n      });\n    }\n    return result;\n  }\n}\n","import {Attribute} from '../../attribute';\nimport {InferenceHandler} from '../../backend';\nimport {Operator} from '../../operators';\nimport {Tensor} from '../../tensor';\nimport {NNSubgraphNode} from '../../graph';\nimport {ShapeUtil} from '../../util';\nimport {Profiler} from '../../instrument';\n\nexport class NNSubgraph implements Operator {\n\n  constructor (\n      private subgraph: NNSubgraphNode,\n      initializers: Map<number, Tensor>,\n      private enablePseudoReorder = false,\n      private profiler: Readonly<Profiler>) {\n    this._operandIndex = 0;\n    this._nnOperands = [];\n    this._operations = [];\n    this._tensorTypes = [];\n    this._tensorData = [];\n    initializers.forEach((tensor, i) => {\n      this._tensorData[i] = {tensor: tensor};\n    });\n  }\n\n  async run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n\n    if (!this._execution) {\n      // compile at first run\n      await this.createCompiledModel(inputs);\n    }\n\n    // bind input tensors at runtime\n    inputs.forEach((tensor, i) => {\n      // reorder input tensors\n      tensor.toNHWC(this.enablePseudoReorder);\n\n      this.profiler.event('backend', 'WebNN.Execution.setInput', () => {\n        this._execution.setInput(i, tensor.data as NNTensorType);\n      });\n\n      // recover input tensors\n      tensor.toNCHW(this.enablePseudoReorder);\n    });\n\n    const outputTensors = this.subgraph.outputs.map((tensorId) => this._getTensorByOnnxId(tensorId));\n    // reorder output tensors\n    outputTensors.forEach((tensor) => tensor.toNHWC(this.enablePseudoReorder));\n\n    // run submodel\n    await this.profiler.event('backend', 'WebNN.Execution.startCompute', async () => {\n      await this._execution.startCompute();\n    });\n\n    // recover output tensors\n    outputTensors.forEach((tensor) => tensor.toNCHW(this.enablePseudoReorder));\n    return outputTensors;\n  };\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean { return true; }\n\n  async createCompiledModel(graphInputTensors: Tensor[]) {\n    this._nn = (navigator as NNNavigator).ml.getNeuralNetworkContext();\n    this._model = await this._nn.createModel({backend: 'WASM'});\n\n    graphInputTensors.forEach((tensor, i) => {\n      tensor.toNHWC();\n      const tensorId = this._addTensorFloat32(tensor.floatData as Float32Array, tensor.dims);\n      this._tensorData[this.subgraph.inputs[i]] = {tensor: tensor, nnTensorId: tensorId};\n    });\n\n    // reorder to NHWC\n    this._tensorData.forEach(({tensor}) => {\n      tensor.toNHWC();\n    });\n\n    this._addOpsAndParams();\n    this._addInputsOutputs();\n    await this._model.finish();\n\n    this._compilation = await this._model.createCompilation();\n    this._compilation.setPreference(this._nn.PREFER_FAST_SINGLE_ANSWER);\n    await this._compilation.finish();\n\n    this._execution = await this._compilation.createExecution();\n    // bind output tensors at compile time\n    this.subgraph.outputs.forEach((tensorId, i) => {\n      const tensor = this._getTensorByOnnxId(tensorId);\n      // TODO: eliminate type casting\n      this._execution.setOutput(i, tensor.floatData as NNTensorType);\n    });\n\n    // recover to NCHW\n    this._tensorData.forEach(({tensor}) => {\n      tensor.toNCHW();\n    });\n  }\n\n  _addInputsOutputs() {\n    const modelInputs = this.subgraph.inputs.map((onnxTensorId) => this._tensorData[onnxTensorId].nnTensorId!);\n    const modelOutputs = this.subgraph.outputs.map((onnxTensorId) => this._tensorData[onnxTensorId].nnTensorId!);\n    this._model.identifyInputsAndOutputs(modelInputs, modelOutputs);\n  }\n\n  _addOpsAndParams() {\n\n    for (let i = 0; i < this.subgraph.nodes.length; i++) {\n\n      let opType: number = -1;\n      let inputs: number[] = [];\n      let outputs: number[] = [];\n\n      let node = this.subgraph.nodes[i];\n      let attributes = node.attributes;\n\n      switch(node.opType) {\n        case 'Conv': {\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n          const convFilter = this._getTensorByOnnxId(node.inputs[1]);\n          const convBias = node.inputs[2] !== undefined ? this._getTensorByOnnxId(node.inputs[2]) : undefined;\n\n          const nGroups = attributes.getInt('group', 1);\n          const dims = convFilter.dims;\n          const nChannels = dims[0];\n          const convFilterId = this._addTensorFloat32(convFilter.floatData as Float32Array, convFilter.dims);\n          const convBiasId = convBias !== undefined ? // optional bias\n            this._addTensorFloat32(convBias.floatData as Float32Array, convBias.dims):\n            this._addTensorFloat32(new Float32Array(nChannels).fill(0), [nChannels]);\n\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          inputs.push(convFilterId);\n          inputs.push(convBiasId);\n\n          const kernelShape = attributes.getInts('kernel_shape', []);\n          if (!kernelShape || kernelShape.length !== 2) {\n            throw new Error('Invalid kernelShape');\n          }\n          const kernelHeight = kernelShape[0];\n          const kernelWidth = kernelShape[1];\n\n          const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n          if (pads.length !== 4) {\n            throw new Error('Invalid pads');\n          }\n          const paddingHeightBegin = pads[0];\n          const paddingWidthBegin = pads[1];\n          const paddingHeightEnd = pads[2];\n          const paddingWidthEnd = pads[3];\n          inputs.push(this._addScalarInt32(paddingWidthBegin));\n          inputs.push(this._addScalarInt32(paddingWidthEnd));\n          inputs.push(this._addScalarInt32(paddingHeightBegin));\n          inputs.push(this._addScalarInt32(paddingHeightEnd));\n\n          const strides = attributes.getInts('strides', [1, 1]);\n          if (!strides || strides.length !== 2) {\n            throw new Error('Invalid strides');\n          }\n          const strideY = strides[0];\n          const strideX = strides[1];\n          inputs.push(this._addScalarInt32(strideX));\n          inputs.push(this._addScalarInt32(strideY));\n\n          let nextNode = this.subgraph.nodes[i + 1];\n          // fuse batch norm preceded by a conv\n          if (nextNode &&\n              nextNode.opType === 'BatchNormalization' &&\n              node.outputs[0] === nextNode.inputs[0]) {\n            const bnNode = nextNode;\n            const scale = this._getTensorByOnnxId(bnNode.inputs[1]);\n            const bnBias = this._getTensorByOnnxId(bnNode.inputs[2]);\n            const mean = this._getTensorByOnnxId(bnNode.inputs[3]);\n            const variance = this._getTensorByOnnxId(bnNode.inputs[4]);\n            const epsilon = bnNode.attributes.getFloat('epsilon', 1e-5);\n\n            const scaleTensor = scale.floatData;\n            const meanTensor = mean.floatData;\n            const varTensor = variance.floatData;\n            const bnBiasTensor = bnBias.floatData;\n            const convFilterTensor = convFilter.floatData;\n            const convBiasTensor = this._nnOperands[convBiasId];\n\n            const nPixels = ShapeUtil.size(dims.slice(1));\n            for (let c = 0; c < nChannels; c++) {\n              const w = scaleTensor[c] / Math.sqrt(varTensor[c] + epsilon);\n              convBiasTensor[c] = bnBiasTensor[c] + (convBiasTensor[c] - meanTensor[c]) * w;\n              for (let p = c * nPixels; p < (c+1) * nPixels; p++) {\n                convFilterTensor[p] *= w;\n              }\n            }\n\n            i++;\n            node = nextNode;\n            nextNode = this.subgraph.nodes[i + 1];\n          }\n\n          if (nextNode &&\n              nextNode.opType === 'Relu' &&\n              node.outputs[0] === nextNode.inputs[0]) {\n            // Fuse relu\n            inputs.push(this._addScalarInt32(this._nn.FUSED_RELU));\n            i++;\n            node = nextNode;\n          } else {\n            inputs.push(this._addScalarInt32(this._nn.FUSED_NONE));\n          }\n\n          // reshape kernel for depthwise conv\n          const [batch, inputHeight, inputWidth, inputChannels] = input.dims;\n          let isDepthWiseConv = false;\n          if (nGroups > 1) {\n            if (nGroups !== inputChannels) {\n              throw new Error('Group convolution is not supported.');\n            } else {\n              isDepthWiseConv = true;\n              let nhwc = convFilter.floatData;\n              // NHWC -> CHWN where C === 1\n              let chwnData = new Float32Array(nhwc.length);\n              const N = dims[0];\n              const H = dims[1];\n              const W = dims[2];\n              for (let n = 0; n < N; ++n) {\n                for (let h = 0; h < H; ++h) {\n                  for (let w = 0; w < W; ++w) {\n                    chwnData[h*W*N + w*N + n] = nhwc[n*H*W + h*W + w];\n                  }\n                }\n              }\n\n              this._setOperandValue(convFilterId, chwnData);\n              const convFilterType = this._getTensorTypeById(convFilterId);\n              convFilterType.dimensions![0] = 1;\n              convFilterType.dimensions![3] = nGroups;\n\n              // set multiplier to 1, not used in onnx model\n              inputs.splice(9, 0, this._addScalarInt32(1));\n            }\n          }\n\n          // Add outputs\n          const outputHeight = Math.floor((inputHeight-kernelHeight + paddingHeightBegin+paddingHeightEnd)/strideY + 1);\n          const outputWidth = Math.floor((inputWidth - kernelWidth + paddingWidthBegin + paddingWidthEnd)/strideX + 1);\n          const outputChannels = isDepthWiseConv ? nGroups : nChannels;\n          const outputDims = [batch, outputHeight, outputWidth, outputChannels];\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = isDepthWiseConv ? this._nn.DEPTHWISE_CONV_2D : this._nn.CONV_2D;\n        } break;\n        case 'BatchNormalization': {\n          // Add inputs\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n          const scale = this._getTensorByOnnxId(node.inputs[1]);\n          const bnBias = this._getTensorByOnnxId(node.inputs[2]);\n          const mean = this._getTensorByOnnxId(node.inputs[3]);\n          const variance = this._getTensorByOnnxId(node.inputs[4]);\n          const epsilon = attributes.getFloat('epsilon', 1e-5);\n\n          const scaleTensor = scale.floatData;\n          const meanTensor = mean.floatData;\n          const varTensor = variance.floatData;\n          const bnBiasTensor = bnBias.floatData;\n\n          // Conv with identity kernel\n          const nChannels = input.dims[3];\n          const convFilterTensor = new Float32Array(nChannels * nChannels).fill(0);\n          const convBiasTensor = new Float32Array(nChannels).fill(0);\n          const convFilterDims = [nChannels, 1, 1, nChannels];\n          const convBiasDims = [nChannels];\n\n          for (let c = 0; c < nChannels; c++) {\n            const w = scaleTensor[c] / Math.sqrt(varTensor[c] + epsilon);\n            convFilterTensor[c * nChannels + c] = w;\n            convBiasTensor[c] = bnBiasTensor[c] - w * meanTensor[c];\n          }\n\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          inputs.push(this._addTensorFloat32(convFilterTensor, convFilterDims));\n          inputs.push(this._addTensorFloat32(convBiasTensor, convBiasDims));\n          // paddings\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          // strides\n          inputs.push(this._addScalarInt32(1));\n          inputs.push(this._addScalarInt32(1));\n\n          let nextNode = this.subgraph.nodes[i + 1];\n          if (nextNode &&\n              nextNode.opType === 'Relu' &&\n              node.outputs[0] === nextNode.inputs[0]) {\n            // Fuse relu\n            inputs.push(this._addScalarInt32(this._nn.FUSED_RELU));\n            i++;\n            node = nextNode;\n          } else {\n            inputs.push(this._addScalarInt32(this._nn.FUSED_NONE));\n          }\n\n          // Add outputs\n          const outputDims = Array.from(input.dims);\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.CONV_2D;\n        } break;\n        case 'Relu': {\n          // Add inputs\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n\n          // Conv with identity kernel\n          const nChannels = input.dims[3];\n          const convFilterTensor = new Float32Array(nChannels * nChannels).fill(0);\n          const convBiasTensor = new Float32Array(nChannels).fill(0);\n          const convFilterDims = [nChannels, 1, 1, nChannels];\n          const convBiasDims = [nChannels];\n\n          for (let c = 0; c < nChannels; c++) {\n            convFilterTensor[c * nChannels + c] = 1;\n          }\n\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          inputs.push(this._addTensorFloat32(convFilterTensor, convFilterDims));\n          inputs.push(this._addTensorFloat32(convBiasTensor, convBiasDims));\n          // paddings\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          // strides\n          inputs.push(this._addScalarInt32(1));\n          inputs.push(this._addScalarInt32(1));\n          inputs.push(this._addScalarInt32(this._nn.FUSED_RELU));\n\n          // Add outputs\n          const outputDims = Array.from(input.dims);\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.CONV_2D;\n        } break;\n        case 'Mul':\n        case 'Sum':\n        case 'Add': {\n\n          if (node.opType === 'Sum' && node.inputs.length !== 2) {\n            throw new Error(`Only support Sum with two inputs`);\n          }\n          const in1 = this._getTensorByOnnxId(node.inputs[0]);\n          const in2 = this._getTensorByOnnxId(node.inputs[1]);\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          inputs.push(this._tensorData[node.inputs[1]].nnTensorId!);\n          inputs.push(this._addScalarInt32(this._nn.FUSED_NONE));\n\n          // Add outputs\n          const in1Dims = in1.dims;\n          const in2Dims = in2.dims;\n\n          // Compatible dims (multidirectional broadcasting)\n          const outputDims = new Array(Math.max(in1Dims.length, in2Dims.length));\n          for (let i = in1Dims.length - 1, j = in2Dims.length - 1, k = outputDims.length - 1; k >= 0;) {\n            let dim1 = in1Dims[i--] || 1;\n            let dim2 = in2Dims[j--] || 1;\n            if (dim1 !== dim2 && dim1 !== 1 && dim2 !== 1)\n              throw new Error(`Dimensions of ${in1} and ${in2} are not compatible`);\n            outputDims[k--] = Math.max(dim1, dim2);\n          }\n\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          if (node.opType === 'Add' || node.opType === 'Sum') {\n            opType = this._nn.ADD;\n          } else if (node.opType === 'Mul') {\n            opType = this._nn.MUL;\n          }\n        } break;\n        case 'Gemm': {\n          // Add inputs\n          const input = this._getTensorByOnnxId(node.inputs[0]);    // A\n          const weights = this._getTensorByOnnxId(node.inputs[1]);  // B\n          const bias = this._getTensorByOnnxId(node.inputs[2]);     // C\n\n          const alpha  = attributes.getFloat('alpha', 1.0);\n          const beta   = attributes.getFloat('beta', 1.0);\n          const transA = attributes.getInt('transA', 0);\n          const transB = attributes.getInt('transB', 0);\n\n          if (alpha !== 1 || beta !== 1 || transA || !transB) {\n            throw new Error('Only support fc-like Gemm oprations, i.e. alpha == beta == 1 && !transA && transB');\n          }\n\n          const weightsId = this._addTensorFloat32(weights.floatData as Float32Array, weights.dims);\n          const biasId = this._addTensorFloat32(bias.floatData as Float32Array, bias.dims);\n\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          inputs.push(weightsId);\n          inputs.push(biasId);\n          inputs.push(this._addScalarInt32(this._nn.FUSED_RELU));\n\n          // Add outputs\n          const nUnits = weights.dims[0];\n          const batchSize = ShapeUtil.size(input.dims) / weights.dims[1];\n          const outputDims = [batchSize, nUnits];\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.FULLY_CONNECTED;\n        } break;\n        case 'AveragePool':\n        case 'MaxPool': {\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n\n          const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n          if (pads.length !== 4) {\n            throw new Error('Invalid pads');\n          }\n          const paddingHeightBegin = pads[0];\n          const paddingWidthBegin = pads[1];\n          const paddingHeightEnd = pads[2];\n          const paddingWidthEnd = pads[3];\n          inputs.push(this._addScalarInt32(paddingWidthBegin));\n          inputs.push(this._addScalarInt32(paddingWidthEnd));\n          inputs.push(this._addScalarInt32(paddingHeightBegin));\n          inputs.push(this._addScalarInt32(paddingHeightEnd));\n\n          const strides = attributes.getInts('strides', [1, 1]);\n          if (!strides || strides.length !== 2) {\n            throw new Error('Invalid strides');\n          }\n          const strideY = strides[0];\n          const strideX = strides[1];\n          inputs.push(this._addScalarInt32(strideX));\n          inputs.push(this._addScalarInt32(strideY));\n\n          const kernelShape = attributes.getInts('kernel_shape', []);\n          if (!kernelShape || kernelShape.length !== 2) {\n            throw new Error('Invalid kernelShape');\n          }\n          const kernelHeight = kernelShape[0];\n          const kernelWidth = kernelShape[1];\n          inputs.push(this._addScalarInt32(kernelWidth));\n          inputs.push(this._addScalarInt32(kernelHeight));\n          inputs.push(this._addScalarInt32(this._nn.FUSED_NONE));\n\n          const [batch, inputHeight, inputWidth, inputChannels] = input.dims;\n          const outputHeight =\n              Math.floor((inputHeight - kernelHeight + paddingHeightBegin + paddingHeightEnd)/strideY+1);\n          const outputWidth = Math.floor((inputWidth - kernelWidth + paddingWidthBegin + paddingWidthEnd)/strideX + 1);\n          const outputDims = [batch, outputHeight, outputWidth, inputChannels];\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          if (node.opType === 'MaxPool') {\n            opType = this._nn.MAX_POOL_2D;\n          } else if (node.opType === 'AveragePool') {\n            opType = this._nn.AVERAGE_POOL_2D;\n          }\n        } break;\n        case 'Reshape': {\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n          const shape = this._getTensorByOnnxId(node.inputs[1]);\n          const shapeId = this._addTensorInt32(shape.integerData as Int32Array, shape.dims);\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          inputs.push(shapeId);\n\n          const inputDims = input.dims;\n          let outputDims = Array.from(shape.integerData);\n          // dim == 0 means actual dim is unchanged, i.e. taken from the inputDim\n          outputDims = outputDims.map((d, i) => d === 0 ? inputDims[i] : d);\n          // At most one dimension of the new shape can be -1\n          const minusOneCnt = outputDims.filter(x => x === -1).length;\n          if (minusOneCnt === 1) {\n            const nonAdaptDim = outputDims.filter(x => x !== -1);\n            const adaptDimIdx = outputDims.indexOf(-1);\n            outputDims[adaptDimIdx] = ShapeUtil.size(inputDims) / ShapeUtil.size(nonAdaptDim);\n          } else if (minusOneCnt !== 0) {\n            throw new Error(`Invalid shape ${outputDims}`);\n          }\n          this._setOperandValue(shapeId, new Int32Array(outputDims));\n\n          // Add outputs\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.RESHAPE;\n        } break;\n        case 'Concat': {\n          for (let i = 0; i < node.inputs.length; ++i) {\n            inputs.push(this._tensorData[node.inputs[i]].nnTensorId!);\n          }\n\n          const axis = attributes.getInt('axis');\n          if (axis && axis !== 1) {\n            throw new Error(`Invalid axis ${axis}`);\n          }\n          // C axis is 3 in NHWC layout\n          const concatAxis = 3;\n          inputs.push(this._addScalarInt32(concatAxis));\n\n          // Add output\n          let outputDims = Array.from(this._getTensorByOnnxId(node.inputs[0]).dims);\n          for (let i = 1; i < node.inputs.length; ++i) {\n            outputDims[concatAxis] += this._getTensorByOnnxId(node.inputs[i]).dims[concatAxis];\n          }\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.CONCATENATION;\n        } break;\n        case 'GlobalAveragePool': {\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          // paddings\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          inputs.push(this._addScalarInt32(0));\n          // strides\n          inputs.push(this._addScalarInt32(1));\n          inputs.push(this._addScalarInt32(1));\n          // filters\n          const [batch, inputHeight, inputWidth, inputChannels] = input.dims;\n          inputs.push(this._addScalarInt32(inputWidth));\n          inputs.push(this._addScalarInt32(inputHeight));\n          inputs.push(this._addScalarInt32(this._nn.FUSED_NONE));\n\n          // Add outputs\n          const outputHeight = 1;\n          const outputWidth = 1;\n          const outputDims = [batch, outputHeight, outputWidth, inputChannels];\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.AVERAGE_POOL_2D;\n        } break;\n        case 'Softmax': {\n          const input = this._getTensorByOnnxId(node.inputs[0]);\n          inputs.push(this._tensorData[node.inputs[0]].nnTensorId!);\n          // Set beta to 1.0\n          inputs.push(this._addScalarFloat32(1.0));\n\n          const outputDims = input.dims;\n          const outputData = new Float32Array(ShapeUtil.size(outputDims));\n          outputData[0] = 1;\n          const outputId = this._addTensorFloat32(outputData, outputDims);  // allocate output placehoder\n          const outputTensor =\n              new Tensor(outputDims, 'float32', undefined, undefined, undefined, undefined, 'NHWC', outputData);\n          this._tensorData[node.outputs[0]] = {tensor: outputTensor, nnTensorId: outputId};\n          outputs.push(outputId);\n\n          opType = this._nn.SOFTMAX;\n        } break;\n        default: {\n          throw new Error(`${node.opType} is not supported.}`);\n        }\n      }\n\n      this._addOperation(opType, inputs, outputs);\n    }\n\n    // write back all cached operands and operations\n    for (const type of this._tensorTypes) {\n      this._model.addOperand(type);\n    }\n    for (const [index, value] of Object.entries(this._nnOperands)) {\n      this._model.setOperandValue(parseInt(index), value);\n    }\n    for (const [opCode, inputs, outputs] of this._operations) {\n      this._model.addOperation(opCode, inputs, outputs);\n    }\n  }\n\n  _getTensorByOnnxId(id: number) {\n    const data = this._tensorData[id];\n    if (data === undefined) {\n      throw new Error(`Cannot find tensor ${id}`);\n    }\n    return data.tensor;\n  }\n\n  _setOperandValue(index: number, value: NNTensorType) {\n    // Cache operand value. It could be modified later: BN fusion/Unsqueeze\n    this._nnOperands[index] = value;\n  }\n\n  _getTensorTypeById(index: number) {\n    return this._tensorTypes[index];\n  }\n\n  _addOperand(type: OperandOptions, value?: NNTensorType) {\n    let index = this._operandIndex++;\n    // Cache operand type. It could be modified later: Depthwise Conv\n    this._tensorTypes.push(type);\n    if (typeof value !== 'undefined') {\n      this._setOperandValue(index, value);\n    }\n    return index;\n  }\n\n  _addOperation(opCode: number, inputs: number[], outputs: number[]) {\n    this._operations.push([opCode, inputs, outputs]);\n  }\n\n  _addScalarInt32(value: number) {\n    return this._addOperand({type: this._nn.INT32}, new Int32Array([value]));\n  }\n\n  _addScalarFloat32(value: number) {\n    return this._addOperand({type: this._nn.FLOAT32}, new Float32Array([value]));\n  }\n\n  _addTensorFloat32(tensor: Float32Array, dims: number[]) {\n    return this._addOperand({\n      type: this._nn.TENSOR_FLOAT32,\n      dimensions: dims\n    }, tensor);\n  }\n\n  _addTensorInt32(tensor: Int32Array, dims: number[]) {\n    return this._addOperand({\n      type: this._nn.TENSOR_INT32,\n      dimensions: dims\n    }, tensor);\n  }\n\n  private _operandIndex: number;\n  private _nnOperands: NNTensorType[];\n  private _operations: any[];\n  private _tensorTypes: OperandOptions[];\n  private _tensorData: {tensor: Tensor, nnTensorId?: number}[];\n  private _nn: NeuralNetworkContext;\n  private _model: Model;\n  private _compilation: Compilation;\n  private _execution: Execution;\n}\n"],"sourceRoot":""}